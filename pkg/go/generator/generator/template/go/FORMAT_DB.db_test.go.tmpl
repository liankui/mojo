// Code generated by mojo. DO NOT EDIT.
// Rerunning mojo will overwrite this file.{{if IsMojoPackage .PackageName}}
//
// Copyright 2021 Mojo-lang.org
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.{{end}}

package {{.GoPackageName}}

import (
    "github.com/stretchr/testify/assert"
    "gorm.io/driver/sqlite"
    "gorm.io/gorm"
    "os"
    "path/filepath"
    "testing"
)

type {{.FullName}Item struct {
    ID   uint
    Name string
    {{CompactFullName .FullName}}   *{{.FullName}
}

func Test{{.FullName}_Scan(t *testing.T) {
    DB, err := gorm.Open(sqlite.Open(filepath.Join(os.TempDir(), "gorm.db")), &gorm.Config{})
    DB = DB.Debug()
    if err != nil {
        t.Errorf("failed to connect database")
    }

    const example = ""
    v, err := Parse{{CompactFullName .FullName}}(example)
    assert.NoError(t, err)

    item := {{.FullName}Item{Name: "mojo", {{CompactFullName .FullName}}: v}
    DB.Migrator().DropTable(&{{.FullName}Item{})
    DB.AutoMigrate(&{{.FullName}Item{})
    DB.Save(&item)

    var count int64

    if DB.Model(&{{.FullName}Item{}).Where("name = ?", item.Name).Count(&count).Error != nil || count != 1 {
        t.Errorf("Count soft deleted record, expects: %v, got: %v", 1, count)
    }

    var m {{.FullName}Item
    err = DB.Model(&{{.FullName}Item{}).Select("{{ToSnake .FullName}}").Where("name = ?", item.Name).Scan(&m).Error
    assert.NoError(t, err)

    assert.Equal(t, example, m.Format())
}
