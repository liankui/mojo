// Code generated by mojo. DO NOT EDIT.
// Rerunning mojo will overwrite this file.{{if IsMojoPackage .PackageName}}
//
// Copyright 2021 Mojo-lang.org
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.{{end}}

package {{.GoPackageName}}

import (
	"fmt"
    "strconv"
    "strings"{{if ne .PackageName "mojo.core"}}

    "github.com/mojo-lang/core/go/pkg/mojo/core"
    {{end}}
)

var {{CompactFullName .FullName}}Names = map[int32]string{ {{range .Items}}
	{{.Number}}: "{{.Value}}",{{end}}
}

var {{CompactFullName .FullName}}Values = map[string]{{.FullName}}{ {{range .Items}}
	"{{.Value}}": {{$.WrapName}}_{{ToScreamingSnake $.Name}}_{{ToScreamingSnake .RawValue}},{{end}}
}

func (x {{.FullName}}) Format() string {
    v := int32(x)
	if s, ok := {{CompactFullName .FullName}}Names[v]; ok {
	    if v == 0 && "unspecified" == strings.ToLower(s) {
	        return ""
	    }
		return s
	}
	if v == 0 {
	    return ""
	}
	return strconv.Itoa(int(v))
}

func (x {{.FullName}}) ToString() string {
    return x.Format()
}

{{$DefaultItem := index .Items .DefaultItem}}

func (x *{{.FullName}}) Parse(value string) error {
	if x != nil && len(value) > 0 {
        if s, ok := {{CompactFullName .FullName}}Values[value]; ok {
            *x = s
        } else {
            v := {{if ne .PackageName "mojo.core"}}core.{{end}}CaseStyler("{{if .CaseStyle}}{{.CaseStyle}}{{else}}snake{{end}}")(value)
            if s, ok = {{CompactFullName .FullName}}Values[v]; ok {
                *x = s
            } else {
                return fmt.Errorf("invalid {{.FullName}}: %s", value)
            }
        }
	}
	return nil
}

func Parse{{.FullName}}(value string) ({{.FullName}}, error) {
    var v {{.FullName}}
    if err := (&v).Parse(value); err != nil {
        return v, err
    }
    return v, nil
}
