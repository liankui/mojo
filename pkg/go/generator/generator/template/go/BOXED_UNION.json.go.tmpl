// Code generated by mojo. DO NOT EDIT.
// Rerunning mojo will overwrite this file.{{if IsMojoPackage .PackageName}}
//
// Copyright 2021 Mojo-lang.org
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.{{end}}

package {{.GoPackageName}}

import (
    "unsafe"

	jsoniter "github.com/json-iterator/go"
    {{if ne "core" .GoPackageName}}"github.com/mojo-lang/core/go/pkg/mojo/core"{{end}}
)

func init() {
	{{if ne "core" .GoPackageName}}core.{{end}}RegisterJSONTypeDecoder("{{.GoPackageName}}.{{.FullName}}", &{{CompactFullName .FullName}}Codec{})
	{{if ne "core" .GoPackageName}}core.{{end}}RegisterJSONTypeEncoder("{{.GoPackageName}}.{{.FullName}}", &{{CompactFullName .FullName}}Codec{})
}

type {{CompactFullName .FullName}}Codec struct {
}

func (codec *{{CompactFullName .FullName}}Codec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	any := iter.ReadAny()
    {{ToLowerCamel .Name}} := (*{{.FullName}})(ptr)
    switch any.ValueType() {
        {{if .HasBoolField}}case jsoniter.BoolValue:
        {{- end}}
        {{if .HasNumberField}}case jsoniter.NumberValue:
        {{- end}}
        {{if .HasStringField}}case jsoniter.StringValue:
        {{- end}}
        {{if .HasArrayField}}case jsoniter.ArrayValue:
        {{- end}}
        {{if .HasObjectField}}case jsoniter.ObjectValue:
        {{if .Discriminator}}
        t := any.Get("{{.Discriminator}}").ToString()
        switch t {
        {{range $i := .ObjectFields}}
        case "{{$i.Name}}":
            val := &{{$i.Format}}{}
            any.ToVal(val)
            {{ToLowerCamel $.Name}}.{{$.FullName}} = &{{$.FullName}}_{{$i.Format}}{ {{$i.Format}}: val}
        {{end}}
        }
        {{else}}
        {{end}}
        {{- end}}
    }
}

func (codec *{{CompactFullName .FullName}}Codec) IsEmpty(ptr unsafe.Pointer) bool {
	{{ToLowerCamel .Name}} := (*{{.FullName}})(ptr)
	return 	{{ToLowerCamel .Name}} == nil || {{ToLowerCamel .Name}}.{{.FullName}} == nil
}

func (codec *{{CompactFullName .FullName}}Codec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	{{ToLowerCamel .Name}} := (*{{.FullName}})(ptr)

    switch x := {{ToLowerCamel .Name}}.{{.FullName}}.(type) { {{range $i := .ObjectFields}}
    case *{{$.FullName}}_{{$i.Name}}:
        stream.WriteVal(x.{{$i.Name}}) {{end}} {{range $i := .ArrayFields}}
    case *{{$.FullName}}_{{$i.Name}}:
        stream.WriteVal(x.{{$i.Name}}) {{ end}} {{range $i := .StringFields}}
    case *{{$.FullName}}_{{$i.Name}}:
        stream.WriteVal(x.{{$i.Name}}) {{ end}} {{range $i := .NumberFields}}
    case *{{$.FullName}}_{{$i.Name}}:
       stream.WriteVal(x.{{$i.Name}}) {{ end}} {{if .HasBoolField}}
    case *{{$.FullName}}_{{$i.Name}}:
           stream.WriteVal(x.{{$i.Name}}) {{end}}
    }
}