// Code generated by mojo. DO NOT EDIT.
// Rerunning mojo will overwrite this file. {{if IsMojoPackage .PackageName}}
//
// Copyright 2021 Mojo-lang.org
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.{{end}}

package {{.GoPackageName}}

import (
	"unsafe"

    jsoniter "github.com/json-iterator/go"
    {{if ne "core" .GoPackageName}}"github.com/mojo-lang/core/go/pkg/mojo/core"{{end}}
)

type {{CompactFullName .FullName}}Query struct {
    ListQuery
}

func New{{CompactFullName .FullName}}Query(request *{{.FullName}}) (*{{CompactFullName .FullName}}Query, error) {
	query := &{{CompactFullName .FullName}}Query{}

	query.Order = request.Order
	query.Unique = request.Unique
	query.FieldMask = request.FieldMask
	query.PageSize = request.PageSize
	query.PageToken = request.PageToken
	query.Skip = request.Skip

    {{range .Fields}}
        query.Fields = append(query.Fields, &db.QueryField{
            Name: {{$.Name}},
            Keywords: []interface{}{request.{{$.Name}}},
        }
    {{end}}

    if len(request.Filter) > 0 {
        plugins := plugin.NewPlugins("syntax")
        sf, err := plugins.ParseString(context.Empty(), request.Filter)
        if err != nil {
            return nil, err
        }

        if len(sf.Statements) > 0 {
            if expr := sf.Statements[0].GetExpression(); expr != nil {
                query.Filter = expr
            }
        }
    }
    return query, nil
}

