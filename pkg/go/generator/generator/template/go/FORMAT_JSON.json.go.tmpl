// Code generated by mojo. DO NOT EDIT.
// Rerunning mojo will overwrite this file.{{if IsMojoPackage .PackageName}}
//
// Copyright 2021 Mojo-lang.org
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.{{end}}

package {{.GoPackageName}}

import (
    "unsafe"

    jsoniter "github.com/json-iterator/go"
    {{if ne "core" .GoPackageName}}"github.com/mojo-lang/core/go/pkg/mojo/core"{{end}}
)

{{if not .EncodingAsStruct}}func init() {
	{{if ne "core" .GoPackageName}}core.{{end}}RegisterJSONTypeDecoder("{{.GoPackageName}}.{{.FullName}}", &{{CompactFullName .FullName}}StringCodec{})
	{{if ne "core" .GoPackageName}}core.{{end}}RegisterJSONTypeEncoder("{{.GoPackageName}}.{{.FullName}}", &{{CompactFullName .FullName}}StringCodec{})
}{{end}}

// Bare{{CompactFullName .FullName}} will be jsonify to raw, without any codec
type Bare{{CompactFullName .FullName}} {{.FullName}}

type {{CompactFullName .FullName}}StringCodec struct {
    IsFieldPointer bool
}

func (codec *{{CompactFullName .FullName}}StringCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
    s := iter.ReadString()
    {{GoLocalName .Name "s"}} := codec.{{ToLowerCamel .Name}}(ptr)
    if {{GoLocalName .Name "s"}} == nil {
        {{GoLocalName .Name "s"}} = &{{.FullName}}{}
        *(**{{.FullName}})(ptr) = {{GoLocalName .Name "s"}}
    }

    if err := {{GoLocalName .Name "s"}}.Parse(s); err != nil {
        iter.ReportError("{{CompactFullName .FullName}}StringCodec", err.Error())
    }
}

func (codec *{{CompactFullName .FullName}}StringCodec) IsEmpty(ptr unsafe.Pointer) bool {
    {{ToLowerCamel .Name}} := codec.{{ToLowerCamel .Name}}(ptr)
    if {{ToLowerCamel .Name}} != nil {
        if checker, ok := interface{}({{ToLowerCamel .Name}}).({{if ne "core" .GoPackageName}}core.{{end}}EmptyChecker); ok {
            return checker.IsEmpty()
        }
        return false
    }
    return true
}

func (codec *{{CompactFullName .FullName}}StringCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
    {{ToLowerCamel .Name}} := codec.{{ToLowerCamel .Name}}(ptr)
    stream.WriteString({{ToLowerCamel .Name}}.Format())
}

func (codec *{{CompactFullName .FullName}}StringCodec) {{ToLowerCamel .Name}}(ptr unsafe.Pointer) *{{.FullName}} {
    if codec.IsFieldPointer {
        return *(**{{.FullName}})(ptr)
    }
    return (*{{.FullName}})(ptr)
}

type {{CompactFullName .FullName}}StructCodec struct {
    IsFieldPointer bool
}

func (codec *{{CompactFullName .FullName}}StructCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
    {{GoLocalName .Name "a"}} := codec.bare{{CompactFullName .FullName}}(ptr)
    if a := iter.ReadAny(); a.ValueType() == jsoniter.ObjectValue {
        if {{GoLocalName .Name "a"}} == nil {
            {{GoLocalName .Name "a"}} = &Bare{{CompactFullName .FullName}}{}
            *(**Bare{{CompactFullName .FullName}})(ptr) = {{GoLocalName .Name "a"}}
        }
        a.ToVal({{GoLocalName .Name "a"}})
    }
}

func (codec *{{CompactFullName .FullName}}StructCodec) IsEmpty(ptr unsafe.Pointer) bool {
    {{ToLowerCamel .Name}} := (*{{.FullName}})(codec.bare{{CompactFullName .FullName}}(ptr))
    if {{ToLowerCamel .Name}} != nil {
        if checker, ok := interface{}({{ToLowerCamel .Name}}).({{if ne "core" .GoPackageName}}core.{{end}}EmptyChecker); ok {
            return checker.IsEmpty()
        }
        return false
    }
    return true
}

func (codec *{{CompactFullName .FullName}}StructCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
    stream.WriteVal(codec.bare{{CompactFullName .FullName}}(ptr))
}

func (codec *{{CompactFullName .FullName}}StructCodec) bare{{CompactFullName .FullName}}(ptr unsafe.Pointer) *Bare{{CompactFullName .FullName}} {
    if codec.IsFieldPointer {
        return *(**Bare{{CompactFullName .FullName}})(ptr)
    }
    return (*Bare{{CompactFullName .FullName}})(ptr)
}
