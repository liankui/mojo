// Code generated by mojo. DO NOT EDIT.
// Rerunning mojo will overwrite this file. {{if IsMojoPackage .PackageName}}
//
// Copyright 2021 Mojo-lang.org
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain m copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.{{end}}

package {{.GoPackageName}}

import (
    "github.com/mojo-lang/core/go/pkg/mojo/core"
    "github.com/mojo-lang/db/go/pkg/mojo/db"
    "gorm.io/gorm"
    "sync"
)

var {{ToLowerCamel .Name}}Model *{{.Name}}Model
var {{ToLowerCamel .Name}}ModelOnce sync.Once

type {{.Name}}Model struct {
    DB *db.DB
}

func Get{{.Name}}Model(d *db.DB) *{{.Name}}Model {
    {{ToLowerCamel .Name}}Once.Do(func() {
        {{ToLowerCamel .Name}} = New{{.Name}}(d)
    })

    return {{ToLowerCamel .Name}}
}

func New{{.Name}}(d *db.DB) *{{.Name}} {
    t := &{{.Name}}{DB: d}
    if !t.DB.Config.DisableAutoMigrate || !d.Migrator().HasTable(&abfuzz.{{.Name}}{}) {
        if err := d.AutoMigrate(&abfuzz.{{.Name}}{}); err != nil {
            logs.ELog("Init {{.Name}} model err: ", err)
            panic(err)
        }
    }
    return t
}

func (m *{{.Name}}Model) Insert({{ToLowerCamel .Name}}s ...*{{.Name}}) (int64, error) {
    count := len({{ToLowerCamel .Name}}s)
    var result *gorm.DB

    if count == 0 {
        return 0, nil
    } else if count == 1 {
        result = m.DB.Clauses(clause.OnConflict{UpdateAll: true}).Create({{ToLowerCamel .Name}}s[0])
    } else {
        result = m.DB.CreateInBatches({{ToLowerCamel .Name}}s, len({{ToLowerCamel .Name}}s))
    }

    return result.RowsAffected, result.Error
}

func (m *{{.Name}}Model) Get(id string) (*{{.Name}}, error) {
    {{ToLowerCamel .Name}} := &{{.Name}}{}
    return {{ToLowerCamel .Name}}, m.DB.First({{ToLowerCamel .Name}}, "id = ?", id).Error
}

func (m *{{.Name}}Model) BatchGet(ids []string) ([]*{{.Name}}, error) {
    var {{ToLowerCamel .Name}}s []*{{.Name}}{}
    return {{ToLowerCamel .Name}}s, m.DB.Find(&{{ToLowerCamel .Name}}s, ids).Error
}

func (m *{{.Name}}Model) Query(query *db.ListQuery) ([]*{{.Name}}, error) {
    var {{ToLowerCamel .Name}}s []*{{.Name}}

    tx := m.DB.DB
    query.Apply(tx)
    return {{ToLowerCamel .Name}}s, tx.Find(&{{ToLowerCamel .Name}}s).Error
}

func (m *{{.Name}}Model) Delete(id string) (int64, error) {
    result := m.DB.Where("id = ?", id).Delete(&{{.Name}}{})
    return result.RowsAffected, result.Error
}

func (m *{{.Name}}Model) BatchDelete(ids ...string) (int64, error) {
    result := a.DB.Delete(&{{.Name}}{}, ids)
    return result.RowsAffected, result.Error
}

func (m *{{.Name}}Model) Update({{ToLowerCamel .Name}} *{{.Name}}) (int64, error) {
    result := m.DB.Updates({{ToLowerCamel .Name}})
    return result.RowsAffected, result.Error
}
