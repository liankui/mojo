// Code generated by chaosmojo. DO NOT EDIT.
// Rerunning chaosmojo will overwrite this file.
// Version: {{.Version}}
// Version Date: {{.VersionDate}}

package server

import (
	"context"
	"fmt"
	"net"
	"net/http"
	"net/http/pprof"
	"strings"
	"time"

	// 3d Party
	nclient "github.com/chaos-io/gokit/client"
	"github.com/chaos-io/gokit/kit"
	"github.com/chaos-io/gokit/metrics"
	"github.com/chaos-io/gokit/sd"
	nserver "github.com/chaos-io/gokit/server"
	"github.com/chaos-io/gokit/tracing"
	"github.com/chaos-io/gokit/utils/network"
	"github.com/chaos-io/chaos/logs"
	{{if .Interface.HasSubscription}}"github.com/chaos-io/chaos/messaging"{{end}}
	"github.com/etherlabsio/healthcheck/v2"
	kitprometheus "github.com/go-kit/kit/metrics/prometheus"
	"github.com/gorilla/mux"
	{{if .Interface.HasSubscription}}jsoniter "github.com/json-iterator/go"{{end}}
	stdprometheus "github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promhttp"
	"github.com/rs/cors"
	_ "go.uber.org/automaxprocs"
	"google.golang.org/grpc"

	// This Service api
	pb "{{.Go.ApiImportPath -}}"
    "{{.Go.RepositoryPath -}}/pkg/{{ToKebab .Interface.BaredName}}-service/handlers"
    "{{.Go.RepositoryPath -}}/pkg/{{ToKebab .Interface.BaredName}}-service/svc"
)

var _ nclient.Config

func NewEndpoints(options map[string]interface{}) svc.Endpoints {
	// Business domain.
	var service pb.{{.Interface.ServerName}}
	{
		service = handlers.NewService()
		// Wrap Service with middlewares. See handlers/middlewares.go
		service = handlers.WrapService(service, options)
	}

	// Endpoint domain.
	var (
	{{range $i := .Interface.Methods -}}
		{{ToLowerCamel $i.Name}}Endpoint = svc.Make{{ToCamel $i.Name}}Endpoint(service)
	{{end}}
	)

	endpoints := svc.Endpoints{
	{{range $i := .Interface.Methods -}}
		{{ToCamel $i.Name}}Endpoint:    {{ToLowerCamel $i.Name}}Endpoint,
	{{end}}
	}

	// Wrap selected Endpoints with middlewares. See handlers/middlewares.go
	endpoints = handlers.WrapEndpoints(endpoints, options)

	return endpoints
}

func RegisterService(cfg nserver.Config, r *mux.Router, s *grpc.Server) svc.Endpoints {
    const FullServiceName = "{{.Go.PackageName}}.{{.Interface.Name}}"

    // tracing init
	tracer, c := tracing.New(FullServiceName)
    if c != nil {
        defer c.Close()
    }

    // Create a single logger, which we'll use and give to other components.
    logger := kit.Logger()

    options := map[string]interface{} {
        "tracer":  tracer,
        "logger":  logger,
    }

    metricsConfig := metrics.NewConfig("metrics")
    if metricsConfig.Enabled() {
        fieldKeys := []string{"method", "access_key", "error"}
        count := kitprometheus.NewCounterFrom(stdprometheus.CounterOpts{
            Namespace: metricsConfig.Department,
            Subsystem: metricsConfig.Project,
            Name:      "request_count",
            Help:      "Number of requests received.",
        }, fieldKeys)

        latency := kitprometheus.NewHistogramFrom(stdprometheus.HistogramOpts{
            Namespace: metricsConfig.Department,
            Subsystem: metricsConfig.Project,
            Name:      "request_latency_seconds",
            Help:      "Total duration of requests in seconds.",
        }, fieldKeys)

        options["count"] = count
        options["latency"] = latency
    }

    sdConfig := sd.NewConfig("sd")
    sdClient := sd.New(sdConfig, logger)

    if sdClient != nil {
        url := "etcd://"+ network.GetHost() + ":" + getGrpcPort(cfg.GrpcAddr)
        err := sdClient.Register(url, FullServiceName, []string{})
        if err != nil {
            panic(err)
        }
        defer sdClient.Deregister()
    }

    // required service clients ...
    // xxClient := xx_client.New(nclient.NewConfig("xx"), sdClient.Instancer(FullServiceName), tracer, logger)
    // defer xxClient.Close()

    endpoints := NewEndpoints(options)

	svc.RegisterHttpHandler(r, endpoints, tracer, logger)
	pb.Register{{.Interface.ServerName}}(s, svc.MakeGRPCServer(endpoints, tracer, logger))

	return endpoints
}

// Run starts a new http server, gRPC server, and a debug server with the
// passed config and logger
func Run(cfg nserver.Config) {
	// Mechanical domain.
	errc := make(chan error)

	// Interrupt handler.
	go handlers.InterruptHandler(errc)

	// Debug listener.
	go func() {
	    logs.Infow("begin debug server", "transport", "debug", "address", cfg.DebugAddr)

		m := http.NewServeMux()
		m.Handle("/debug/pprof/", http.HandlerFunc(pprof.Index))
		m.Handle("/debug/pprof/cmdline", http.HandlerFunc(pprof.Cmdline))
		m.Handle("/debug/pprof/profile", http.HandlerFunc(pprof.Profile))
		m.Handle("/debug/pprof/symbol", http.HandlerFunc(pprof.Symbol))
		m.Handle("/debug/pprof/trace", http.HandlerFunc(pprof.Trace))

        m.Handle("/metrics", promhttp.Handler())

        m.Handle("/health", healthcheck.Handler(
            // WithTimeout allows you to set a max overall timeout.
            healthcheck.WithTimeout(5*time.Second),
            healthcheck.WithChecker("alive", healthcheck.CheckerFunc(func(ctx context.Context) error {
                conn, err := net.DialTimeout("tcp", cfg.HttpAddr, time.Second)
                if err != nil {
                    return err
                }
                return conn.Close()
            })),
        ))

		errc <- http.ListenAndServe(cfg.DebugAddr, m)
	}()

	s := grpc.NewServer(grpc.UnaryInterceptor(unaryServerFilter))
    r := mux.NewRouter()
    endpoints := RegisterService(cfg, r, s)

	// HTTP transport.
	go func() {
	    logs.Infow("begin http server", "transport", "HTTP", "address", cfg.HttpAddr)
		h := cors.AllowAll().Handler(r)
		errc <- http.ListenAndServe(cfg.HttpAddr, h)
	}()

	// gRPC transport.
	go func() {
	    logs.Infow("begin grpc server", "transport", "gRPC", "address", cfg.GrpcAddr)
		ln, err := net.Listen("tcp", cfg.GrpcAddr)
		if err != nil {
			errc <- err
			return
		}
		errc <- s.Serve(ln)
	}()

	// if watchObj, err := config.WatchFunc(level.ChangeLogLevel, level.LevelPath); err == nil {
	//    defer func() { _ = watchObj.Close() }()
	// } else {
	//    panic(err.Error())
	// }
    {{if .Interface.HasSubscription}}
    client, err := messaging.NewClient()
    if err != nil {
        logs.Fatalw("Agent Server Run: failed to create the message client", "error", err.Error())
    }

    for _, sub := range client.GetConfig().GetSubscriptions() {
        ep := sub.Endpoint
        if len(ep.Service) > 0 && ep.Service != "{{.Interface.Name}}" {
            continue
        }
        logs.Infof("{{.Go.PackageName}}.{{.Interface.ServerName}} subscribed the %s topic", sub.Topic)
        client.Subscribe(sub, func(ctx context.Context, s *messaging.Subscription, m *messaging.SubMessage) error {
            ctx = context.WithValue(ctx, messaging.TopicKey, s.Topic)
            ctx = context.WithValue(ctx, messaging.MessageKey, m)
            ctx = context.WithValue(ctx, messaging.MessageIdKey, m.Id)
            ctx = context.WithValue(ctx, messaging.MessageAttributesKey, m.Attributes)
            switch ep.Method { {{range $i := .Interface.Methods}}
            {{if $i.Subscriptions}}case "{{$i.Name}}":
                request := &pb.{{ToCamel $i.Name}}Request{}
                if err = jsoniter.ConfigFastest.UnmarshalFromString(m.Data, request); err != nil {
                    logs.Warnw("failed to unmarshal the queue's message to json", "error", err.Error())
                    m.Term()
                    return err
                }
                logs.Infow("received the message", "topic", s.Topic, "id", m.Id)
                if _, err = endpoints.{{ToCamel $i.Name}}(ctx, request); err != nil {
                    m.Nak()
                } else {
                    m.Ack()
                }{{end}}
                {{- end}}
            }
            return nil
        })
    }
    {{else}}_ = endpoints{{end}}

	// Run!
	logs.Info("{{.Go.PackageName}}.{{.Interface.ServerName}}", " started.")
	logs.Info("{{.Go.PackageName}}.{{.Interface.ServerName}}", <-errc)
	{{if .Interface.HasSubscription}}client.Shutdown(){{end}}
	logs.Info("{{.Go.PackageName}}.{{.Interface.ServerName}}", " closed.")
}

func getGrpcPort(addr string) string {
    host := strings.Split(addr, ":")
    if len(host) < 2 {
        panic("host name is invalid (" + addr + ")")
    }
    return host[1]
}

func unaryServerFilter(ctx context.Context, req interface{},
	                   info *grpc.UnaryServerInfo,
	                   handler grpc.UnaryHandler) (resp interface{}, err error) {
	// if err := middleware.Validate(req); err != nil {
	//	logs.Errorf("validate request failed, err: %s", err)
	//	return nil, core.NewError(http.StatusBadRequest, err.Error())
	// }

	defer func() {
		if r := recover(); r != nil {
			err = fmt.Errorf("panic: %v", r)
		}
	}()

	resp, err = handler(ctx, req)
	if err != nil {
		return resp, err
	}

	// var validatorCfg middleware.ValidatorConfig
	// _ = config.ScanKey("validator", &validatorCfg)
	// if !validatorCfg.CheckResponse {
	//	return
	// }
	// if err = middleware.Validate(resp); err != nil {
	//	logs.Errorf("validate response failed, err: %s", err)
	//	return nil, core.NewError(http.StatusInternalServerError, err.Error())
	// }
	return
}
