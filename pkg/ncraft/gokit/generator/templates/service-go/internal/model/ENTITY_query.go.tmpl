{{/*
package model

func {{.Name}}ToQuery(request *{{.Name}}) (*db.Query, error) {
    query := &db.Query{}

    // parse filter
    query.Order = request.Order
    query.Unique = request.Unique
    query.FieldMask = request.FieldMask
    query.PageSize = request.PageSize
    query.PageToken = request.PageToken
    query.Skip = request.Skip

    {{range .Fields}}
        query.Fields = append(query.Fields, &db.QueryField{
            Name: {{$.Name}},
            Keywords: []interface{}{request.{{$.Name}}},
        }
    {{end}}

    // parse field keyword search
    if len(request.Filter) > 0 {
        plugins := plugin.NewPlugins("syntax")
        sf, err := plugins.ParseString(context.Empty(), request.Filter)
        if err != nil {
            return nil, err
        }

        if len(sf.Statements) > 0 {
            if expr := sf.Statements[0].GetExpression(); expr != nil {
                query.Filter = expr
            }
        }
    }
    return query, nil
}

*/}}