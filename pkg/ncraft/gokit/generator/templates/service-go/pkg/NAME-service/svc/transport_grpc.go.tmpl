// Code generated by chaosmojo. DO NOT EDIT.
// Rerunning chaosmojo will overwrite this file.
// Version: {{.Version}}
// Version Date: {{.VersionDate}}

package svc

// This file provides server-side bindings for the gRPC transport.
// It utilizes the transport/grpc.Server.

import (
	"context"
	"net/http"

	"github.com/chaos-io/gokit/tracing"
	"github.com/go-kit/kit/log"
	grpctransport "github.com/go-kit/kit/transport/grpc"
	"go.opentelemetry.io/otel/trace"
	"google.golang.org/grpc/metadata"

    {{range $i := .Go.ImportedTypePaths}}
    	"{{$i}}"
    {{- end}}

    // this service api
    pb "{{.Go.ApiImportPath -}}"
)
{{if .HasImported}}
var ({{range $msg := .ImportedMessages}}
	_ = {{$msg.Go.PackageName}}.{{$msg.Name}}{}
{{- end}}{{range $enum := .ImportedEnums}}
	_ = {{$enum.Go.PackageName}}.{{$enum.Name}}(0)
{{- end}}){{end}}

// MakeGRPCServer makes a set of endpoints available as a gRPC {{.Interface.ServerName}}.
func MakeGRPCServer(endpoints Endpoints,  tracer trace.Tracer, logger log.Logger) pb.{{.Interface.ServerName}} {
	serverOptions := []grpctransport.ServerOption{
		 grpctransport.ServerBefore(metadataToContext),
		 grpctransport.ServerErrorLogger(logger),
	}

	addTracerOption := func(methodName string) []grpctransport.ServerOption {
	    if tracer != nil {
	        return append(serverOptions, grpctransport.ServerBefore(tracing.GRPCToContext(tracer, methodName)))
	    }
	    return serverOptions
	}

	return &grpcServer{
	// {{ .Interface.Name }}
	{{range $i := .Interface.Methods}}
		{{ToLowerCamel $i.Name}}: grpctransport.NewServer(
			endpoints.{{ToCamel $i.Name}}Endpoint,
			DecodeGRPC{{ToCamel $i.Name}}Request,
			EncodeGRPC{{ToCamel $i.Name}}Response,
			addTracerOption("{{$i.Name}}")...,
		),
	{{- end}}
	}
}

// grpcServer implements the {{GoName .Interface.Name}}Server interface
type grpcServer struct {
    pb.Unimplemented{{GoName .Interface.ServerName}}
{{range $i := .Interface.Methods}}
	{{ToLowerCamel $i.Name}}   grpctransport.Handler
{{- end}}
}

// Methods for grpcServer to implement {{GoName .Interface.Name}}Server interface
{{range $i := .Interface.Methods}}
func (s *grpcServer) {{ToCamel $i.Name}}(ctx context.Context, req *{{GoPackageName $i.Request.Name}}.{{GoName $i.Request.Name}}) (*{{GoPackageName $i.Response.Name}}.{{GoName $i.Response.Name}}, error) {
	_, rep, err := s.{{ToLowerCamel $i.Name}}.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*{{GoPackageName $i.Response.Name}}.{{GoName $i.Response.Name}}), nil
}
{{end}}

// Server Decode
{{range $i := .Interface.Methods}}
// DecodeGRPC{{ToCamel $i.Name}}Request is a transport/grpc.DecodeRequestFunc that converts a
// gRPC {{ToCamel $i.Name}} request to a user-domain {{ToCamel $i.Name}} request. Primarily useful in a server.
func DecodeGRPC{{ToCamel $i.Name}}Request(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*{{GoPackageName $i.Request.Name}}.{{GoName $i.Request.Name}})
	return req, nil
}
{{end}}

// Server Encode
{{range $i := .Interface.Methods}}
// EncodeGRPC{{ToCamel $i.Name}}Response is a transport/grpc.EncodeResponseFunc that converts a
// user-domain {{ToCamel $i.Name}} response to a gRPC {{ToCamel $i.Name}} reply. Primarily useful in a server.
func EncodeGRPC{{ToCamel $i.Name}}Response(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*{{GoPackageName $i.Response.Name}}.{{GoName $i.Response.Name}})
	return resp, nil
}
{{end}}

// Helpers

func metadataToContext(ctx context.Context, md metadata.MD) context.Context {
	for k, v := range md {
		if v != nil {
			// The key is added both in metadata format (k) which is all lower
			// and the http.CanonicalHeaderKey of the key so that it can be
			// accessed in either format
			ctx = context.WithValue(ctx, k, v[0])
			ctx = context.WithValue(ctx, http.CanonicalHeaderKey(k), v[0])
		}
	}

	return ctx
}
