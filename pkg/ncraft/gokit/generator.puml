@startuml
namespace client {
    class Argument << (S,Aquamarine) >> {
        + Name string
        + FlagName string
        + FlagArg string
        + FlagType string
        + FlagConvertFunc string
        + GoArg string
        + GoType string
        + GoConvertInvoc string
        + IsBaseType bool
        + Repeated bool
        + Enum bool

    }
    class Arguments << (S,Aquamarine) >> {
        + MethArgs <font color=blue>map</font>[string]*MethodArguments

        + AllFlags() string

    }
    class MethodArguments << (S,Aquamarine) >> {
        + Args []*Argument

        + FunctionArgs() string
        + CallArgs() string
        + MarshalFlags() string

    }
}


namespace generator {
    class HandlerTemplate << (S,Aquamarine) >> {
        + Interface string
        + Methods string
        + Extension string

    }
    class Options << (S,Aquamarine) >> {
        + Repository string
        + MixedInAPI bool
        + ApiRepository string
        + Version string
        + VersionDate string
        + Output string
        + PreviousFiles <font color=blue>map</font>[string]io.Reader
        + ExtensionData <font color=blue>map</font>[string]<font color=blue>interface</font>{}
        + HandlerTemplate *HandlerTemplate

        - generateTemplatedFiles(ds *data.Service, tmplPaths []string, getter templates.FileGetter) ([]*util.GeneratedFile, error)

        + SyncTo(ds *data.Service) 
        + GenerateClient(ds *data.Service) ([]*util.GeneratedFile, error)
        + GenerateService(ds *data.Service) ([]*util.GeneratedFile, error)

    }
}


namespace handlers {
    class HookRender << (S,Aquamarine) >> {
        - prev io.Reader

        + Render(_ string, _ *data.Service) (io.Reader, error)

    }
    class Middlewares << (S,Aquamarine) >> {
        - prev io.Reader

        + Load(prev io.Reader) 
        + Render(path string, service *data.Service) (io.Reader, error)

    }
    class handler << (S,Aquamarine) >> {
        - fileSet *token.FileSet
        - service *data.Interface
        - methodMap methodMap
        - ast *ast.File

        - buffer() (*bytes.Buffer, error)

        + Render(alias string, service *data.Service) (io.Reader, error)

    }
    class handlers.methodMap << (T, #FF7700) >>  {
    }
    class methodMap << (S,Aquamarine) >> {
        - pruneDecls(decls []ast.Decl, svcName string) ([]ast.Decl, []ast.Decl)

    }
    class "<font color=blue>map</font>[string]*data.Method" as fontcolorbluemapfontstringdataMethod {
        'This class was created so that we can correctly have an alias pointing to this name. Since it contains dots that can break namespaces
    }
}


namespace httptransport {
    class ClientHttpTransport << (S,Aquamarine) >> {
        + Render(tmpl string, ds *data.Service) (io.Reader, error)

    }
    class ServerHttpTransport << (S,Aquamarine) >> {
        + Render(tmpl string, ds *data.Service) (io.Reader, error)

    }
}


namespace model {
    class Model << (S,Aquamarine) >> {
        + Generate(path string, service *data.Service) ([]*util.GeneratedFile, error)

    }
}


namespace templates {
    class templates.FileGetter << (T, #FF7700) >>  {
    }
}


"handlers.fontcolorbluemapfontstringdataMethod" #.. "handlers.methodMap"
"templates.<font color=blue>func</font>(string) ([]byte, error)" #.. "templates.FileGetter"
@enduml
