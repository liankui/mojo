// Code generated from CPP14Parser.g4 by ANTLR 4.13.0. DO NOT EDIT.

package syntax // CPP14Parser
import (
	"fmt"
	"strconv"
	"sync"

	"github.com/antlr4-go/antlr/v4"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = strconv.Itoa
var _ = sync.Once{}

type CPP14Parser struct {
	*antlr.BaseParser
}

var CPP14ParserParserStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	LiteralNames           []string
	SymbolicNames          []string
	RuleNames              []string
	PredictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func cpp14parserParserInit() {
	staticData := &CPP14ParserParserStaticData
	staticData.LiteralNames = []string{
		"", "", "", "", "", "", "", "", "", "", "'alignas'", "'alignof'", "'asm'",
		"'auto'", "'bool'", "'break'", "'case'", "'catch'", "'char'", "'char16_t'",
		"'char32_t'", "'class'", "'const'", "'constexpr'", "'const_cast'", "'continue'",
		"'decltype'", "'default'", "'delete'", "'do'", "'double'", "'dynamic_cast'",
		"'else'", "'enum'", "'explicit'", "'export'", "'extern'", "'false'",
		"'final'", "'float'", "'for'", "'friend'", "'goto'", "'if'", "'inline'",
		"'int'", "'long'", "'mutable'", "'namespace'", "'new'", "'noexcept'",
		"'nullptr'", "'operator'", "'override'", "'private'", "'protected'",
		"'public'", "'register'", "'reinterpret_cast'", "'return'", "'short'",
		"'signed'", "'sizeof'", "'static'", "'static_assert'", "'static_cast'",
		"'struct'", "'switch'", "'template'", "'this'", "'thread_local'", "'throw'",
		"'true'", "'try'", "'typedef'", "'typeid'", "'typename'", "'union'",
		"'unsigned'", "'using'", "'virtual'", "'void'", "'volatile'", "'wchar_t'",
		"'while'", "'('", "')'", "'['", "']'", "'{'", "'}'", "'+'", "'-'", "'*'",
		"'/'", "'%'", "'^'", "'&'", "'|'", "'~'", "", "'='", "'<'", "'>'", "'+='",
		"'-='", "'*='", "'/='", "'%='", "'^='", "'&='", "'|='", "'<<='", "'>>='",
		"'=='", "'!='", "'<='", "'>='", "", "", "'++'", "'--'", "','", "'->*'",
		"'->'", "'?'", "':'", "'::'", "';'", "'.'", "'.*'", "'...'",
	}
	staticData.SymbolicNames = []string{
		"", "IntegerLiteral", "CharacterLiteral", "FloatingLiteral", "StringLiteral",
		"BooleanLiteral", "PointerLiteral", "UserDefinedLiteral", "MultiLineMacro",
		"Directive", "Alignas", "Alignof", "Asm", "Auto", "Bool", "Break", "Case",
		"Catch", "Char", "Char16", "Char32", "Class", "Const", "Constexpr",
		"Const_cast", "Continue", "Decltype", "Default", "Delete", "Do", "Double",
		"Dynamic_cast", "Else", "Enum", "Explicit", "Export", "Extern", "False_",
		"Final", "Float", "For", "Friend", "Goto", "If", "Inline", "Int", "Long",
		"Mutable", "Namespace", "New", "Noexcept", "Nullptr", "Operator", "Override",
		"Private", "Protected", "Public", "Register", "Reinterpret_cast", "Return",
		"Short", "Signed", "Sizeof", "Static", "Static_assert", "Static_cast",
		"Struct", "Switch", "Template", "This", "Thread_local", "Throw", "True_",
		"Try", "Typedef", "Typeid_", "Typename_", "Union", "Unsigned", "Using",
		"Virtual", "Void", "Volatile", "Wchar", "While", "LeftParen", "RightParen",
		"LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Plus", "Minus",
		"Star", "Div", "Mod", "Caret", "And", "Or", "Tilde", "Not", "Assign",
		"Less", "Greater", "PlusAssign", "MinusAssign", "StarAssign", "DivAssign",
		"ModAssign", "XorAssign", "AndAssign", "OrAssign", "LeftShiftAssign",
		"RightShiftAssign", "Equal", "NotEqual", "LessEqual", "GreaterEqual",
		"AndAnd", "OrOr", "PlusPlus", "MinusMinus", "Comma", "ArrowStar", "Arrow",
		"Question", "Colon", "Doublecolon", "Semi", "Dot", "DotStar", "Ellipsis",
		"Identifier", "DecimalLiteral", "OctalLiteral", "HexadecimalLiteral",
		"BinaryLiteral", "Integersuffix", "UserDefinedIntegerLiteral", "UserDefinedFloatingLiteral",
		"UserDefinedStringLiteral", "UserDefinedCharacterLiteral", "Whitespace",
		"Newline", "BlockComment", "LineComment",
	}
	staticData.RuleNames = []string{
		"translationUnit", "primaryExpression", "idExpression", "unqualifiedId",
		"qualifiedId", "nestedNameSpecifier", "lambdaExpression", "lambdaIntroducer",
		"lambdaCapture", "captureDefault", "captureList", "capture", "simpleCapture",
		"initcapture", "lambdaDeclarator", "postfixExpression", "typeIdOfTheTypeId",
		"expressionList", "pseudoDestructorName", "unaryExpression", "unaryOperator",
		"newOpExpression", "newOpPlacement", "newOpTypeId", "newOpDeclarator",
		"noPointerNewDeclarator", "newOpInitializer", "deleteExpression", "noExceptExpression",
		"castExpression", "pointerMemberExpression", "multiplicativeExpression",
		"additiveExpression", "shiftExpression", "shiftOperator", "relationalExpression",
		"equalityExpression", "andExpression", "exclusiveOrExpression", "inclusiveOrExpression",
		"logicalAndExpression", "logicalOrExpression", "conditionalExpression",
		"assignmentExpression", "assignmentOperator", "expression", "constantExpression",
		"statement", "labeledStatement", "expressionStatement", "compoundStatement",
		"statementSeq", "selectionStatement", "condition", "iterationStatement",
		"forInitStatement", "forRangeDeclaration", "forRangeInitializer", "jumpStatement",
		"declarationStatement", "declarationseq", "declaration", "blockDeclaration",
		"aliasDeclaration", "simpleDeclaration", "staticAssertDeclaration",
		"blankDeclaration", "attributeDeclaration", "declSpecifier", "declSpecifierSeq",
		"storageClassSpecifier", "functionSpecifier", "typedefName", "typeSpecifier",
		"trailingTypeSpecifier", "typeSpecifierSeq", "trailingTypeSpecifierSeq",
		"simpleTypeLengthModifier", "simpleTypeSignednessModifier", "simpleTypeSpecifier",
		"theTypeName", "decltypeSpecifier", "elaboratedTypeSpecifier", "enumName",
		"enumSpecifier", "enumHead", "opaqueEnumDeclaration", "enumkey", "enumbase",
		"enumeratorList", "enumeratorDefinition", "enumerator", "namespaceName",
		"originalNamespaceName", "namespaceDefinition", "namespaceAlias", "namespaceAliasDefinition",
		"qualifiednamespacespecifier", "usingDeclaration", "usingDirective",
		"asmDefinition", "linkageSpecification", "attributeSpecifierSeq", "attributeSpecifier",
		"alignmentspecifier", "attributeList", "attribute", "attributeNamespace",
		"attributeArgumentClause", "balancedTokenSeq", "balancedtoken", "initDeclaratorList",
		"initDeclarator", "declarator", "pointerDeclarator", "noPointerDeclarator",
		"parametersAndQualifiers", "trailingReturnType", "pointerOperator",
		"cvqualifierseq", "cvQualifier", "refqualifier", "declaratorid", "theTypeId",
		"abstractDeclarator", "pointerAbstractDeclarator", "noPointerAbstractDeclarator",
		"abstractPackDeclarator", "noPointerAbstractPackDeclarator", "parameterDeclarationClause",
		"parameterDeclarationList", "parameterDeclaration", "functionDefinition",
		"functionBody", "initializer", "braceOrEqualInitializer", "initializerClause",
		"initializerList", "bracedInitList", "className", "classSpecifier",
		"classHead", "classHeadName", "classVirtSpecifier", "classKey", "memberSpecification",
		"memberdeclaration", "memberDeclaratorList", "memberDeclarator", "virtualSpecifierSeq",
		"virtualSpecifier", "baseClause", "baseSpecifierList", "baseSpecifier",
		"classOrDeclType", "baseTypeSpecifier", "accessSpecifier", "conversionFunctionId",
		"conversionTypeId", "conversionDeclarator", "constructorInitializer",
		"memInitializerList", "memInitializer", "meminitializerid", "operatorFunctionId",
		"literalOperatorId", "templateDeclaration", "templateparameterList",
		"templateParameter", "typeParameter", "simpleTemplateId", "templateId",
		"templateName", "templateArgumentList", "templateArgument", "typeNameSpecifier",
		"explicitInstantiation", "explicitSpecialization", "tryBlock", "functionTryBlock",
		"handlerSeq", "handler", "exceptionDeclaration", "throwExpression",
		"exceptionSpecification", "dynamicExceptionSpecification", "typeIdList",
		"noeExceptSpecification", "theOperator", "literal",
	}
	staticData.PredictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 1, 145, 2101, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4,
		7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10,
		7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15, 7,
		15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7, 20,
		2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25, 2,
		26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2, 31,
		7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36, 7,
		36, 2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7, 41,
		2, 42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2, 46, 7, 46, 2,
		47, 7, 47, 2, 48, 7, 48, 2, 49, 7, 49, 2, 50, 7, 50, 2, 51, 7, 51, 2, 52,
		7, 52, 2, 53, 7, 53, 2, 54, 7, 54, 2, 55, 7, 55, 2, 56, 7, 56, 2, 57, 7,
		57, 2, 58, 7, 58, 2, 59, 7, 59, 2, 60, 7, 60, 2, 61, 7, 61, 2, 62, 7, 62,
		2, 63, 7, 63, 2, 64, 7, 64, 2, 65, 7, 65, 2, 66, 7, 66, 2, 67, 7, 67, 2,
		68, 7, 68, 2, 69, 7, 69, 2, 70, 7, 70, 2, 71, 7, 71, 2, 72, 7, 72, 2, 73,
		7, 73, 2, 74, 7, 74, 2, 75, 7, 75, 2, 76, 7, 76, 2, 77, 7, 77, 2, 78, 7,
		78, 2, 79, 7, 79, 2, 80, 7, 80, 2, 81, 7, 81, 2, 82, 7, 82, 2, 83, 7, 83,
		2, 84, 7, 84, 2, 85, 7, 85, 2, 86, 7, 86, 2, 87, 7, 87, 2, 88, 7, 88, 2,
		89, 7, 89, 2, 90, 7, 90, 2, 91, 7, 91, 2, 92, 7, 92, 2, 93, 7, 93, 2, 94,
		7, 94, 2, 95, 7, 95, 2, 96, 7, 96, 2, 97, 7, 97, 2, 98, 7, 98, 2, 99, 7,
		99, 2, 100, 7, 100, 2, 101, 7, 101, 2, 102, 7, 102, 2, 103, 7, 103, 2,
		104, 7, 104, 2, 105, 7, 105, 2, 106, 7, 106, 2, 107, 7, 107, 2, 108, 7,
		108, 2, 109, 7, 109, 2, 110, 7, 110, 2, 111, 7, 111, 2, 112, 7, 112, 2,
		113, 7, 113, 2, 114, 7, 114, 2, 115, 7, 115, 2, 116, 7, 116, 2, 117, 7,
		117, 2, 118, 7, 118, 2, 119, 7, 119, 2, 120, 7, 120, 2, 121, 7, 121, 2,
		122, 7, 122, 2, 123, 7, 123, 2, 124, 7, 124, 2, 125, 7, 125, 2, 126, 7,
		126, 2, 127, 7, 127, 2, 128, 7, 128, 2, 129, 7, 129, 2, 130, 7, 130, 2,
		131, 7, 131, 2, 132, 7, 132, 2, 133, 7, 133, 2, 134, 7, 134, 2, 135, 7,
		135, 2, 136, 7, 136, 2, 137, 7, 137, 2, 138, 7, 138, 2, 139, 7, 139, 2,
		140, 7, 140, 2, 141, 7, 141, 2, 142, 7, 142, 2, 143, 7, 143, 2, 144, 7,
		144, 2, 145, 7, 145, 2, 146, 7, 146, 2, 147, 7, 147, 2, 148, 7, 148, 2,
		149, 7, 149, 2, 150, 7, 150, 2, 151, 7, 151, 2, 152, 7, 152, 2, 153, 7,
		153, 2, 154, 7, 154, 2, 155, 7, 155, 2, 156, 7, 156, 2, 157, 7, 157, 2,
		158, 7, 158, 2, 159, 7, 159, 2, 160, 7, 160, 2, 161, 7, 161, 2, 162, 7,
		162, 2, 163, 7, 163, 2, 164, 7, 164, 2, 165, 7, 165, 2, 166, 7, 166, 2,
		167, 7, 167, 2, 168, 7, 168, 2, 169, 7, 169, 2, 170, 7, 170, 2, 171, 7,
		171, 2, 172, 7, 172, 2, 173, 7, 173, 2, 174, 7, 174, 2, 175, 7, 175, 2,
		176, 7, 176, 2, 177, 7, 177, 2, 178, 7, 178, 2, 179, 7, 179, 2, 180, 7,
		180, 2, 181, 7, 181, 2, 182, 7, 182, 2, 183, 7, 183, 2, 184, 7, 184, 2,
		185, 7, 185, 2, 186, 7, 186, 2, 187, 7, 187, 2, 188, 7, 188, 2, 189, 7,
		189, 1, 0, 3, 0, 382, 8, 0, 1, 0, 1, 0, 1, 1, 4, 1, 387, 8, 1, 11, 1, 12,
		1, 388, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 398, 8, 1, 1, 2,
		1, 2, 3, 2, 402, 8, 2, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 3, 3,
		411, 8, 3, 1, 3, 3, 3, 414, 8, 3, 1, 4, 1, 4, 3, 4, 418, 8, 4, 1, 4, 1,
		4, 1, 5, 1, 5, 1, 5, 1, 5, 3, 5, 426, 8, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1,
		5, 3, 5, 433, 8, 5, 1, 5, 3, 5, 436, 8, 5, 1, 5, 5, 5, 439, 8, 5, 10, 5,
		12, 5, 442, 9, 5, 1, 6, 1, 6, 3, 6, 446, 8, 6, 1, 6, 1, 6, 1, 7, 1, 7,
		3, 7, 452, 8, 7, 1, 7, 1, 7, 1, 8, 1, 8, 1, 8, 1, 8, 3, 8, 460, 8, 8, 3,
		8, 462, 8, 8, 1, 9, 1, 9, 1, 10, 1, 10, 1, 10, 5, 10, 469, 8, 10, 10, 10,
		12, 10, 472, 9, 10, 1, 10, 3, 10, 475, 8, 10, 1, 11, 1, 11, 3, 11, 479,
		8, 11, 1, 12, 3, 12, 482, 8, 12, 1, 12, 1, 12, 3, 12, 486, 8, 12, 1, 13,
		3, 13, 489, 8, 13, 1, 13, 1, 13, 1, 13, 1, 14, 1, 14, 3, 14, 496, 8, 14,
		1, 14, 1, 14, 3, 14, 500, 8, 14, 1, 14, 3, 14, 503, 8, 14, 1, 14, 3, 14,
		506, 8, 14, 1, 14, 3, 14, 509, 8, 14, 1, 15, 1, 15, 1, 15, 1, 15, 3, 15,
		515, 8, 15, 1, 15, 1, 15, 3, 15, 519, 8, 15, 1, 15, 1, 15, 3, 15, 523,
		8, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1,
		15, 1, 15, 1, 15, 3, 15, 537, 8, 15, 1, 15, 1, 15, 3, 15, 541, 8, 15, 1,
		15, 1, 15, 1, 15, 1, 15, 3, 15, 547, 8, 15, 1, 15, 1, 15, 1, 15, 1, 15,
		1, 15, 3, 15, 554, 8, 15, 1, 15, 1, 15, 1, 15, 1, 15, 3, 15, 560, 8, 15,
		1, 15, 1, 15, 3, 15, 564, 8, 15, 1, 15, 1, 15, 5, 15, 568, 8, 15, 10, 15,
		12, 15, 571, 9, 15, 1, 16, 1, 16, 1, 17, 1, 17, 1, 18, 3, 18, 578, 8, 18,
		1, 18, 1, 18, 1, 18, 3, 18, 583, 8, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1,
		18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 3, 18, 596, 8, 18, 1, 19,
		1, 19, 1, 19, 1, 19, 1, 19, 3, 19, 603, 8, 19, 1, 19, 1, 19, 1, 19, 1,
		19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 3, 19, 615, 8, 19, 1, 19,
		1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 3, 19, 625, 8, 19, 1,
		20, 1, 20, 1, 21, 3, 21, 630, 8, 21, 1, 21, 1, 21, 3, 21, 634, 8, 21, 1,
		21, 1, 21, 1, 21, 1, 21, 1, 21, 3, 21, 641, 8, 21, 1, 21, 3, 21, 644, 8,
		21, 1, 22, 1, 22, 1, 22, 1, 22, 1, 23, 1, 23, 3, 23, 652, 8, 23, 1, 24,
		1, 24, 3, 24, 656, 8, 24, 1, 24, 3, 24, 659, 8, 24, 1, 25, 1, 25, 1, 25,
		1, 25, 1, 25, 3, 25, 666, 8, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 3,
		25, 673, 8, 25, 5, 25, 675, 8, 25, 10, 25, 12, 25, 678, 9, 25, 1, 26, 1,
		26, 3, 26, 682, 8, 26, 1, 26, 1, 26, 3, 26, 686, 8, 26, 1, 27, 3, 27, 689,
		8, 27, 1, 27, 1, 27, 1, 27, 3, 27, 694, 8, 27, 1, 27, 1, 27, 1, 28, 1,
		28, 1, 28, 1, 28, 1, 28, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 3, 29,
		709, 8, 29, 1, 30, 1, 30, 1, 30, 5, 30, 714, 8, 30, 10, 30, 12, 30, 717,
		9, 30, 1, 31, 1, 31, 1, 31, 5, 31, 722, 8, 31, 10, 31, 12, 31, 725, 9,
		31, 1, 32, 1, 32, 1, 32, 5, 32, 730, 8, 32, 10, 32, 12, 32, 733, 9, 32,
		1, 33, 1, 33, 1, 33, 1, 33, 5, 33, 739, 8, 33, 10, 33, 12, 33, 742, 9,
		33, 1, 34, 1, 34, 1, 34, 1, 34, 3, 34, 748, 8, 34, 1, 35, 1, 35, 1, 35,
		5, 35, 753, 8, 35, 10, 35, 12, 35, 756, 9, 35, 1, 36, 1, 36, 1, 36, 5,
		36, 761, 8, 36, 10, 36, 12, 36, 764, 9, 36, 1, 37, 1, 37, 1, 37, 5, 37,
		769, 8, 37, 10, 37, 12, 37, 772, 9, 37, 1, 38, 1, 38, 1, 38, 5, 38, 777,
		8, 38, 10, 38, 12, 38, 780, 9, 38, 1, 39, 1, 39, 1, 39, 5, 39, 785, 8,
		39, 10, 39, 12, 39, 788, 9, 39, 1, 40, 1, 40, 1, 40, 5, 40, 793, 8, 40,
		10, 40, 12, 40, 796, 9, 40, 1, 41, 1, 41, 1, 41, 5, 41, 801, 8, 41, 10,
		41, 12, 41, 804, 9, 41, 1, 42, 1, 42, 1, 42, 1, 42, 1, 42, 1, 42, 3, 42,
		812, 8, 42, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 3, 43, 820, 8, 43,
		1, 44, 1, 44, 1, 45, 1, 45, 1, 45, 5, 45, 827, 8, 45, 10, 45, 12, 45, 830,
		9, 45, 1, 46, 1, 46, 1, 47, 1, 47, 1, 47, 3, 47, 837, 8, 47, 1, 47, 1,
		47, 1, 47, 1, 47, 1, 47, 1, 47, 3, 47, 845, 8, 47, 3, 47, 847, 8, 47, 1,
		48, 3, 48, 850, 8, 48, 1, 48, 1, 48, 1, 48, 1, 48, 3, 48, 856, 8, 48, 1,
		48, 1, 48, 1, 48, 1, 49, 3, 49, 862, 8, 49, 1, 49, 1, 49, 1, 50, 1, 50,
		3, 50, 868, 8, 50, 1, 50, 1, 50, 1, 51, 4, 51, 873, 8, 51, 11, 51, 12,
		51, 874, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52, 3, 52, 884, 8,
		52, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52, 3, 52, 892, 8, 52, 1, 53,
		1, 53, 3, 53, 896, 8, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 3, 53, 903,
		8, 53, 3, 53, 905, 8, 53, 1, 54, 1, 54, 1, 54, 1, 54, 1, 54, 1, 54, 1,
		54, 1, 54, 1, 54, 1, 54, 1, 54, 1, 54, 1, 54, 1, 54, 1, 54, 1, 54, 1, 54,
		1, 54, 3, 54, 925, 8, 54, 1, 54, 1, 54, 3, 54, 929, 8, 54, 1, 54, 1, 54,
		1, 54, 1, 54, 3, 54, 935, 8, 54, 1, 54, 1, 54, 1, 54, 3, 54, 940, 8, 54,
		1, 55, 1, 55, 3, 55, 944, 8, 55, 1, 56, 3, 56, 947, 8, 56, 1, 56, 1, 56,
		1, 56, 1, 57, 1, 57, 3, 57, 954, 8, 57, 1, 58, 1, 58, 1, 58, 1, 58, 1,
		58, 3, 58, 961, 8, 58, 1, 58, 1, 58, 3, 58, 965, 8, 58, 1, 58, 1, 58, 1,
		59, 1, 59, 1, 60, 4, 60, 972, 8, 60, 11, 60, 12, 60, 973, 1, 61, 1, 61,
		1, 61, 1, 61, 1, 61, 1, 61, 1, 61, 1, 61, 1, 61, 3, 61, 985, 8, 61, 1,
		62, 1, 62, 1, 62, 1, 62, 1, 62, 1, 62, 1, 62, 1, 62, 3, 62, 995, 8, 62,
		1, 63, 1, 63, 1, 63, 3, 63, 1000, 8, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1,
		64, 3, 64, 1007, 8, 64, 1, 64, 3, 64, 1010, 8, 64, 1, 64, 1, 64, 1, 64,
		3, 64, 1015, 8, 64, 1, 64, 1, 64, 1, 64, 3, 64, 1020, 8, 64, 1, 65, 1,
		65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 66, 1, 66, 1, 67, 1, 67,
		1, 67, 1, 68, 1, 68, 1, 68, 1, 68, 1, 68, 1, 68, 3, 68, 1041, 8, 68, 1,
		69, 4, 69, 1044, 8, 69, 11, 69, 12, 69, 1045, 1, 69, 3, 69, 1049, 8, 69,
		1, 70, 1, 70, 1, 71, 1, 71, 1, 72, 1, 72, 1, 73, 1, 73, 1, 73, 3, 73, 1060,
		8, 73, 1, 74, 1, 74, 1, 74, 1, 74, 3, 74, 1066, 8, 74, 1, 75, 4, 75, 1069,
		8, 75, 11, 75, 12, 75, 1070, 1, 75, 3, 75, 1074, 8, 75, 1, 76, 4, 76, 1077,
		8, 76, 11, 76, 12, 76, 1078, 1, 76, 3, 76, 1082, 8, 76, 1, 77, 1, 77, 1,
		78, 1, 78, 1, 79, 3, 79, 1089, 8, 79, 1, 79, 1, 79, 1, 79, 1, 79, 1, 79,
		1, 79, 1, 79, 3, 79, 1098, 8, 79, 1, 79, 4, 79, 1101, 8, 79, 11, 79, 12,
		79, 1102, 1, 79, 3, 79, 1106, 8, 79, 1, 79, 1, 79, 3, 79, 1110, 8, 79,
		1, 79, 1, 79, 3, 79, 1114, 8, 79, 1, 79, 1, 79, 3, 79, 1118, 8, 79, 1,
		79, 1, 79, 1, 79, 3, 79, 1123, 8, 79, 1, 79, 5, 79, 1126, 8, 79, 10, 79,
		12, 79, 1129, 9, 79, 1, 79, 1, 79, 1, 79, 3, 79, 1134, 8, 79, 1, 79, 1,
		79, 1, 79, 1, 79, 3, 79, 1140, 8, 79, 1, 80, 1, 80, 1, 80, 1, 80, 3, 80,
		1146, 8, 80, 1, 81, 1, 81, 1, 81, 1, 81, 3, 81, 1152, 8, 81, 1, 81, 1,
		81, 1, 82, 1, 82, 3, 82, 1158, 8, 82, 1, 82, 3, 82, 1161, 8, 82, 1, 82,
		1, 82, 1, 82, 1, 82, 3, 82, 1167, 8, 82, 1, 82, 1, 82, 3, 82, 1171, 8,
		82, 1, 82, 1, 82, 3, 82, 1175, 8, 82, 1, 82, 3, 82, 1178, 8, 82, 1, 83,
		1, 83, 1, 84, 1, 84, 1, 84, 1, 84, 3, 84, 1186, 8, 84, 3, 84, 1188, 8,
		84, 1, 84, 1, 84, 1, 85, 1, 85, 3, 85, 1194, 8, 85, 1, 85, 3, 85, 1197,
		8, 85, 1, 85, 3, 85, 1200, 8, 85, 1, 85, 3, 85, 1203, 8, 85, 1, 86, 1,
		86, 3, 86, 1207, 8, 86, 1, 86, 1, 86, 3, 86, 1211, 8, 86, 1, 86, 1, 86,
		1, 87, 1, 87, 3, 87, 1217, 8, 87, 1, 88, 1, 88, 1, 88, 1, 89, 1, 89, 1,
		89, 5, 89, 1225, 8, 89, 10, 89, 12, 89, 1228, 9, 89, 1, 90, 1, 90, 1, 90,
		3, 90, 1233, 8, 90, 1, 91, 1, 91, 1, 92, 1, 92, 3, 92, 1239, 8, 92, 1,
		93, 1, 93, 1, 94, 3, 94, 1244, 8, 94, 1, 94, 1, 94, 1, 94, 3, 94, 1249,
		8, 94, 1, 94, 1, 94, 3, 94, 1253, 8, 94, 1, 94, 1, 94, 1, 95, 1, 95, 1,
		96, 1, 96, 1, 96, 1, 96, 1, 96, 1, 96, 1, 97, 3, 97, 1266, 8, 97, 1, 97,
		1, 97, 1, 98, 1, 98, 3, 98, 1272, 8, 98, 1, 98, 1, 98, 3, 98, 1276, 8,
		98, 1, 98, 1, 98, 1, 98, 1, 99, 3, 99, 1282, 8, 99, 1, 99, 1, 99, 1, 99,
		3, 99, 1287, 8, 99, 1, 99, 1, 99, 1, 99, 1, 100, 1, 100, 1, 100, 1, 100,
		1, 100, 1, 100, 1, 101, 1, 101, 1, 101, 1, 101, 3, 101, 1302, 8, 101, 1,
		101, 1, 101, 3, 101, 1306, 8, 101, 1, 102, 4, 102, 1309, 8, 102, 11, 102,
		12, 102, 1310, 1, 103, 1, 103, 1, 103, 3, 103, 1316, 8, 103, 1, 103, 1,
		103, 1, 103, 3, 103, 1321, 8, 103, 1, 104, 1, 104, 1, 104, 1, 104, 3, 104,
		1327, 8, 104, 1, 104, 3, 104, 1330, 8, 104, 1, 104, 1, 104, 1, 105, 1,
		105, 1, 105, 5, 105, 1337, 8, 105, 10, 105, 12, 105, 1340, 9, 105, 1, 105,
		3, 105, 1343, 8, 105, 1, 106, 1, 106, 1, 106, 3, 106, 1348, 8, 106, 1,
		106, 1, 106, 3, 106, 1352, 8, 106, 1, 107, 1, 107, 1, 108, 1, 108, 3, 108,
		1358, 8, 108, 1, 108, 1, 108, 1, 109, 4, 109, 1363, 8, 109, 11, 109, 12,
		109, 1364, 1, 110, 1, 110, 1, 110, 1, 110, 1, 110, 1, 110, 1, 110, 1, 110,
		1, 110, 1, 110, 1, 110, 1, 110, 1, 110, 4, 110, 1380, 8, 110, 11, 110,
		12, 110, 1381, 3, 110, 1384, 8, 110, 1, 111, 1, 111, 1, 111, 5, 111, 1389,
		8, 111, 10, 111, 12, 111, 1392, 9, 111, 1, 112, 1, 112, 3, 112, 1396, 8,
		112, 1, 113, 1, 113, 1, 113, 1, 113, 1, 113, 3, 113, 1403, 8, 113, 1, 114,
		1, 114, 3, 114, 1407, 8, 114, 5, 114, 1409, 8, 114, 10, 114, 12, 114, 1412,
		9, 114, 1, 114, 1, 114, 1, 115, 1, 115, 1, 115, 3, 115, 1419, 8, 115, 1,
		115, 1, 115, 1, 115, 1, 115, 3, 115, 1425, 8, 115, 1, 115, 1, 115, 1, 115,
		1, 115, 3, 115, 1431, 8, 115, 1, 115, 1, 115, 3, 115, 1435, 8, 115, 3,
		115, 1437, 8, 115, 5, 115, 1439, 8, 115, 10, 115, 12, 115, 1442, 9, 115,
		1, 116, 1, 116, 3, 116, 1446, 8, 116, 1, 116, 1, 116, 3, 116, 1450, 8,
		116, 1, 116, 3, 116, 1453, 8, 116, 1, 116, 3, 116, 1456, 8, 116, 1, 116,
		3, 116, 1459, 8, 116, 1, 117, 1, 117, 1, 117, 3, 117, 1464, 8, 117, 1,
		118, 1, 118, 3, 118, 1468, 8, 118, 1, 118, 3, 118, 1471, 8, 118, 1, 118,
		1, 118, 3, 118, 1475, 8, 118, 1, 118, 3, 118, 1478, 8, 118, 3, 118, 1480,
		8, 118, 1, 119, 4, 119, 1483, 8, 119, 11, 119, 12, 119, 1484, 1, 120, 1,
		120, 1, 121, 1, 121, 1, 122, 3, 122, 1492, 8, 122, 1, 122, 1, 122, 1, 123,
		1, 123, 3, 123, 1498, 8, 123, 1, 124, 1, 124, 3, 124, 1502, 8, 124, 1,
		124, 1, 124, 1, 124, 1, 124, 3, 124, 1508, 8, 124, 1, 125, 1, 125, 4, 125,
		1512, 8, 125, 11, 125, 12, 125, 1513, 1, 125, 3, 125, 1517, 8, 125, 3,
		125, 1519, 8, 125, 1, 126, 1, 126, 1, 126, 1, 126, 3, 126, 1525, 8, 126,
		1, 126, 1, 126, 3, 126, 1529, 8, 126, 1, 126, 1, 126, 1, 126, 1, 126, 3,
		126, 1535, 8, 126, 1, 126, 1, 126, 1, 126, 1, 126, 1, 126, 3, 126, 1542,
		8, 126, 1, 126, 1, 126, 3, 126, 1546, 8, 126, 3, 126, 1548, 8, 126, 5,
		126, 1550, 8, 126, 10, 126, 12, 126, 1553, 9, 126, 1, 127, 5, 127, 1556,
		8, 127, 10, 127, 12, 127, 1559, 9, 127, 1, 127, 1, 127, 1, 128, 1, 128,
		1, 128, 1, 128, 1, 128, 1, 128, 1, 128, 3, 128, 1570, 8, 128, 1, 128, 1,
		128, 3, 128, 1574, 8, 128, 3, 128, 1576, 8, 128, 5, 128, 1578, 8, 128,
		10, 128, 12, 128, 1581, 9, 128, 1, 129, 1, 129, 3, 129, 1585, 8, 129, 1,
		129, 3, 129, 1588, 8, 129, 1, 130, 1, 130, 1, 130, 5, 130, 1593, 8, 130,
		10, 130, 12, 130, 1596, 9, 130, 1, 131, 3, 131, 1599, 8, 131, 1, 131, 1,
		131, 1, 131, 3, 131, 1604, 8, 131, 3, 131, 1606, 8, 131, 1, 131, 1, 131,
		3, 131, 1610, 8, 131, 1, 132, 3, 132, 1613, 8, 132, 1, 132, 3, 132, 1616,
		8, 132, 1, 132, 1, 132, 3, 132, 1620, 8, 132, 1, 132, 1, 132, 1, 133, 3,
		133, 1625, 8, 133, 1, 133, 1, 133, 1, 133, 1, 133, 1, 133, 3, 133, 1632,
		8, 133, 1, 134, 1, 134, 1, 134, 1, 134, 1, 134, 3, 134, 1639, 8, 134, 1,
		135, 1, 135, 1, 135, 3, 135, 1644, 8, 135, 1, 136, 1, 136, 3, 136, 1648,
		8, 136, 1, 137, 1, 137, 3, 137, 1652, 8, 137, 1, 137, 1, 137, 1, 137, 3,
		137, 1657, 8, 137, 5, 137, 1659, 8, 137, 10, 137, 12, 137, 1662, 9, 137,
		1, 138, 1, 138, 1, 138, 3, 138, 1667, 8, 138, 3, 138, 1669, 8, 138, 1,
		138, 1, 138, 1, 139, 1, 139, 3, 139, 1675, 8, 139, 1, 140, 1, 140, 1, 140,
		3, 140, 1680, 8, 140, 1, 140, 1, 140, 1, 141, 1, 141, 3, 141, 1686, 8,
		141, 1, 141, 1, 141, 3, 141, 1690, 8, 141, 3, 141, 1692, 8, 141, 1, 141,
		3, 141, 1695, 8, 141, 1, 141, 1, 141, 3, 141, 1699, 8, 141, 1, 141, 1,
		141, 3, 141, 1703, 8, 141, 3, 141, 1705, 8, 141, 3, 141, 1707, 8, 141,
		1, 142, 3, 142, 1710, 8, 142, 1, 142, 1, 142, 1, 143, 1, 143, 1, 144, 1,
		144, 1, 145, 1, 145, 1, 145, 1, 145, 4, 145, 1722, 8, 145, 11, 145, 12,
		145, 1723, 1, 146, 3, 146, 1727, 8, 146, 1, 146, 3, 146, 1730, 8, 146,
		1, 146, 3, 146, 1733, 8, 146, 1, 146, 1, 146, 1, 146, 1, 146, 1, 146, 1,
		146, 1, 146, 3, 146, 1742, 8, 146, 1, 147, 1, 147, 1, 147, 5, 147, 1747,
		8, 147, 10, 147, 12, 147, 1750, 9, 147, 1, 148, 1, 148, 3, 148, 1754, 8,
		148, 1, 148, 3, 148, 1757, 8, 148, 3, 148, 1759, 8, 148, 1, 148, 3, 148,
		1762, 8, 148, 1, 148, 3, 148, 1765, 8, 148, 1, 148, 1, 148, 3, 148, 1769,
		8, 148, 1, 149, 4, 149, 1772, 8, 149, 11, 149, 12, 149, 1773, 1, 150, 1,
		150, 1, 151, 1, 151, 1, 151, 1, 152, 1, 152, 3, 152, 1783, 8, 152, 1, 152,
		1, 152, 1, 152, 3, 152, 1788, 8, 152, 5, 152, 1790, 8, 152, 10, 152, 12,
		152, 1793, 9, 152, 1, 153, 3, 153, 1796, 8, 153, 1, 153, 1, 153, 1, 153,
		3, 153, 1801, 8, 153, 1, 153, 1, 153, 1, 153, 3, 153, 1806, 8, 153, 1,
		153, 1, 153, 3, 153, 1810, 8, 153, 1, 154, 3, 154, 1813, 8, 154, 1, 154,
		1, 154, 3, 154, 1817, 8, 154, 1, 155, 1, 155, 1, 156, 1, 156, 1, 157, 1,
		157, 1, 157, 1, 158, 1, 158, 3, 158, 1828, 8, 158, 1, 159, 1, 159, 3, 159,
		1832, 8, 159, 1, 160, 1, 160, 1, 160, 1, 161, 1, 161, 3, 161, 1839, 8,
		161, 1, 161, 1, 161, 1, 161, 3, 161, 1844, 8, 161, 5, 161, 1846, 8, 161,
		10, 161, 12, 161, 1849, 9, 161, 1, 162, 1, 162, 1, 162, 3, 162, 1854, 8,
		162, 1, 162, 1, 162, 3, 162, 1858, 8, 162, 1, 163, 1, 163, 3, 163, 1862,
		8, 163, 1, 164, 1, 164, 1, 164, 1, 165, 1, 165, 1, 165, 1, 165, 3, 165,
		1871, 8, 165, 1, 166, 1, 166, 1, 166, 1, 166, 1, 166, 1, 166, 1, 167, 1,
		167, 1, 167, 5, 167, 1882, 8, 167, 10, 167, 12, 167, 1885, 9, 167, 1, 168,
		1, 168, 3, 168, 1889, 8, 168, 1, 169, 1, 169, 1, 169, 1, 169, 1, 169, 3,
		169, 1896, 8, 169, 1, 169, 1, 169, 3, 169, 1900, 8, 169, 1, 169, 3, 169,
		1903, 8, 169, 1, 169, 3, 169, 1906, 8, 169, 1, 169, 3, 169, 1909, 8, 169,
		1, 169, 1, 169, 3, 169, 1913, 8, 169, 1, 170, 1, 170, 1, 170, 3, 170, 1918,
		8, 170, 1, 170, 1, 170, 1, 171, 1, 171, 1, 171, 3, 171, 1925, 8, 171, 1,
		171, 1, 171, 3, 171, 1929, 8, 171, 1, 171, 1, 171, 3, 171, 1933, 8, 171,
		1, 172, 1, 172, 1, 173, 1, 173, 3, 173, 1939, 8, 173, 1, 173, 1, 173, 1,
		173, 3, 173, 1944, 8, 173, 5, 173, 1946, 8, 173, 10, 173, 12, 173, 1949,
		9, 173, 1, 174, 1, 174, 1, 174, 3, 174, 1954, 8, 174, 1, 175, 1, 175, 1,
		175, 1, 175, 3, 175, 1960, 8, 175, 1, 175, 3, 175, 1963, 8, 175, 1, 176,
		3, 176, 1966, 8, 176, 1, 176, 1, 176, 1, 176, 1, 177, 1, 177, 1, 177, 1,
		177, 1, 177, 1, 178, 1, 178, 1, 178, 1, 178, 1, 179, 1, 179, 3, 179, 1982,
		8, 179, 1, 179, 1, 179, 1, 179, 1, 180, 4, 180, 1988, 8, 180, 11, 180,
		12, 180, 1989, 1, 181, 1, 181, 1, 181, 1, 181, 1, 181, 1, 181, 1, 182,
		3, 182, 1999, 8, 182, 1, 182, 1, 182, 1, 182, 3, 182, 2004, 8, 182, 1,
		182, 3, 182, 2007, 8, 182, 1, 183, 1, 183, 3, 183, 2011, 8, 183, 1, 184,
		1, 184, 3, 184, 2015, 8, 184, 1, 185, 1, 185, 1, 185, 3, 185, 2020, 8,
		185, 1, 185, 1, 185, 1, 186, 1, 186, 3, 186, 2026, 8, 186, 1, 186, 1, 186,
		1, 186, 3, 186, 2031, 8, 186, 5, 186, 2033, 8, 186, 10, 186, 12, 186, 2036,
		9, 186, 1, 187, 1, 187, 1, 187, 1, 187, 1, 187, 1, 187, 3, 187, 2044, 8,
		187, 1, 188, 1, 188, 1, 188, 3, 188, 2049, 8, 188, 1, 188, 1, 188, 1, 188,
		3, 188, 2054, 8, 188, 1, 188, 1, 188, 1, 188, 1, 188, 1, 188, 1, 188, 1,
		188, 1, 188, 1, 188, 1, 188, 1, 188, 1, 188, 1, 188, 1, 188, 1, 188, 1,
		188, 1, 188, 1, 188, 1, 188, 1, 188, 1, 188, 1, 188, 1, 188, 1, 188, 1,
		188, 1, 188, 1, 188, 1, 188, 1, 188, 1, 188, 1, 188, 1, 188, 1, 188, 1,
		188, 1, 188, 1, 188, 1, 188, 1, 188, 1, 188, 1, 188, 1, 188, 3, 188, 2097,
		8, 188, 1, 189, 1, 189, 1, 189, 1, 1045, 6, 10, 30, 50, 230, 252, 256,
		190, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34,
		36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70,
		72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104,
		106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134,
		136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164,
		166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194,
		196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224,
		226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254,
		256, 258, 260, 262, 264, 266, 268, 270, 272, 274, 276, 278, 280, 282, 284,
		286, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 308, 310, 312, 314,
		316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342, 344,
		346, 348, 350, 352, 354, 356, 358, 360, 362, 364, 366, 368, 370, 372, 374,
		376, 378, 0, 23, 2, 0, 97, 97, 101, 101, 4, 0, 24, 24, 31, 31, 58, 58,
		65, 65, 2, 0, 124, 124, 129, 129, 1, 0, 120, 121, 2, 0, 91, 93, 97, 100,
		2, 0, 123, 123, 130, 130, 1, 0, 93, 95, 1, 0, 91, 92, 2, 0, 102, 103, 116,
		117, 1, 0, 114, 115, 2, 0, 101, 101, 104, 113, 5, 0, 36, 36, 47, 47, 57,
		57, 63, 63, 70, 70, 3, 0, 34, 34, 44, 44, 80, 80, 2, 0, 46, 46, 60, 60,
		2, 0, 61, 61, 78, 78, 2, 0, 21, 21, 66, 66, 1, 0, 85, 90, 2, 0, 97, 97,
		118, 118, 2, 0, 22, 22, 82, 82, 1, 0, 27, 28, 2, 0, 38, 38, 53, 53, 1,
		0, 54, 56, 1, 0, 1, 7, 2334, 0, 381, 1, 0, 0, 0, 2, 397, 1, 0, 0, 0, 4,
		401, 1, 0, 0, 0, 6, 413, 1, 0, 0, 0, 8, 415, 1, 0, 0, 0, 10, 421, 1, 0,
		0, 0, 12, 443, 1, 0, 0, 0, 14, 449, 1, 0, 0, 0, 16, 461, 1, 0, 0, 0, 18,
		463, 1, 0, 0, 0, 20, 465, 1, 0, 0, 0, 22, 478, 1, 0, 0, 0, 24, 485, 1,
		0, 0, 0, 26, 488, 1, 0, 0, 0, 28, 493, 1, 0, 0, 0, 30, 540, 1, 0, 0, 0,
		32, 572, 1, 0, 0, 0, 34, 574, 1, 0, 0, 0, 36, 595, 1, 0, 0, 0, 38, 624,
		1, 0, 0, 0, 40, 626, 1, 0, 0, 0, 42, 629, 1, 0, 0, 0, 44, 645, 1, 0, 0,
		0, 46, 649, 1, 0, 0, 0, 48, 658, 1, 0, 0, 0, 50, 660, 1, 0, 0, 0, 52, 685,
		1, 0, 0, 0, 54, 688, 1, 0, 0, 0, 56, 697, 1, 0, 0, 0, 58, 708, 1, 0, 0,
		0, 60, 710, 1, 0, 0, 0, 62, 718, 1, 0, 0, 0, 64, 726, 1, 0, 0, 0, 66, 734,
		1, 0, 0, 0, 68, 747, 1, 0, 0, 0, 70, 749, 1, 0, 0, 0, 72, 757, 1, 0, 0,
		0, 74, 765, 1, 0, 0, 0, 76, 773, 1, 0, 0, 0, 78, 781, 1, 0, 0, 0, 80, 789,
		1, 0, 0, 0, 82, 797, 1, 0, 0, 0, 84, 805, 1, 0, 0, 0, 86, 819, 1, 0, 0,
		0, 88, 821, 1, 0, 0, 0, 90, 823, 1, 0, 0, 0, 92, 831, 1, 0, 0, 0, 94, 846,
		1, 0, 0, 0, 96, 849, 1, 0, 0, 0, 98, 861, 1, 0, 0, 0, 100, 865, 1, 0, 0,
		0, 102, 872, 1, 0, 0, 0, 104, 891, 1, 0, 0, 0, 106, 904, 1, 0, 0, 0, 108,
		939, 1, 0, 0, 0, 110, 943, 1, 0, 0, 0, 112, 946, 1, 0, 0, 0, 114, 953,
		1, 0, 0, 0, 116, 964, 1, 0, 0, 0, 118, 968, 1, 0, 0, 0, 120, 971, 1, 0,
		0, 0, 122, 984, 1, 0, 0, 0, 124, 994, 1, 0, 0, 0, 126, 996, 1, 0, 0, 0,
		128, 1019, 1, 0, 0, 0, 130, 1021, 1, 0, 0, 0, 132, 1029, 1, 0, 0, 0, 134,
		1031, 1, 0, 0, 0, 136, 1040, 1, 0, 0, 0, 138, 1043, 1, 0, 0, 0, 140, 1050,
		1, 0, 0, 0, 142, 1052, 1, 0, 0, 0, 144, 1054, 1, 0, 0, 0, 146, 1059, 1,
		0, 0, 0, 148, 1065, 1, 0, 0, 0, 150, 1068, 1, 0, 0, 0, 152, 1076, 1, 0,
		0, 0, 154, 1083, 1, 0, 0, 0, 156, 1085, 1, 0, 0, 0, 158, 1139, 1, 0, 0,
		0, 160, 1145, 1, 0, 0, 0, 162, 1147, 1, 0, 0, 0, 164, 1177, 1, 0, 0, 0,
		166, 1179, 1, 0, 0, 0, 168, 1181, 1, 0, 0, 0, 170, 1191, 1, 0, 0, 0, 172,
		1204, 1, 0, 0, 0, 174, 1214, 1, 0, 0, 0, 176, 1218, 1, 0, 0, 0, 178, 1221,
		1, 0, 0, 0, 180, 1229, 1, 0, 0, 0, 182, 1234, 1, 0, 0, 0, 184, 1238, 1,
		0, 0, 0, 186, 1240, 1, 0, 0, 0, 188, 1243, 1, 0, 0, 0, 190, 1256, 1, 0,
		0, 0, 192, 1258, 1, 0, 0, 0, 194, 1265, 1, 0, 0, 0, 196, 1269, 1, 0, 0,
		0, 198, 1281, 1, 0, 0, 0, 200, 1291, 1, 0, 0, 0, 202, 1297, 1, 0, 0, 0,
		204, 1308, 1, 0, 0, 0, 206, 1320, 1, 0, 0, 0, 208, 1322, 1, 0, 0, 0, 210,
		1333, 1, 0, 0, 0, 212, 1347, 1, 0, 0, 0, 214, 1353, 1, 0, 0, 0, 216, 1355,
		1, 0, 0, 0, 218, 1362, 1, 0, 0, 0, 220, 1383, 1, 0, 0, 0, 222, 1385, 1,
		0, 0, 0, 224, 1393, 1, 0, 0, 0, 226, 1402, 1, 0, 0, 0, 228, 1410, 1, 0,
		0, 0, 230, 1424, 1, 0, 0, 0, 232, 1443, 1, 0, 0, 0, 234, 1460, 1, 0, 0,
		0, 236, 1479, 1, 0, 0, 0, 238, 1482, 1, 0, 0, 0, 240, 1486, 1, 0, 0, 0,
		242, 1488, 1, 0, 0, 0, 244, 1491, 1, 0, 0, 0, 246, 1495, 1, 0, 0, 0, 248,
		1507, 1, 0, 0, 0, 250, 1518, 1, 0, 0, 0, 252, 1534, 1, 0, 0, 0, 254, 1557,
		1, 0, 0, 0, 256, 1562, 1, 0, 0, 0, 258, 1582, 1, 0, 0, 0, 260, 1589, 1,
		0, 0, 0, 262, 1598, 1, 0, 0, 0, 264, 1612, 1, 0, 0, 0, 266, 1631, 1, 0,
		0, 0, 268, 1638, 1, 0, 0, 0, 270, 1643, 1, 0, 0, 0, 272, 1647, 1, 0, 0,
		0, 274, 1649, 1, 0, 0, 0, 276, 1663, 1, 0, 0, 0, 278, 1674, 1, 0, 0, 0,
		280, 1676, 1, 0, 0, 0, 282, 1706, 1, 0, 0, 0, 284, 1709, 1, 0, 0, 0, 286,
		1713, 1, 0, 0, 0, 288, 1715, 1, 0, 0, 0, 290, 1721, 1, 0, 0, 0, 292, 1741,
		1, 0, 0, 0, 294, 1743, 1, 0, 0, 0, 296, 1768, 1, 0, 0, 0, 298, 1771, 1,
		0, 0, 0, 300, 1775, 1, 0, 0, 0, 302, 1777, 1, 0, 0, 0, 304, 1780, 1, 0,
		0, 0, 306, 1795, 1, 0, 0, 0, 308, 1816, 1, 0, 0, 0, 310, 1818, 1, 0, 0,
		0, 312, 1820, 1, 0, 0, 0, 314, 1822, 1, 0, 0, 0, 316, 1825, 1, 0, 0, 0,
		318, 1829, 1, 0, 0, 0, 320, 1833, 1, 0, 0, 0, 322, 1836, 1, 0, 0, 0, 324,
		1850, 1, 0, 0, 0, 326, 1861, 1, 0, 0, 0, 328, 1863, 1, 0, 0, 0, 330, 1866,
		1, 0, 0, 0, 332, 1872, 1, 0, 0, 0, 334, 1878, 1, 0, 0, 0, 336, 1888, 1,
		0, 0, 0, 338, 1899, 1, 0, 0, 0, 340, 1914, 1, 0, 0, 0, 342, 1932, 1, 0,
		0, 0, 344, 1934, 1, 0, 0, 0, 346, 1936, 1, 0, 0, 0, 348, 1953, 1, 0, 0,
		0, 350, 1955, 1, 0, 0, 0, 352, 1965, 1, 0, 0, 0, 354, 1970, 1, 0, 0, 0,
		356, 1975, 1, 0, 0, 0, 358, 1979, 1, 0, 0, 0, 360, 1987, 1, 0, 0, 0, 362,
		1991, 1, 0, 0, 0, 364, 2006, 1, 0, 0, 0, 366, 2008, 1, 0, 0, 0, 368, 2014,
		1, 0, 0, 0, 370, 2016, 1, 0, 0, 0, 372, 2023, 1, 0, 0, 0, 374, 2043, 1,
		0, 0, 0, 376, 2096, 1, 0, 0, 0, 378, 2098, 1, 0, 0, 0, 380, 382, 3, 120,
		60, 0, 381, 380, 1, 0, 0, 0, 381, 382, 1, 0, 0, 0, 382, 383, 1, 0, 0, 0,
		383, 384, 5, 0, 0, 1, 384, 1, 1, 0, 0, 0, 385, 387, 3, 378, 189, 0, 386,
		385, 1, 0, 0, 0, 387, 388, 1, 0, 0, 0, 388, 386, 1, 0, 0, 0, 388, 389,
		1, 0, 0, 0, 389, 398, 1, 0, 0, 0, 390, 398, 5, 69, 0, 0, 391, 392, 5, 85,
		0, 0, 392, 393, 3, 90, 45, 0, 393, 394, 5, 86, 0, 0, 394, 398, 1, 0, 0,
		0, 395, 398, 3, 4, 2, 0, 396, 398, 3, 12, 6, 0, 397, 386, 1, 0, 0, 0, 397,
		390, 1, 0, 0, 0, 397, 391, 1, 0, 0, 0, 397, 395, 1, 0, 0, 0, 397, 396,
		1, 0, 0, 0, 398, 3, 1, 0, 0, 0, 399, 402, 3, 6, 3, 0, 400, 402, 3, 8, 4,
		0, 401, 399, 1, 0, 0, 0, 401, 400, 1, 0, 0, 0, 402, 5, 1, 0, 0, 0, 403,
		414, 5, 132, 0, 0, 404, 414, 3, 328, 164, 0, 405, 414, 3, 314, 157, 0,
		406, 414, 3, 330, 165, 0, 407, 410, 5, 99, 0, 0, 408, 411, 3, 278, 139,
		0, 409, 411, 3, 162, 81, 0, 410, 408, 1, 0, 0, 0, 410, 409, 1, 0, 0, 0,
		411, 414, 1, 0, 0, 0, 412, 414, 3, 342, 171, 0, 413, 403, 1, 0, 0, 0, 413,
		404, 1, 0, 0, 0, 413, 405, 1, 0, 0, 0, 413, 406, 1, 0, 0, 0, 413, 407,
		1, 0, 0, 0, 413, 412, 1, 0, 0, 0, 414, 7, 1, 0, 0, 0, 415, 417, 3, 10,
		5, 0, 416, 418, 5, 68, 0, 0, 417, 416, 1, 0, 0, 0, 417, 418, 1, 0, 0, 0,
		418, 419, 1, 0, 0, 0, 419, 420, 3, 6, 3, 0, 420, 9, 1, 0, 0, 0, 421, 425,
		6, 5, -1, 0, 422, 426, 3, 160, 80, 0, 423, 426, 3, 184, 92, 0, 424, 426,
		3, 162, 81, 0, 425, 422, 1, 0, 0, 0, 425, 423, 1, 0, 0, 0, 425, 424, 1,
		0, 0, 0, 425, 426, 1, 0, 0, 0, 426, 427, 1, 0, 0, 0, 427, 428, 5, 127,
		0, 0, 428, 440, 1, 0, 0, 0, 429, 435, 10, 1, 0, 0, 430, 436, 5, 132, 0,
		0, 431, 433, 5, 68, 0, 0, 432, 431, 1, 0, 0, 0, 432, 433, 1, 0, 0, 0, 433,
		434, 1, 0, 0, 0, 434, 436, 3, 340, 170, 0, 435, 430, 1, 0, 0, 0, 435, 432,
		1, 0, 0, 0, 436, 437, 1, 0, 0, 0, 437, 439, 5, 127, 0, 0, 438, 429, 1,
		0, 0, 0, 439, 442, 1, 0, 0, 0, 440, 438, 1, 0, 0, 0, 440, 441, 1, 0, 0,
		0, 441, 11, 1, 0, 0, 0, 442, 440, 1, 0, 0, 0, 443, 445, 3, 14, 7, 0, 444,
		446, 3, 28, 14, 0, 445, 444, 1, 0, 0, 0, 445, 446, 1, 0, 0, 0, 446, 447,
		1, 0, 0, 0, 447, 448, 3, 100, 50, 0, 448, 13, 1, 0, 0, 0, 449, 451, 5,
		87, 0, 0, 450, 452, 3, 16, 8, 0, 451, 450, 1, 0, 0, 0, 451, 452, 1, 0,
		0, 0, 452, 453, 1, 0, 0, 0, 453, 454, 5, 88, 0, 0, 454, 15, 1, 0, 0, 0,
		455, 462, 3, 20, 10, 0, 456, 459, 3, 18, 9, 0, 457, 458, 5, 122, 0, 0,
		458, 460, 3, 20, 10, 0, 459, 457, 1, 0, 0, 0, 459, 460, 1, 0, 0, 0, 460,
		462, 1, 0, 0, 0, 461, 455, 1, 0, 0, 0, 461, 456, 1, 0, 0, 0, 462, 17, 1,
		0, 0, 0, 463, 464, 7, 0, 0, 0, 464, 19, 1, 0, 0, 0, 465, 470, 3, 22, 11,
		0, 466, 467, 5, 122, 0, 0, 467, 469, 3, 22, 11, 0, 468, 466, 1, 0, 0, 0,
		469, 472, 1, 0, 0, 0, 470, 468, 1, 0, 0, 0, 470, 471, 1, 0, 0, 0, 471,
		474, 1, 0, 0, 0, 472, 470, 1, 0, 0, 0, 473, 475, 5, 131, 0, 0, 474, 473,
		1, 0, 0, 0, 474, 475, 1, 0, 0, 0, 475, 21, 1, 0, 0, 0, 476, 479, 3, 24,
		12, 0, 477, 479, 3, 26, 13, 0, 478, 476, 1, 0, 0, 0, 478, 477, 1, 0, 0,
		0, 479, 23, 1, 0, 0, 0, 480, 482, 5, 97, 0, 0, 481, 480, 1, 0, 0, 0, 481,
		482, 1, 0, 0, 0, 482, 483, 1, 0, 0, 0, 483, 486, 5, 132, 0, 0, 484, 486,
		5, 69, 0, 0, 485, 481, 1, 0, 0, 0, 485, 484, 1, 0, 0, 0, 486, 25, 1, 0,
		0, 0, 487, 489, 5, 97, 0, 0, 488, 487, 1, 0, 0, 0, 488, 489, 1, 0, 0, 0,
		489, 490, 1, 0, 0, 0, 490, 491, 5, 132, 0, 0, 491, 492, 3, 268, 134, 0,
		492, 27, 1, 0, 0, 0, 493, 495, 5, 85, 0, 0, 494, 496, 3, 258, 129, 0, 495,
		494, 1, 0, 0, 0, 495, 496, 1, 0, 0, 0, 496, 497, 1, 0, 0, 0, 497, 499,
		5, 86, 0, 0, 498, 500, 5, 47, 0, 0, 499, 498, 1, 0, 0, 0, 499, 500, 1,
		0, 0, 0, 500, 502, 1, 0, 0, 0, 501, 503, 3, 368, 184, 0, 502, 501, 1, 0,
		0, 0, 502, 503, 1, 0, 0, 0, 503, 505, 1, 0, 0, 0, 504, 506, 3, 204, 102,
		0, 505, 504, 1, 0, 0, 0, 505, 506, 1, 0, 0, 0, 506, 508, 1, 0, 0, 0, 507,
		509, 3, 234, 117, 0, 508, 507, 1, 0, 0, 0, 508, 509, 1, 0, 0, 0, 509, 29,
		1, 0, 0, 0, 510, 511, 6, 15, -1, 0, 511, 541, 3, 2, 1, 0, 512, 515, 3,
		158, 79, 0, 513, 515, 3, 350, 175, 0, 514, 512, 1, 0, 0, 0, 514, 513, 1,
		0, 0, 0, 515, 522, 1, 0, 0, 0, 516, 518, 5, 85, 0, 0, 517, 519, 3, 34,
		17, 0, 518, 517, 1, 0, 0, 0, 518, 519, 1, 0, 0, 0, 519, 520, 1, 0, 0, 0,
		520, 523, 5, 86, 0, 0, 521, 523, 3, 276, 138, 0, 522, 516, 1, 0, 0, 0,
		522, 521, 1, 0, 0, 0, 523, 541, 1, 0, 0, 0, 524, 525, 7, 1, 0, 0, 525,
		526, 5, 102, 0, 0, 526, 527, 3, 246, 123, 0, 527, 528, 5, 103, 0, 0, 528,
		529, 5, 85, 0, 0, 529, 530, 3, 90, 45, 0, 530, 531, 5, 86, 0, 0, 531, 541,
		1, 0, 0, 0, 532, 533, 3, 32, 16, 0, 533, 536, 5, 85, 0, 0, 534, 537, 3,
		90, 45, 0, 535, 537, 3, 246, 123, 0, 536, 534, 1, 0, 0, 0, 536, 535, 1,
		0, 0, 0, 537, 538, 1, 0, 0, 0, 538, 539, 5, 86, 0, 0, 539, 541, 1, 0, 0,
		0, 540, 510, 1, 0, 0, 0, 540, 514, 1, 0, 0, 0, 540, 524, 1, 0, 0, 0, 540,
		532, 1, 0, 0, 0, 541, 569, 1, 0, 0, 0, 542, 543, 10, 7, 0, 0, 543, 546,
		5, 87, 0, 0, 544, 547, 3, 90, 45, 0, 545, 547, 3, 276, 138, 0, 546, 544,
		1, 0, 0, 0, 546, 545, 1, 0, 0, 0, 547, 548, 1, 0, 0, 0, 548, 549, 5, 88,
		0, 0, 549, 568, 1, 0, 0, 0, 550, 551, 10, 6, 0, 0, 551, 553, 5, 85, 0,
		0, 552, 554, 3, 34, 17, 0, 553, 552, 1, 0, 0, 0, 553, 554, 1, 0, 0, 0,
		554, 555, 1, 0, 0, 0, 555, 568, 5, 86, 0, 0, 556, 557, 10, 4, 0, 0, 557,
		563, 7, 2, 0, 0, 558, 560, 5, 68, 0, 0, 559, 558, 1, 0, 0, 0, 559, 560,
		1, 0, 0, 0, 560, 561, 1, 0, 0, 0, 561, 564, 3, 4, 2, 0, 562, 564, 3, 36,
		18, 0, 563, 559, 1, 0, 0, 0, 563, 562, 1, 0, 0, 0, 564, 568, 1, 0, 0, 0,
		565, 566, 10, 3, 0, 0, 566, 568, 7, 3, 0, 0, 567, 542, 1, 0, 0, 0, 567,
		550, 1, 0, 0, 0, 567, 556, 1, 0, 0, 0, 567, 565, 1, 0, 0, 0, 568, 571,
		1, 0, 0, 0, 569, 567, 1, 0, 0, 0, 569, 570, 1, 0, 0, 0, 570, 31, 1, 0,
		0, 0, 571, 569, 1, 0, 0, 0, 572, 573, 5, 75, 0, 0, 573, 33, 1, 0, 0, 0,
		574, 575, 3, 274, 137, 0, 575, 35, 1, 0, 0, 0, 576, 578, 3, 10, 5, 0, 577,
		576, 1, 0, 0, 0, 577, 578, 1, 0, 0, 0, 578, 582, 1, 0, 0, 0, 579, 580,
		3, 160, 80, 0, 580, 581, 5, 127, 0, 0, 581, 583, 1, 0, 0, 0, 582, 579,
		1, 0, 0, 0, 582, 583, 1, 0, 0, 0, 583, 584, 1, 0, 0, 0, 584, 585, 5, 99,
		0, 0, 585, 596, 3, 160, 80, 0, 586, 587, 3, 10, 5, 0, 587, 588, 5, 68,
		0, 0, 588, 589, 3, 340, 170, 0, 589, 590, 5, 127, 0, 0, 590, 591, 5, 99,
		0, 0, 591, 592, 3, 160, 80, 0, 592, 596, 1, 0, 0, 0, 593, 594, 5, 99, 0,
		0, 594, 596, 3, 162, 81, 0, 595, 577, 1, 0, 0, 0, 595, 586, 1, 0, 0, 0,
		595, 593, 1, 0, 0, 0, 596, 37, 1, 0, 0, 0, 597, 625, 3, 30, 15, 0, 598,
		603, 5, 120, 0, 0, 599, 603, 5, 121, 0, 0, 600, 603, 3, 40, 20, 0, 601,
		603, 5, 62, 0, 0, 602, 598, 1, 0, 0, 0, 602, 599, 1, 0, 0, 0, 602, 600,
		1, 0, 0, 0, 602, 601, 1, 0, 0, 0, 603, 604, 1, 0, 0, 0, 604, 625, 3, 38,
		19, 0, 605, 614, 5, 62, 0, 0, 606, 607, 5, 85, 0, 0, 607, 608, 3, 246,
		123, 0, 608, 609, 5, 86, 0, 0, 609, 615, 1, 0, 0, 0, 610, 611, 5, 131,
		0, 0, 611, 612, 5, 85, 0, 0, 612, 613, 5, 132, 0, 0, 613, 615, 5, 86, 0,
		0, 614, 606, 1, 0, 0, 0, 614, 610, 1, 0, 0, 0, 615, 625, 1, 0, 0, 0, 616,
		617, 5, 11, 0, 0, 617, 618, 5, 85, 0, 0, 618, 619, 3, 246, 123, 0, 619,
		620, 5, 86, 0, 0, 620, 625, 1, 0, 0, 0, 621, 625, 3, 56, 28, 0, 622, 625,
		3, 42, 21, 0, 623, 625, 3, 54, 27, 0, 624, 597, 1, 0, 0, 0, 624, 602, 1,
		0, 0, 0, 624, 605, 1, 0, 0, 0, 624, 616, 1, 0, 0, 0, 624, 621, 1, 0, 0,
		0, 624, 622, 1, 0, 0, 0, 624, 623, 1, 0, 0, 0, 625, 39, 1, 0, 0, 0, 626,
		627, 7, 4, 0, 0, 627, 41, 1, 0, 0, 0, 628, 630, 5, 127, 0, 0, 629, 628,
		1, 0, 0, 0, 629, 630, 1, 0, 0, 0, 630, 631, 1, 0, 0, 0, 631, 633, 5, 49,
		0, 0, 632, 634, 3, 44, 22, 0, 633, 632, 1, 0, 0, 0, 633, 634, 1, 0, 0,
		0, 634, 640, 1, 0, 0, 0, 635, 641, 3, 46, 23, 0, 636, 637, 5, 85, 0, 0,
		637, 638, 3, 246, 123, 0, 638, 639, 5, 86, 0, 0, 639, 641, 1, 0, 0, 0,
		640, 635, 1, 0, 0, 0, 640, 636, 1, 0, 0, 0, 641, 643, 1, 0, 0, 0, 642,
		644, 3, 52, 26, 0, 643, 642, 1, 0, 0, 0, 643, 644, 1, 0, 0, 0, 644, 43,
		1, 0, 0, 0, 645, 646, 5, 85, 0, 0, 646, 647, 3, 34, 17, 0, 647, 648, 5,
		86, 0, 0, 648, 45, 1, 0, 0, 0, 649, 651, 3, 150, 75, 0, 650, 652, 3, 48,
		24, 0, 651, 650, 1, 0, 0, 0, 651, 652, 1, 0, 0, 0, 652, 47, 1, 0, 0, 0,
		653, 655, 3, 236, 118, 0, 654, 656, 3, 48, 24, 0, 655, 654, 1, 0, 0, 0,
		655, 656, 1, 0, 0, 0, 656, 659, 1, 0, 0, 0, 657, 659, 3, 50, 25, 0, 658,
		653, 1, 0, 0, 0, 658, 657, 1, 0, 0, 0, 659, 49, 1, 0, 0, 0, 660, 661, 6,
		25, -1, 0, 661, 662, 5, 87, 0, 0, 662, 663, 3, 90, 45, 0, 663, 665, 5,
		88, 0, 0, 664, 666, 3, 204, 102, 0, 665, 664, 1, 0, 0, 0, 665, 666, 1,
		0, 0, 0, 666, 676, 1, 0, 0, 0, 667, 668, 10, 1, 0, 0, 668, 669, 5, 87,
		0, 0, 669, 670, 3, 92, 46, 0, 670, 672, 5, 88, 0, 0, 671, 673, 3, 204,
		102, 0, 672, 671, 1, 0, 0, 0, 672, 673, 1, 0, 0, 0, 673, 675, 1, 0, 0,
		0, 674, 667, 1, 0, 0, 0, 675, 678, 1, 0, 0, 0, 676, 674, 1, 0, 0, 0, 676,
		677, 1, 0, 0, 0, 677, 51, 1, 0, 0, 0, 678, 676, 1, 0, 0, 0, 679, 681, 5,
		85, 0, 0, 680, 682, 3, 34, 17, 0, 681, 680, 1, 0, 0, 0, 681, 682, 1, 0,
		0, 0, 682, 683, 1, 0, 0, 0, 683, 686, 5, 86, 0, 0, 684, 686, 3, 276, 138,
		0, 685, 679, 1, 0, 0, 0, 685, 684, 1, 0, 0, 0, 686, 53, 1, 0, 0, 0, 687,
		689, 5, 127, 0, 0, 688, 687, 1, 0, 0, 0, 688, 689, 1, 0, 0, 0, 689, 690,
		1, 0, 0, 0, 690, 693, 5, 28, 0, 0, 691, 692, 5, 87, 0, 0, 692, 694, 5,
		88, 0, 0, 693, 691, 1, 0, 0, 0, 693, 694, 1, 0, 0, 0, 694, 695, 1, 0, 0,
		0, 695, 696, 3, 58, 29, 0, 696, 55, 1, 0, 0, 0, 697, 698, 5, 50, 0, 0,
		698, 699, 5, 85, 0, 0, 699, 700, 3, 90, 45, 0, 700, 701, 5, 86, 0, 0, 701,
		57, 1, 0, 0, 0, 702, 709, 3, 38, 19, 0, 703, 704, 5, 85, 0, 0, 704, 705,
		3, 246, 123, 0, 705, 706, 5, 86, 0, 0, 706, 707, 3, 58, 29, 0, 707, 709,
		1, 0, 0, 0, 708, 702, 1, 0, 0, 0, 708, 703, 1, 0, 0, 0, 709, 59, 1, 0,
		0, 0, 710, 715, 3, 58, 29, 0, 711, 712, 7, 5, 0, 0, 712, 714, 3, 58, 29,
		0, 713, 711, 1, 0, 0, 0, 714, 717, 1, 0, 0, 0, 715, 713, 1, 0, 0, 0, 715,
		716, 1, 0, 0, 0, 716, 61, 1, 0, 0, 0, 717, 715, 1, 0, 0, 0, 718, 723, 3,
		60, 30, 0, 719, 720, 7, 6, 0, 0, 720, 722, 3, 60, 30, 0, 721, 719, 1, 0,
		0, 0, 722, 725, 1, 0, 0, 0, 723, 721, 1, 0, 0, 0, 723, 724, 1, 0, 0, 0,
		724, 63, 1, 0, 0, 0, 725, 723, 1, 0, 0, 0, 726, 731, 3, 62, 31, 0, 727,
		728, 7, 7, 0, 0, 728, 730, 3, 62, 31, 0, 729, 727, 1, 0, 0, 0, 730, 733,
		1, 0, 0, 0, 731, 729, 1, 0, 0, 0, 731, 732, 1, 0, 0, 0, 732, 65, 1, 0,
		0, 0, 733, 731, 1, 0, 0, 0, 734, 740, 3, 64, 32, 0, 735, 736, 3, 68, 34,
		0, 736, 737, 3, 64, 32, 0, 737, 739, 1, 0, 0, 0, 738, 735, 1, 0, 0, 0,
		739, 742, 1, 0, 0, 0, 740, 738, 1, 0, 0, 0, 740, 741, 1, 0, 0, 0, 741,
		67, 1, 0, 0, 0, 742, 740, 1, 0, 0, 0, 743, 744, 5, 103, 0, 0, 744, 748,
		5, 103, 0, 0, 745, 746, 5, 102, 0, 0, 746, 748, 5, 102, 0, 0, 747, 743,
		1, 0, 0, 0, 747, 745, 1, 0, 0, 0, 748, 69, 1, 0, 0, 0, 749, 754, 3, 66,
		33, 0, 750, 751, 7, 8, 0, 0, 751, 753, 3, 66, 33, 0, 752, 750, 1, 0, 0,
		0, 753, 756, 1, 0, 0, 0, 754, 752, 1, 0, 0, 0, 754, 755, 1, 0, 0, 0, 755,
		71, 1, 0, 0, 0, 756, 754, 1, 0, 0, 0, 757, 762, 3, 70, 35, 0, 758, 759,
		7, 9, 0, 0, 759, 761, 3, 70, 35, 0, 760, 758, 1, 0, 0, 0, 761, 764, 1,
		0, 0, 0, 762, 760, 1, 0, 0, 0, 762, 763, 1, 0, 0, 0, 763, 73, 1, 0, 0,
		0, 764, 762, 1, 0, 0, 0, 765, 770, 3, 72, 36, 0, 766, 767, 5, 97, 0, 0,
		767, 769, 3, 72, 36, 0, 768, 766, 1, 0, 0, 0, 769, 772, 1, 0, 0, 0, 770,
		768, 1, 0, 0, 0, 770, 771, 1, 0, 0, 0, 771, 75, 1, 0, 0, 0, 772, 770, 1,
		0, 0, 0, 773, 778, 3, 74, 37, 0, 774, 775, 5, 96, 0, 0, 775, 777, 3, 74,
		37, 0, 776, 774, 1, 0, 0, 0, 777, 780, 1, 0, 0, 0, 778, 776, 1, 0, 0, 0,
		778, 779, 1, 0, 0, 0, 779, 77, 1, 0, 0, 0, 780, 778, 1, 0, 0, 0, 781, 786,
		3, 76, 38, 0, 782, 783, 5, 98, 0, 0, 783, 785, 3, 76, 38, 0, 784, 782,
		1, 0, 0, 0, 785, 788, 1, 0, 0, 0, 786, 784, 1, 0, 0, 0, 786, 787, 1, 0,
		0, 0, 787, 79, 1, 0, 0, 0, 788, 786, 1, 0, 0, 0, 789, 794, 3, 78, 39, 0,
		790, 791, 5, 118, 0, 0, 791, 793, 3, 78, 39, 0, 792, 790, 1, 0, 0, 0, 793,
		796, 1, 0, 0, 0, 794, 792, 1, 0, 0, 0, 794, 795, 1, 0, 0, 0, 795, 81, 1,
		0, 0, 0, 796, 794, 1, 0, 0, 0, 797, 802, 3, 80, 40, 0, 798, 799, 5, 119,
		0, 0, 799, 801, 3, 80, 40, 0, 800, 798, 1, 0, 0, 0, 801, 804, 1, 0, 0,
		0, 802, 800, 1, 0, 0, 0, 802, 803, 1, 0, 0, 0, 803, 83, 1, 0, 0, 0, 804,
		802, 1, 0, 0, 0, 805, 811, 3, 82, 41, 0, 806, 807, 5, 125, 0, 0, 807, 808,
		3, 90, 45, 0, 808, 809, 5, 126, 0, 0, 809, 810, 3, 86, 43, 0, 810, 812,
		1, 0, 0, 0, 811, 806, 1, 0, 0, 0, 811, 812, 1, 0, 0, 0, 812, 85, 1, 0,
		0, 0, 813, 820, 3, 84, 42, 0, 814, 815, 3, 82, 41, 0, 815, 816, 3, 88,
		44, 0, 816, 817, 3, 272, 136, 0, 817, 820, 1, 0, 0, 0, 818, 820, 3, 366,
		183, 0, 819, 813, 1, 0, 0, 0, 819, 814, 1, 0, 0, 0, 819, 818, 1, 0, 0,
		0, 820, 87, 1, 0, 0, 0, 821, 822, 7, 10, 0, 0, 822, 89, 1, 0, 0, 0, 823,
		828, 3, 86, 43, 0, 824, 825, 5, 122, 0, 0, 825, 827, 3, 86, 43, 0, 826,
		824, 1, 0, 0, 0, 827, 830, 1, 0, 0, 0, 828, 826, 1, 0, 0, 0, 828, 829,
		1, 0, 0, 0, 829, 91, 1, 0, 0, 0, 830, 828, 1, 0, 0, 0, 831, 832, 3, 84,
		42, 0, 832, 93, 1, 0, 0, 0, 833, 847, 3, 96, 48, 0, 834, 847, 3, 118, 59,
		0, 835, 837, 3, 204, 102, 0, 836, 835, 1, 0, 0, 0, 836, 837, 1, 0, 0, 0,
		837, 844, 1, 0, 0, 0, 838, 845, 3, 98, 49, 0, 839, 845, 3, 100, 50, 0,
		840, 845, 3, 104, 52, 0, 841, 845, 3, 108, 54, 0, 842, 845, 3, 116, 58,
		0, 843, 845, 3, 356, 178, 0, 844, 838, 1, 0, 0, 0, 844, 839, 1, 0, 0, 0,
		844, 840, 1, 0, 0, 0, 844, 841, 1, 0, 0, 0, 844, 842, 1, 0, 0, 0, 844,
		843, 1, 0, 0, 0, 845, 847, 1, 0, 0, 0, 846, 833, 1, 0, 0, 0, 846, 834,
		1, 0, 0, 0, 846, 836, 1, 0, 0, 0, 847, 95, 1, 0, 0, 0, 848, 850, 3, 204,
		102, 0, 849, 848, 1, 0, 0, 0, 849, 850, 1, 0, 0, 0, 850, 855, 1, 0, 0,
		0, 851, 856, 5, 132, 0, 0, 852, 853, 5, 16, 0, 0, 853, 856, 3, 92, 46,
		0, 854, 856, 5, 27, 0, 0, 855, 851, 1, 0, 0, 0, 855, 852, 1, 0, 0, 0, 855,
		854, 1, 0, 0, 0, 856, 857, 1, 0, 0, 0, 857, 858, 5, 126, 0, 0, 858, 859,
		3, 94, 47, 0, 859, 97, 1, 0, 0, 0, 860, 862, 3, 90, 45, 0, 861, 860, 1,
		0, 0, 0, 861, 862, 1, 0, 0, 0, 862, 863, 1, 0, 0, 0, 863, 864, 5, 128,
		0, 0, 864, 99, 1, 0, 0, 0, 865, 867, 5, 89, 0, 0, 866, 868, 3, 102, 51,
		0, 867, 866, 1, 0, 0, 0, 867, 868, 1, 0, 0, 0, 868, 869, 1, 0, 0, 0, 869,
		870, 5, 90, 0, 0, 870, 101, 1, 0, 0, 0, 871, 873, 3, 94, 47, 0, 872, 871,
		1, 0, 0, 0, 873, 874, 1, 0, 0, 0, 874, 872, 1, 0, 0, 0, 874, 875, 1, 0,
		0, 0, 875, 103, 1, 0, 0, 0, 876, 877, 5, 43, 0, 0, 877, 878, 5, 85, 0,
		0, 878, 879, 3, 106, 53, 0, 879, 880, 5, 86, 0, 0, 880, 883, 3, 94, 47,
		0, 881, 882, 5, 32, 0, 0, 882, 884, 3, 94, 47, 0, 883, 881, 1, 0, 0, 0,
		883, 884, 1, 0, 0, 0, 884, 892, 1, 0, 0, 0, 885, 886, 5, 67, 0, 0, 886,
		887, 5, 85, 0, 0, 887, 888, 3, 106, 53, 0, 888, 889, 5, 86, 0, 0, 889,
		890, 3, 94, 47, 0, 890, 892, 1, 0, 0, 0, 891, 876, 1, 0, 0, 0, 891, 885,
		1, 0, 0, 0, 892, 105, 1, 0, 0, 0, 893, 905, 3, 90, 45, 0, 894, 896, 3,
		204, 102, 0, 895, 894, 1, 0, 0, 0, 895, 896, 1, 0, 0, 0, 896, 897, 1, 0,
		0, 0, 897, 898, 3, 138, 69, 0, 898, 902, 3, 226, 113, 0, 899, 900, 5, 101,
		0, 0, 900, 903, 3, 272, 136, 0, 901, 903, 3, 276, 138, 0, 902, 899, 1,
		0, 0, 0, 902, 901, 1, 0, 0, 0, 903, 905, 1, 0, 0, 0, 904, 893, 1, 0, 0,
		0, 904, 895, 1, 0, 0, 0, 905, 107, 1, 0, 0, 0, 906, 907, 5, 84, 0, 0, 907,
		908, 5, 85, 0, 0, 908, 909, 3, 106, 53, 0, 909, 910, 5, 86, 0, 0, 910,
		911, 3, 94, 47, 0, 911, 940, 1, 0, 0, 0, 912, 913, 5, 29, 0, 0, 913, 914,
		3, 94, 47, 0, 914, 915, 5, 84, 0, 0, 915, 916, 5, 85, 0, 0, 916, 917, 3,
		90, 45, 0, 917, 918, 5, 86, 0, 0, 918, 919, 5, 128, 0, 0, 919, 940, 1,
		0, 0, 0, 920, 921, 5, 40, 0, 0, 921, 934, 5, 85, 0, 0, 922, 924, 3, 110,
		55, 0, 923, 925, 3, 106, 53, 0, 924, 923, 1, 0, 0, 0, 924, 925, 1, 0, 0,
		0, 925, 926, 1, 0, 0, 0, 926, 928, 5, 128, 0, 0, 927, 929, 3, 90, 45, 0,
		928, 927, 1, 0, 0, 0, 928, 929, 1, 0, 0, 0, 929, 935, 1, 0, 0, 0, 930,
		931, 3, 112, 56, 0, 931, 932, 5, 126, 0, 0, 932, 933, 3, 114, 57, 0, 933,
		935, 1, 0, 0, 0, 934, 922, 1, 0, 0, 0, 934, 930, 1, 0, 0, 0, 935, 936,
		1, 0, 0, 0, 936, 937, 5, 86, 0, 0, 937, 938, 3, 94, 47, 0, 938, 940, 1,
		0, 0, 0, 939, 906, 1, 0, 0, 0, 939, 912, 1, 0, 0, 0, 939, 920, 1, 0, 0,
		0, 940, 109, 1, 0, 0, 0, 941, 944, 3, 98, 49, 0, 942, 944, 3, 128, 64,
		0, 943, 941, 1, 0, 0, 0, 943, 942, 1, 0, 0, 0, 944, 111, 1, 0, 0, 0, 945,
		947, 3, 204, 102, 0, 946, 945, 1, 0, 0, 0, 946, 947, 1, 0, 0, 0, 947, 948,
		1, 0, 0, 0, 948, 949, 3, 138, 69, 0, 949, 950, 3, 226, 113, 0, 950, 113,
		1, 0, 0, 0, 951, 954, 3, 90, 45, 0, 952, 954, 3, 276, 138, 0, 953, 951,
		1, 0, 0, 0, 953, 952, 1, 0, 0, 0, 954, 115, 1, 0, 0, 0, 955, 965, 5, 15,
		0, 0, 956, 965, 5, 25, 0, 0, 957, 960, 5, 59, 0, 0, 958, 961, 3, 90, 45,
		0, 959, 961, 3, 276, 138, 0, 960, 958, 1, 0, 0, 0, 960, 959, 1, 0, 0, 0,
		960, 961, 1, 0, 0, 0, 961, 965, 1, 0, 0, 0, 962, 963, 5, 42, 0, 0, 963,
		965, 5, 132, 0, 0, 964, 955, 1, 0, 0, 0, 964, 956, 1, 0, 0, 0, 964, 957,
		1, 0, 0, 0, 964, 962, 1, 0, 0, 0, 965, 966, 1, 0, 0, 0, 966, 967, 5, 128,
		0, 0, 967, 117, 1, 0, 0, 0, 968, 969, 3, 124, 62, 0, 969, 119, 1, 0, 0,
		0, 970, 972, 3, 122, 61, 0, 971, 970, 1, 0, 0, 0, 972, 973, 1, 0, 0, 0,
		973, 971, 1, 0, 0, 0, 973, 974, 1, 0, 0, 0, 974, 121, 1, 0, 0, 0, 975,
		985, 3, 124, 62, 0, 976, 985, 3, 264, 132, 0, 977, 985, 3, 332, 166, 0,
		978, 985, 3, 352, 176, 0, 979, 985, 3, 354, 177, 0, 980, 985, 3, 202, 101,
		0, 981, 985, 3, 188, 94, 0, 982, 985, 3, 132, 66, 0, 983, 985, 3, 134,
		67, 0, 984, 975, 1, 0, 0, 0, 984, 976, 1, 0, 0, 0, 984, 977, 1, 0, 0, 0,
		984, 978, 1, 0, 0, 0, 984, 979, 1, 0, 0, 0, 984, 980, 1, 0, 0, 0, 984,
		981, 1, 0, 0, 0, 984, 982, 1, 0, 0, 0, 984, 983, 1, 0, 0, 0, 985, 123,
		1, 0, 0, 0, 986, 995, 3, 128, 64, 0, 987, 995, 3, 200, 100, 0, 988, 995,
		3, 192, 96, 0, 989, 995, 3, 196, 98, 0, 990, 995, 3, 198, 99, 0, 991, 995,
		3, 130, 65, 0, 992, 995, 3, 126, 63, 0, 993, 995, 3, 172, 86, 0, 994, 986,
		1, 0, 0, 0, 994, 987, 1, 0, 0, 0, 994, 988, 1, 0, 0, 0, 994, 989, 1, 0,
		0, 0, 994, 990, 1, 0, 0, 0, 994, 991, 1, 0, 0, 0, 994, 992, 1, 0, 0, 0,
		994, 993, 1, 0, 0, 0, 995, 125, 1, 0, 0, 0, 996, 997, 5, 79, 0, 0, 997,
		999, 5, 132, 0, 0, 998, 1000, 3, 204, 102, 0, 999, 998, 1, 0, 0, 0, 999,
		1000, 1, 0, 0, 0, 1000, 1001, 1, 0, 0, 0, 1001, 1002, 5, 101, 0, 0, 1002,
		1003, 3, 246, 123, 0, 1003, 1004, 5, 128, 0, 0, 1004, 127, 1, 0, 0, 0,
		1005, 1007, 3, 138, 69, 0, 1006, 1005, 1, 0, 0, 0, 1006, 1007, 1, 0, 0,
		0, 1007, 1009, 1, 0, 0, 0, 1008, 1010, 3, 222, 111, 0, 1009, 1008, 1, 0,
		0, 0, 1009, 1010, 1, 0, 0, 0, 1010, 1011, 1, 0, 0, 0, 1011, 1020, 5, 128,
		0, 0, 1012, 1014, 3, 204, 102, 0, 1013, 1015, 3, 138, 69, 0, 1014, 1013,
		1, 0, 0, 0, 1014, 1015, 1, 0, 0, 0, 1015, 1016, 1, 0, 0, 0, 1016, 1017,
		3, 222, 111, 0, 1017, 1018, 5, 128, 0, 0, 1018, 1020, 1, 0, 0, 0, 1019,
		1006, 1, 0, 0, 0, 1019, 1012, 1, 0, 0, 0, 1020, 129, 1, 0, 0, 0, 1021,
		1022, 5, 64, 0, 0, 1022, 1023, 5, 85, 0, 0, 1023, 1024, 3, 92, 46, 0, 1024,
		1025, 5, 122, 0, 0, 1025, 1026, 5, 4, 0, 0, 1026, 1027, 5, 86, 0, 0, 1027,
		1028, 5, 128, 0, 0, 1028, 131, 1, 0, 0, 0, 1029, 1030, 5, 128, 0, 0, 1030,
		133, 1, 0, 0, 0, 1031, 1032, 3, 204, 102, 0, 1032, 1033, 5, 128, 0, 0,
		1033, 135, 1, 0, 0, 0, 1034, 1041, 3, 140, 70, 0, 1035, 1041, 3, 146, 73,
		0, 1036, 1041, 3, 142, 71, 0, 1037, 1041, 5, 41, 0, 0, 1038, 1041, 5, 74,
		0, 0, 1039, 1041, 5, 23, 0, 0, 1040, 1034, 1, 0, 0, 0, 1040, 1035, 1, 0,
		0, 0, 1040, 1036, 1, 0, 0, 0, 1040, 1037, 1, 0, 0, 0, 1040, 1038, 1, 0,
		0, 0, 1040, 1039, 1, 0, 0, 0, 1041, 137, 1, 0, 0, 0, 1042, 1044, 3, 136,
		68, 0, 1043, 1042, 1, 0, 0, 0, 1044, 1045, 1, 0, 0, 0, 1045, 1046, 1, 0,
		0, 0, 1045, 1043, 1, 0, 0, 0, 1046, 1048, 1, 0, 0, 0, 1047, 1049, 3, 204,
		102, 0, 1048, 1047, 1, 0, 0, 0, 1048, 1049, 1, 0, 0, 0, 1049, 139, 1, 0,
		0, 0, 1050, 1051, 7, 11, 0, 0, 1051, 141, 1, 0, 0, 0, 1052, 1053, 7, 12,
		0, 0, 1053, 143, 1, 0, 0, 0, 1054, 1055, 5, 132, 0, 0, 1055, 145, 1, 0,
		0, 0, 1056, 1060, 3, 148, 74, 0, 1057, 1060, 3, 280, 140, 0, 1058, 1060,
		3, 168, 84, 0, 1059, 1056, 1, 0, 0, 0, 1059, 1057, 1, 0, 0, 0, 1059, 1058,
		1, 0, 0, 0, 1060, 147, 1, 0, 0, 0, 1061, 1066, 3, 158, 79, 0, 1062, 1066,
		3, 164, 82, 0, 1063, 1066, 3, 350, 175, 0, 1064, 1066, 3, 240, 120, 0,
		1065, 1061, 1, 0, 0, 0, 1065, 1062, 1, 0, 0, 0, 1065, 1063, 1, 0, 0, 0,
		1065, 1064, 1, 0, 0, 0, 1066, 149, 1, 0, 0, 0, 1067, 1069, 3, 146, 73,
		0, 1068, 1067, 1, 0, 0, 0, 1069, 1070, 1, 0, 0, 0, 1070, 1068, 1, 0, 0,
		0, 1070, 1071, 1, 0, 0, 0, 1071, 1073, 1, 0, 0, 0, 1072, 1074, 3, 204,
		102, 0, 1073, 1072, 1, 0, 0, 0, 1073, 1074, 1, 0, 0, 0, 1074, 151, 1, 0,
		0, 0, 1075, 1077, 3, 148, 74, 0, 1076, 1075, 1, 0, 0, 0, 1077, 1078, 1,
		0, 0, 0, 1078, 1076, 1, 0, 0, 0, 1078, 1079, 1, 0, 0, 0, 1079, 1081, 1,
		0, 0, 0, 1080, 1082, 3, 204, 102, 0, 1081, 1080, 1, 0, 0, 0, 1081, 1082,
		1, 0, 0, 0, 1082, 153, 1, 0, 0, 0, 1083, 1084, 7, 13, 0, 0, 1084, 155,
		1, 0, 0, 0, 1085, 1086, 7, 14, 0, 0, 1086, 157, 1, 0, 0, 0, 1087, 1089,
		3, 10, 5, 0, 1088, 1087, 1, 0, 0, 0, 1088, 1089, 1, 0, 0, 0, 1089, 1090,
		1, 0, 0, 0, 1090, 1140, 3, 160, 80, 0, 1091, 1092, 3, 10, 5, 0, 1092, 1093,
		5, 68, 0, 0, 1093, 1094, 3, 340, 170, 0, 1094, 1140, 1, 0, 0, 0, 1095,
		1140, 3, 156, 78, 0, 1096, 1098, 3, 156, 78, 0, 1097, 1096, 1, 0, 0, 0,
		1097, 1098, 1, 0, 0, 0, 1098, 1100, 1, 0, 0, 0, 1099, 1101, 3, 154, 77,
		0, 1100, 1099, 1, 0, 0, 0, 1101, 1102, 1, 0, 0, 0, 1102, 1100, 1, 0, 0,
		0, 1102, 1103, 1, 0, 0, 0, 1103, 1140, 1, 0, 0, 0, 1104, 1106, 3, 156,
		78, 0, 1105, 1104, 1, 0, 0, 0, 1105, 1106, 1, 0, 0, 0, 1106, 1107, 1, 0,
		0, 0, 1107, 1140, 5, 18, 0, 0, 1108, 1110, 3, 156, 78, 0, 1109, 1108, 1,
		0, 0, 0, 1109, 1110, 1, 0, 0, 0, 1110, 1111, 1, 0, 0, 0, 1111, 1140, 5,
		19, 0, 0, 1112, 1114, 3, 156, 78, 0, 1113, 1112, 1, 0, 0, 0, 1113, 1114,
		1, 0, 0, 0, 1114, 1115, 1, 0, 0, 0, 1115, 1140, 5, 20, 0, 0, 1116, 1118,
		3, 156, 78, 0, 1117, 1116, 1, 0, 0, 0, 1117, 1118, 1, 0, 0, 0, 1118, 1119,
		1, 0, 0, 0, 1119, 1140, 5, 83, 0, 0, 1120, 1140, 5, 14, 0, 0, 1121, 1123,
		3, 156, 78, 0, 1122, 1121, 1, 0, 0, 0, 1122, 1123, 1, 0, 0, 0, 1123, 1127,
		1, 0, 0, 0, 1124, 1126, 3, 154, 77, 0, 1125, 1124, 1, 0, 0, 0, 1126, 1129,
		1, 0, 0, 0, 1127, 1125, 1, 0, 0, 0, 1127, 1128, 1, 0, 0, 0, 1128, 1130,
		1, 0, 0, 0, 1129, 1127, 1, 0, 0, 0, 1130, 1140, 5, 45, 0, 0, 1131, 1140,
		5, 39, 0, 0, 1132, 1134, 3, 154, 77, 0, 1133, 1132, 1, 0, 0, 0, 1133, 1134,
		1, 0, 0, 0, 1134, 1135, 1, 0, 0, 0, 1135, 1140, 5, 30, 0, 0, 1136, 1140,
		5, 81, 0, 0, 1137, 1140, 5, 13, 0, 0, 1138, 1140, 3, 162, 81, 0, 1139,
		1088, 1, 0, 0, 0, 1139, 1091, 1, 0, 0, 0, 1139, 1095, 1, 0, 0, 0, 1139,
		1097, 1, 0, 0, 0, 1139, 1105, 1, 0, 0, 0, 1139, 1109, 1, 0, 0, 0, 1139,
		1113, 1, 0, 0, 0, 1139, 1117, 1, 0, 0, 0, 1139, 1120, 1, 0, 0, 0, 1139,
		1122, 1, 0, 0, 0, 1139, 1131, 1, 0, 0, 0, 1139, 1133, 1, 0, 0, 0, 1139,
		1136, 1, 0, 0, 0, 1139, 1137, 1, 0, 0, 0, 1139, 1138, 1, 0, 0, 0, 1140,
		159, 1, 0, 0, 0, 1141, 1146, 3, 278, 139, 0, 1142, 1146, 3, 166, 83, 0,
		1143, 1146, 3, 144, 72, 0, 1144, 1146, 3, 340, 170, 0, 1145, 1141, 1, 0,
		0, 0, 1145, 1142, 1, 0, 0, 0, 1145, 1143, 1, 0, 0, 0, 1145, 1144, 1, 0,
		0, 0, 1146, 161, 1, 0, 0, 0, 1147, 1148, 5, 26, 0, 0, 1148, 1151, 5, 85,
		0, 0, 1149, 1152, 3, 90, 45, 0, 1150, 1152, 5, 13, 0, 0, 1151, 1149, 1,
		0, 0, 0, 1151, 1150, 1, 0, 0, 0, 1152, 1153, 1, 0, 0, 0, 1153, 1154, 5,
		86, 0, 0, 1154, 163, 1, 0, 0, 0, 1155, 1170, 3, 288, 144, 0, 1156, 1158,
		3, 204, 102, 0, 1157, 1156, 1, 0, 0, 0, 1157, 1158, 1, 0, 0, 0, 1158, 1160,
		1, 0, 0, 0, 1159, 1161, 3, 10, 5, 0, 1160, 1159, 1, 0, 0, 0, 1160, 1161,
		1, 0, 0, 0, 1161, 1162, 1, 0, 0, 0, 1162, 1171, 5, 132, 0, 0, 1163, 1171,
		3, 340, 170, 0, 1164, 1166, 3, 10, 5, 0, 1165, 1167, 5, 68, 0, 0, 1166,
		1165, 1, 0, 0, 0, 1166, 1167, 1, 0, 0, 0, 1167, 1168, 1, 0, 0, 0, 1168,
		1169, 3, 340, 170, 0, 1169, 1171, 1, 0, 0, 0, 1170, 1157, 1, 0, 0, 0, 1170,
		1163, 1, 0, 0, 0, 1170, 1164, 1, 0, 0, 0, 1171, 1178, 1, 0, 0, 0, 1172,
		1174, 5, 33, 0, 0, 1173, 1175, 3, 10, 5, 0, 1174, 1173, 1, 0, 0, 0, 1174,
		1175, 1, 0, 0, 0, 1175, 1176, 1, 0, 0, 0, 1176, 1178, 5, 132, 0, 0, 1177,
		1155, 1, 0, 0, 0, 1177, 1172, 1, 0, 0, 0, 1178, 165, 1, 0, 0, 0, 1179,
		1180, 5, 132, 0, 0, 1180, 167, 1, 0, 0, 0, 1181, 1182, 3, 170, 85, 0, 1182,
		1187, 5, 89, 0, 0, 1183, 1185, 3, 178, 89, 0, 1184, 1186, 5, 122, 0, 0,
		1185, 1184, 1, 0, 0, 0, 1185, 1186, 1, 0, 0, 0, 1186, 1188, 1, 0, 0, 0,
		1187, 1183, 1, 0, 0, 0, 1187, 1188, 1, 0, 0, 0, 1188, 1189, 1, 0, 0, 0,
		1189, 1190, 5, 90, 0, 0, 1190, 169, 1, 0, 0, 0, 1191, 1193, 3, 174, 87,
		0, 1192, 1194, 3, 204, 102, 0, 1193, 1192, 1, 0, 0, 0, 1193, 1194, 1, 0,
		0, 0, 1194, 1199, 1, 0, 0, 0, 1195, 1197, 3, 10, 5, 0, 1196, 1195, 1, 0,
		0, 0, 1196, 1197, 1, 0, 0, 0, 1197, 1198, 1, 0, 0, 0, 1198, 1200, 5, 132,
		0, 0, 1199, 1196, 1, 0, 0, 0, 1199, 1200, 1, 0, 0, 0, 1200, 1202, 1, 0,
		0, 0, 1201, 1203, 3, 176, 88, 0, 1202, 1201, 1, 0, 0, 0, 1202, 1203, 1,
		0, 0, 0, 1203, 171, 1, 0, 0, 0, 1204, 1206, 3, 174, 87, 0, 1205, 1207,
		3, 204, 102, 0, 1206, 1205, 1, 0, 0, 0, 1206, 1207, 1, 0, 0, 0, 1207, 1208,
		1, 0, 0, 0, 1208, 1210, 5, 132, 0, 0, 1209, 1211, 3, 176, 88, 0, 1210,
		1209, 1, 0, 0, 0, 1210, 1211, 1, 0, 0, 0, 1211, 1212, 1, 0, 0, 0, 1212,
		1213, 5, 128, 0, 0, 1213, 173, 1, 0, 0, 0, 1214, 1216, 5, 33, 0, 0, 1215,
		1217, 7, 15, 0, 0, 1216, 1215, 1, 0, 0, 0, 1216, 1217, 1, 0, 0, 0, 1217,
		175, 1, 0, 0, 0, 1218, 1219, 5, 126, 0, 0, 1219, 1220, 3, 150, 75, 0, 1220,
		177, 1, 0, 0, 0, 1221, 1226, 3, 180, 90, 0, 1222, 1223, 5, 122, 0, 0, 1223,
		1225, 3, 180, 90, 0, 1224, 1222, 1, 0, 0, 0, 1225, 1228, 1, 0, 0, 0, 1226,
		1224, 1, 0, 0, 0, 1226, 1227, 1, 0, 0, 0, 1227, 179, 1, 0, 0, 0, 1228,
		1226, 1, 0, 0, 0, 1229, 1232, 3, 182, 91, 0, 1230, 1231, 5, 101, 0, 0,
		1231, 1233, 3, 92, 46, 0, 1232, 1230, 1, 0, 0, 0, 1232, 1233, 1, 0, 0,
		0, 1233, 181, 1, 0, 0, 0, 1234, 1235, 5, 132, 0, 0, 1235, 183, 1, 0, 0,
		0, 1236, 1239, 3, 186, 93, 0, 1237, 1239, 3, 190, 95, 0, 1238, 1236, 1,
		0, 0, 0, 1238, 1237, 1, 0, 0, 0, 1239, 185, 1, 0, 0, 0, 1240, 1241, 5,
		132, 0, 0, 1241, 187, 1, 0, 0, 0, 1242, 1244, 5, 44, 0, 0, 1243, 1242,
		1, 0, 0, 0, 1243, 1244, 1, 0, 0, 0, 1244, 1245, 1, 0, 0, 0, 1245, 1248,
		5, 48, 0, 0, 1246, 1249, 5, 132, 0, 0, 1247, 1249, 3, 186, 93, 0, 1248,
		1246, 1, 0, 0, 0, 1248, 1247, 1, 0, 0, 0, 1248, 1249, 1, 0, 0, 0, 1249,
		1250, 1, 0, 0, 0, 1250, 1252, 5, 89, 0, 0, 1251, 1253, 3, 120, 60, 0, 1252,
		1251, 1, 0, 0, 0, 1252, 1253, 1, 0, 0, 0, 1253, 1254, 1, 0, 0, 0, 1254,
		1255, 5, 90, 0, 0, 1255, 189, 1, 0, 0, 0, 1256, 1257, 5, 132, 0, 0, 1257,
		191, 1, 0, 0, 0, 1258, 1259, 5, 48, 0, 0, 1259, 1260, 5, 132, 0, 0, 1260,
		1261, 5, 101, 0, 0, 1261, 1262, 3, 194, 97, 0, 1262, 1263, 5, 128, 0, 0,
		1263, 193, 1, 0, 0, 0, 1264, 1266, 3, 10, 5, 0, 1265, 1264, 1, 0, 0, 0,
		1265, 1266, 1, 0, 0, 0, 1266, 1267, 1, 0, 0, 0, 1267, 1268, 3, 184, 92,
		0, 1268, 195, 1, 0, 0, 0, 1269, 1275, 5, 79, 0, 0, 1270, 1272, 5, 76, 0,
		0, 1271, 1270, 1, 0, 0, 0, 1271, 1272, 1, 0, 0, 0, 1272, 1273, 1, 0, 0,
		0, 1273, 1276, 3, 10, 5, 0, 1274, 1276, 5, 127, 0, 0, 1275, 1271, 1, 0,
		0, 0, 1275, 1274, 1, 0, 0, 0, 1276, 1277, 1, 0, 0, 0, 1277, 1278, 3, 6,
		3, 0, 1278, 1279, 5, 128, 0, 0, 1279, 197, 1, 0, 0, 0, 1280, 1282, 3, 204,
		102, 0, 1281, 1280, 1, 0, 0, 0, 1281, 1282, 1, 0, 0, 0, 1282, 1283, 1,
		0, 0, 0, 1283, 1284, 5, 79, 0, 0, 1284, 1286, 5, 48, 0, 0, 1285, 1287,
		3, 10, 5, 0, 1286, 1285, 1, 0, 0, 0, 1286, 1287, 1, 0, 0, 0, 1287, 1288,
		1, 0, 0, 0, 1288, 1289, 3, 184, 92, 0, 1289, 1290, 5, 128, 0, 0, 1290,
		199, 1, 0, 0, 0, 1291, 1292, 5, 12, 0, 0, 1292, 1293, 5, 85, 0, 0, 1293,
		1294, 5, 4, 0, 0, 1294, 1295, 5, 86, 0, 0, 1295, 1296, 5, 128, 0, 0, 1296,
		201, 1, 0, 0, 0, 1297, 1298, 5, 36, 0, 0, 1298, 1305, 5, 4, 0, 0, 1299,
		1301, 5, 89, 0, 0, 1300, 1302, 3, 120, 60, 0, 1301, 1300, 1, 0, 0, 0, 1301,
		1302, 1, 0, 0, 0, 1302, 1303, 1, 0, 0, 0, 1303, 1306, 5, 90, 0, 0, 1304,
		1306, 3, 122, 61, 0, 1305, 1299, 1, 0, 0, 0, 1305, 1304, 1, 0, 0, 0, 1306,
		203, 1, 0, 0, 0, 1307, 1309, 3, 206, 103, 0, 1308, 1307, 1, 0, 0, 0, 1309,
		1310, 1, 0, 0, 0, 1310, 1308, 1, 0, 0, 0, 1310, 1311, 1, 0, 0, 0, 1311,
		205, 1, 0, 0, 0, 1312, 1313, 5, 87, 0, 0, 1313, 1315, 5, 87, 0, 0, 1314,
		1316, 3, 210, 105, 0, 1315, 1314, 1, 0, 0, 0, 1315, 1316, 1, 0, 0, 0, 1316,
		1317, 1, 0, 0, 0, 1317, 1318, 5, 88, 0, 0, 1318, 1321, 5, 88, 0, 0, 1319,
		1321, 3, 208, 104, 0, 1320, 1312, 1, 0, 0, 0, 1320, 1319, 1, 0, 0, 0, 1321,
		207, 1, 0, 0, 0, 1322, 1323, 5, 10, 0, 0, 1323, 1326, 5, 85, 0, 0, 1324,
		1327, 3, 246, 123, 0, 1325, 1327, 3, 92, 46, 0, 1326, 1324, 1, 0, 0, 0,
		1326, 1325, 1, 0, 0, 0, 1327, 1329, 1, 0, 0, 0, 1328, 1330, 5, 131, 0,
		0, 1329, 1328, 1, 0, 0, 0, 1329, 1330, 1, 0, 0, 0, 1330, 1331, 1, 0, 0,
		0, 1331, 1332, 5, 86, 0, 0, 1332, 209, 1, 0, 0, 0, 1333, 1338, 3, 212,
		106, 0, 1334, 1335, 5, 122, 0, 0, 1335, 1337, 3, 212, 106, 0, 1336, 1334,
		1, 0, 0, 0, 1337, 1340, 1, 0, 0, 0, 1338, 1336, 1, 0, 0, 0, 1338, 1339,
		1, 0, 0, 0, 1339, 1342, 1, 0, 0, 0, 1340, 1338, 1, 0, 0, 0, 1341, 1343,
		5, 131, 0, 0, 1342, 1341, 1, 0, 0, 0, 1342, 1343, 1, 0, 0, 0, 1343, 211,
		1, 0, 0, 0, 1344, 1345, 3, 214, 107, 0, 1345, 1346, 5, 127, 0, 0, 1346,
		1348, 1, 0, 0, 0, 1347, 1344, 1, 0, 0, 0, 1347, 1348, 1, 0, 0, 0, 1348,
		1349, 1, 0, 0, 0, 1349, 1351, 5, 132, 0, 0, 1350, 1352, 3, 216, 108, 0,
		1351, 1350, 1, 0, 0, 0, 1351, 1352, 1, 0, 0, 0, 1352, 213, 1, 0, 0, 0,
		1353, 1354, 5, 132, 0, 0, 1354, 215, 1, 0, 0, 0, 1355, 1357, 5, 85, 0,
		0, 1356, 1358, 3, 218, 109, 0, 1357, 1356, 1, 0, 0, 0, 1357, 1358, 1, 0,
		0, 0, 1358, 1359, 1, 0, 0, 0, 1359, 1360, 5, 86, 0, 0, 1360, 217, 1, 0,
		0, 0, 1361, 1363, 3, 220, 110, 0, 1362, 1361, 1, 0, 0, 0, 1363, 1364, 1,
		0, 0, 0, 1364, 1362, 1, 0, 0, 0, 1364, 1365, 1, 0, 0, 0, 1365, 219, 1,
		0, 0, 0, 1366, 1367, 5, 85, 0, 0, 1367, 1368, 3, 218, 109, 0, 1368, 1369,
		5, 86, 0, 0, 1369, 1384, 1, 0, 0, 0, 1370, 1371, 5, 87, 0, 0, 1371, 1372,
		3, 218, 109, 0, 1372, 1373, 5, 88, 0, 0, 1373, 1384, 1, 0, 0, 0, 1374,
		1375, 5, 89, 0, 0, 1375, 1376, 3, 218, 109, 0, 1376, 1377, 5, 90, 0, 0,
		1377, 1384, 1, 0, 0, 0, 1378, 1380, 8, 16, 0, 0, 1379, 1378, 1, 0, 0, 0,
		1380, 1381, 1, 0, 0, 0, 1381, 1379, 1, 0, 0, 0, 1381, 1382, 1, 0, 0, 0,
		1382, 1384, 1, 0, 0, 0, 1383, 1366, 1, 0, 0, 0, 1383, 1370, 1, 0, 0, 0,
		1383, 1374, 1, 0, 0, 0, 1383, 1379, 1, 0, 0, 0, 1384, 221, 1, 0, 0, 0,
		1385, 1390, 3, 224, 112, 0, 1386, 1387, 5, 122, 0, 0, 1387, 1389, 3, 224,
		112, 0, 1388, 1386, 1, 0, 0, 0, 1389, 1392, 1, 0, 0, 0, 1390, 1388, 1,
		0, 0, 0, 1390, 1391, 1, 0, 0, 0, 1391, 223, 1, 0, 0, 0, 1392, 1390, 1,
		0, 0, 0, 1393, 1395, 3, 226, 113, 0, 1394, 1396, 3, 268, 134, 0, 1395,
		1394, 1, 0, 0, 0, 1395, 1396, 1, 0, 0, 0, 1396, 225, 1, 0, 0, 0, 1397,
		1403, 3, 228, 114, 0, 1398, 1399, 3, 230, 115, 0, 1399, 1400, 3, 232, 116,
		0, 1400, 1401, 3, 234, 117, 0, 1401, 1403, 1, 0, 0, 0, 1402, 1397, 1, 0,
		0, 0, 1402, 1398, 1, 0, 0, 0, 1403, 227, 1, 0, 0, 0, 1404, 1406, 3, 236,
		118, 0, 1405, 1407, 5, 22, 0, 0, 1406, 1405, 1, 0, 0, 0, 1406, 1407, 1,
		0, 0, 0, 1407, 1409, 1, 0, 0, 0, 1408, 1404, 1, 0, 0, 0, 1409, 1412, 1,
		0, 0, 0, 1410, 1408, 1, 0, 0, 0, 1410, 1411, 1, 0, 0, 0, 1411, 1413, 1,
		0, 0, 0, 1412, 1410, 1, 0, 0, 0, 1413, 1414, 3, 230, 115, 0, 1414, 229,
		1, 0, 0, 0, 1415, 1416, 6, 115, -1, 0, 1416, 1418, 3, 244, 122, 0, 1417,
		1419, 3, 204, 102, 0, 1418, 1417, 1, 0, 0, 0, 1418, 1419, 1, 0, 0, 0, 1419,
		1425, 1, 0, 0, 0, 1420, 1421, 5, 85, 0, 0, 1421, 1422, 3, 228, 114, 0,
		1422, 1423, 5, 86, 0, 0, 1423, 1425, 1, 0, 0, 0, 1424, 1415, 1, 0, 0, 0,
		1424, 1420, 1, 0, 0, 0, 1425, 1440, 1, 0, 0, 0, 1426, 1436, 10, 2, 0, 0,
		1427, 1437, 3, 232, 116, 0, 1428, 1430, 5, 87, 0, 0, 1429, 1431, 3, 92,
		46, 0, 1430, 1429, 1, 0, 0, 0, 1430, 1431, 1, 0, 0, 0, 1431, 1432, 1, 0,
		0, 0, 1432, 1434, 5, 88, 0, 0, 1433, 1435, 3, 204, 102, 0, 1434, 1433,
		1, 0, 0, 0, 1434, 1435, 1, 0, 0, 0, 1435, 1437, 1, 0, 0, 0, 1436, 1427,
		1, 0, 0, 0, 1436, 1428, 1, 0, 0, 0, 1437, 1439, 1, 0, 0, 0, 1438, 1426,
		1, 0, 0, 0, 1439, 1442, 1, 0, 0, 0, 1440, 1438, 1, 0, 0, 0, 1440, 1441,
		1, 0, 0, 0, 1441, 231, 1, 0, 0, 0, 1442, 1440, 1, 0, 0, 0, 1443, 1445,
		5, 85, 0, 0, 1444, 1446, 3, 258, 129, 0, 1445, 1444, 1, 0, 0, 0, 1445,
		1446, 1, 0, 0, 0, 1446, 1447, 1, 0, 0, 0, 1447, 1449, 5, 86, 0, 0, 1448,
		1450, 3, 238, 119, 0, 1449, 1448, 1, 0, 0, 0, 1449, 1450, 1, 0, 0, 0, 1450,
		1452, 1, 0, 0, 0, 1451, 1453, 3, 242, 121, 0, 1452, 1451, 1, 0, 0, 0, 1452,
		1453, 1, 0, 0, 0, 1453, 1455, 1, 0, 0, 0, 1454, 1456, 3, 368, 184, 0, 1455,
		1454, 1, 0, 0, 0, 1455, 1456, 1, 0, 0, 0, 1456, 1458, 1, 0, 0, 0, 1457,
		1459, 3, 204, 102, 0, 1458, 1457, 1, 0, 0, 0, 1458, 1459, 1, 0, 0, 0, 1459,
		233, 1, 0, 0, 0, 1460, 1461, 5, 124, 0, 0, 1461, 1463, 3, 152, 76, 0, 1462,
		1464, 3, 248, 124, 0, 1463, 1462, 1, 0, 0, 0, 1463, 1464, 1, 0, 0, 0, 1464,
		235, 1, 0, 0, 0, 1465, 1467, 7, 17, 0, 0, 1466, 1468, 3, 204, 102, 0, 1467,
		1466, 1, 0, 0, 0, 1467, 1468, 1, 0, 0, 0, 1468, 1480, 1, 0, 0, 0, 1469,
		1471, 3, 10, 5, 0, 1470, 1469, 1, 0, 0, 0, 1470, 1471, 1, 0, 0, 0, 1471,
		1472, 1, 0, 0, 0, 1472, 1474, 5, 93, 0, 0, 1473, 1475, 3, 204, 102, 0,
		1474, 1473, 1, 0, 0, 0, 1474, 1475, 1, 0, 0, 0, 1475, 1477, 1, 0, 0, 0,
		1476, 1478, 3, 238, 119, 0, 1477, 1476, 1, 0, 0, 0, 1477, 1478, 1, 0, 0,
		0, 1478, 1480, 1, 0, 0, 0, 1479, 1465, 1, 0, 0, 0, 1479, 1470, 1, 0, 0,
		0, 1480, 237, 1, 0, 0, 0, 1481, 1483, 3, 240, 120, 0, 1482, 1481, 1, 0,
		0, 0, 1483, 1484, 1, 0, 0, 0, 1484, 1482, 1, 0, 0, 0, 1484, 1485, 1, 0,
		0, 0, 1485, 239, 1, 0, 0, 0, 1486, 1487, 7, 18, 0, 0, 1487, 241, 1, 0,
		0, 0, 1488, 1489, 7, 17, 0, 0, 1489, 243, 1, 0, 0, 0, 1490, 1492, 5, 131,
		0, 0, 1491, 1490, 1, 0, 0, 0, 1491, 1492, 1, 0, 0, 0, 1492, 1493, 1, 0,
		0, 0, 1493, 1494, 3, 4, 2, 0, 1494, 245, 1, 0, 0, 0, 1495, 1497, 3, 150,
		75, 0, 1496, 1498, 3, 248, 124, 0, 1497, 1496, 1, 0, 0, 0, 1497, 1498,
		1, 0, 0, 0, 1498, 247, 1, 0, 0, 0, 1499, 1508, 3, 250, 125, 0, 1500, 1502,
		3, 252, 126, 0, 1501, 1500, 1, 0, 0, 0, 1501, 1502, 1, 0, 0, 0, 1502, 1503,
		1, 0, 0, 0, 1503, 1504, 3, 232, 116, 0, 1504, 1505, 3, 234, 117, 0, 1505,
		1508, 1, 0, 0, 0, 1506, 1508, 3, 254, 127, 0, 1507, 1499, 1, 0, 0, 0, 1507,
		1501, 1, 0, 0, 0, 1507, 1506, 1, 0, 0, 0, 1508, 249, 1, 0, 0, 0, 1509,
		1519, 3, 252, 126, 0, 1510, 1512, 3, 236, 118, 0, 1511, 1510, 1, 0, 0,
		0, 1512, 1513, 1, 0, 0, 0, 1513, 1511, 1, 0, 0, 0, 1513, 1514, 1, 0, 0,
		0, 1514, 1516, 1, 0, 0, 0, 1515, 1517, 3, 252, 126, 0, 1516, 1515, 1, 0,
		0, 0, 1516, 1517, 1, 0, 0, 0, 1517, 1519, 1, 0, 0, 0, 1518, 1509, 1, 0,
		0, 0, 1518, 1511, 1, 0, 0, 0, 1519, 251, 1, 0, 0, 0, 1520, 1521, 6, 126,
		-1, 0, 1521, 1535, 3, 232, 116, 0, 1522, 1524, 5, 87, 0, 0, 1523, 1525,
		3, 92, 46, 0, 1524, 1523, 1, 0, 0, 0, 1524, 1525, 1, 0, 0, 0, 1525, 1526,
		1, 0, 0, 0, 1526, 1528, 5, 88, 0, 0, 1527, 1529, 3, 204, 102, 0, 1528,
		1527, 1, 0, 0, 0, 1528, 1529, 1, 0, 0, 0, 1529, 1535, 1, 0, 0, 0, 1530,
		1531, 5, 85, 0, 0, 1531, 1532, 3, 250, 125, 0, 1532, 1533, 5, 86, 0, 0,
		1533, 1535, 1, 0, 0, 0, 1534, 1520, 1, 0, 0, 0, 1534, 1522, 1, 0, 0, 0,
		1534, 1530, 1, 0, 0, 0, 1535, 1551, 1, 0, 0, 0, 1536, 1547, 10, 4, 0, 0,
		1537, 1548, 3, 232, 116, 0, 1538, 1539, 3, 252, 126, 0, 1539, 1541, 5,
		87, 0, 0, 1540, 1542, 3, 92, 46, 0, 1541, 1540, 1, 0, 0, 0, 1541, 1542,
		1, 0, 0, 0, 1542, 1543, 1, 0, 0, 0, 1543, 1545, 5, 88, 0, 0, 1544, 1546,
		3, 204, 102, 0, 1545, 1544, 1, 0, 0, 0, 1545, 1546, 1, 0, 0, 0, 1546, 1548,
		1, 0, 0, 0, 1547, 1537, 1, 0, 0, 0, 1547, 1538, 1, 0, 0, 0, 1548, 1550,
		1, 0, 0, 0, 1549, 1536, 1, 0, 0, 0, 1550, 1553, 1, 0, 0, 0, 1551, 1549,
		1, 0, 0, 0, 1551, 1552, 1, 0, 0, 0, 1552, 253, 1, 0, 0, 0, 1553, 1551,
		1, 0, 0, 0, 1554, 1556, 3, 236, 118, 0, 1555, 1554, 1, 0, 0, 0, 1556, 1559,
		1, 0, 0, 0, 1557, 1555, 1, 0, 0, 0, 1557, 1558, 1, 0, 0, 0, 1558, 1560,
		1, 0, 0, 0, 1559, 1557, 1, 0, 0, 0, 1560, 1561, 3, 256, 128, 0, 1561, 255,
		1, 0, 0, 0, 1562, 1563, 6, 128, -1, 0, 1563, 1564, 5, 131, 0, 0, 1564,
		1579, 1, 0, 0, 0, 1565, 1575, 10, 2, 0, 0, 1566, 1576, 3, 232, 116, 0,
		1567, 1569, 5, 87, 0, 0, 1568, 1570, 3, 92, 46, 0, 1569, 1568, 1, 0, 0,
		0, 1569, 1570, 1, 0, 0, 0, 1570, 1571, 1, 0, 0, 0, 1571, 1573, 5, 88, 0,
		0, 1572, 1574, 3, 204, 102, 0, 1573, 1572, 1, 0, 0, 0, 1573, 1574, 1, 0,
		0, 0, 1574, 1576, 1, 0, 0, 0, 1575, 1566, 1, 0, 0, 0, 1575, 1567, 1, 0,
		0, 0, 1576, 1578, 1, 0, 0, 0, 1577, 1565, 1, 0, 0, 0, 1578, 1581, 1, 0,
		0, 0, 1579, 1577, 1, 0, 0, 0, 1579, 1580, 1, 0, 0, 0, 1580, 257, 1, 0,
		0, 0, 1581, 1579, 1, 0, 0, 0, 1582, 1587, 3, 260, 130, 0, 1583, 1585, 5,
		122, 0, 0, 1584, 1583, 1, 0, 0, 0, 1584, 1585, 1, 0, 0, 0, 1585, 1586,
		1, 0, 0, 0, 1586, 1588, 5, 131, 0, 0, 1587, 1584, 1, 0, 0, 0, 1587, 1588,
		1, 0, 0, 0, 1588, 259, 1, 0, 0, 0, 1589, 1594, 3, 262, 131, 0, 1590, 1591,
		5, 122, 0, 0, 1591, 1593, 3, 262, 131, 0, 1592, 1590, 1, 0, 0, 0, 1593,
		1596, 1, 0, 0, 0, 1594, 1592, 1, 0, 0, 0, 1594, 1595, 1, 0, 0, 0, 1595,
		261, 1, 0, 0, 0, 1596, 1594, 1, 0, 0, 0, 1597, 1599, 3, 204, 102, 0, 1598,
		1597, 1, 0, 0, 0, 1598, 1599, 1, 0, 0, 0, 1599, 1600, 1, 0, 0, 0, 1600,
		1605, 3, 138, 69, 0, 1601, 1606, 3, 226, 113, 0, 1602, 1604, 3, 248, 124,
		0, 1603, 1602, 1, 0, 0, 0, 1603, 1604, 1, 0, 0, 0, 1604, 1606, 1, 0, 0,
		0, 1605, 1601, 1, 0, 0, 0, 1605, 1603, 1, 0, 0, 0, 1606, 1609, 1, 0, 0,
		0, 1607, 1608, 5, 101, 0, 0, 1608, 1610, 3, 272, 136, 0, 1609, 1607, 1,
		0, 0, 0, 1609, 1610, 1, 0, 0, 0, 1610, 263, 1, 0, 0, 0, 1611, 1613, 3,
		204, 102, 0, 1612, 1611, 1, 0, 0, 0, 1612, 1613, 1, 0, 0, 0, 1613, 1615,
		1, 0, 0, 0, 1614, 1616, 3, 138, 69, 0, 1615, 1614, 1, 0, 0, 0, 1615, 1616,
		1, 0, 0, 0, 1616, 1617, 1, 0, 0, 0, 1617, 1619, 3, 226, 113, 0, 1618, 1620,
		3, 298, 149, 0, 1619, 1618, 1, 0, 0, 0, 1619, 1620, 1, 0, 0, 0, 1620, 1621,
		1, 0, 0, 0, 1621, 1622, 3, 266, 133, 0, 1622, 265, 1, 0, 0, 0, 1623, 1625,
		3, 320, 160, 0, 1624, 1623, 1, 0, 0, 0, 1624, 1625, 1, 0, 0, 0, 1625, 1626,
		1, 0, 0, 0, 1626, 1632, 3, 100, 50, 0, 1627, 1632, 3, 358, 179, 0, 1628,
		1629, 5, 101, 0, 0, 1629, 1630, 7, 19, 0, 0, 1630, 1632, 5, 128, 0, 0,
		1631, 1624, 1, 0, 0, 0, 1631, 1627, 1, 0, 0, 0, 1631, 1628, 1, 0, 0, 0,
		1632, 267, 1, 0, 0, 0, 1633, 1639, 3, 270, 135, 0, 1634, 1635, 5, 85, 0,
		0, 1635, 1636, 3, 34, 17, 0, 1636, 1637, 5, 86, 0, 0, 1637, 1639, 1, 0,
		0, 0, 1638, 1633, 1, 0, 0, 0, 1638, 1634, 1, 0, 0, 0, 1639, 269, 1, 0,
		0, 0, 1640, 1641, 5, 101, 0, 0, 1641, 1644, 3, 272, 136, 0, 1642, 1644,
		3, 276, 138, 0, 1643, 1640, 1, 0, 0, 0, 1643, 1642, 1, 0, 0, 0, 1644, 271,
		1, 0, 0, 0, 1645, 1648, 3, 86, 43, 0, 1646, 1648, 3, 276, 138, 0, 1647,
		1645, 1, 0, 0, 0, 1647, 1646, 1, 0, 0, 0, 1648, 273, 1, 0, 0, 0, 1649,
		1651, 3, 272, 136, 0, 1650, 1652, 5, 131, 0, 0, 1651, 1650, 1, 0, 0, 0,
		1651, 1652, 1, 0, 0, 0, 1652, 1660, 1, 0, 0, 0, 1653, 1654, 5, 122, 0,
		0, 1654, 1656, 3, 272, 136, 0, 1655, 1657, 5, 131, 0, 0, 1656, 1655, 1,
		0, 0, 0, 1656, 1657, 1, 0, 0, 0, 1657, 1659, 1, 0, 0, 0, 1658, 1653, 1,
		0, 0, 0, 1659, 1662, 1, 0, 0, 0, 1660, 1658, 1, 0, 0, 0, 1660, 1661, 1,
		0, 0, 0, 1661, 275, 1, 0, 0, 0, 1662, 1660, 1, 0, 0, 0, 1663, 1668, 5,
		89, 0, 0, 1664, 1666, 3, 274, 137, 0, 1665, 1667, 5, 122, 0, 0, 1666, 1665,
		1, 0, 0, 0, 1666, 1667, 1, 0, 0, 0, 1667, 1669, 1, 0, 0, 0, 1668, 1664,
		1, 0, 0, 0, 1668, 1669, 1, 0, 0, 0, 1669, 1670, 1, 0, 0, 0, 1670, 1671,
		5, 90, 0, 0, 1671, 277, 1, 0, 0, 0, 1672, 1675, 5, 132, 0, 0, 1673, 1675,
		3, 340, 170, 0, 1674, 1672, 1, 0, 0, 0, 1674, 1673, 1, 0, 0, 0, 1675, 279,
		1, 0, 0, 0, 1676, 1677, 3, 282, 141, 0, 1677, 1679, 5, 89, 0, 0, 1678,
		1680, 3, 290, 145, 0, 1679, 1678, 1, 0, 0, 0, 1679, 1680, 1, 0, 0, 0, 1680,
		1681, 1, 0, 0, 0, 1681, 1682, 5, 90, 0, 0, 1682, 281, 1, 0, 0, 0, 1683,
		1685, 3, 288, 144, 0, 1684, 1686, 3, 204, 102, 0, 1685, 1684, 1, 0, 0,
		0, 1685, 1686, 1, 0, 0, 0, 1686, 1691, 1, 0, 0, 0, 1687, 1689, 3, 284,
		142, 0, 1688, 1690, 3, 286, 143, 0, 1689, 1688, 1, 0, 0, 0, 1689, 1690,
		1, 0, 0, 0, 1690, 1692, 1, 0, 0, 0, 1691, 1687, 1, 0, 0, 0, 1691, 1692,
		1, 0, 0, 0, 1692, 1694, 1, 0, 0, 0, 1693, 1695, 3, 302, 151, 0, 1694, 1693,
		1, 0, 0, 0, 1694, 1695, 1, 0, 0, 0, 1695, 1707, 1, 0, 0, 0, 1696, 1698,
		5, 77, 0, 0, 1697, 1699, 3, 204, 102, 0, 1698, 1697, 1, 0, 0, 0, 1698,
		1699, 1, 0, 0, 0, 1699, 1704, 1, 0, 0, 0, 1700, 1702, 3, 284, 142, 0, 1701,
		1703, 3, 286, 143, 0, 1702, 1701, 1, 0, 0, 0, 1702, 1703, 1, 0, 0, 0, 1703,
		1705, 1, 0, 0, 0, 1704, 1700, 1, 0, 0, 0, 1704, 1705, 1, 0, 0, 0, 1705,
		1707, 1, 0, 0, 0, 1706, 1683, 1, 0, 0, 0, 1706, 1696, 1, 0, 0, 0, 1707,
		283, 1, 0, 0, 0, 1708, 1710, 3, 10, 5, 0, 1709, 1708, 1, 0, 0, 0, 1709,
		1710, 1, 0, 0, 0, 1710, 1711, 1, 0, 0, 0, 1711, 1712, 3, 278, 139, 0, 1712,
		285, 1, 0, 0, 0, 1713, 1714, 5, 38, 0, 0, 1714, 287, 1, 0, 0, 0, 1715,
		1716, 7, 15, 0, 0, 1716, 289, 1, 0, 0, 0, 1717, 1722, 3, 292, 146, 0, 1718,
		1719, 3, 312, 156, 0, 1719, 1720, 5, 126, 0, 0, 1720, 1722, 1, 0, 0, 0,
		1721, 1717, 1, 0, 0, 0, 1721, 1718, 1, 0, 0, 0, 1722, 1723, 1, 0, 0, 0,
		1723, 1721, 1, 0, 0, 0, 1723, 1724, 1, 0, 0, 0, 1724, 291, 1, 0, 0, 0,
		1725, 1727, 3, 204, 102, 0, 1726, 1725, 1, 0, 0, 0, 1726, 1727, 1, 0, 0,
		0, 1727, 1729, 1, 0, 0, 0, 1728, 1730, 3, 138, 69, 0, 1729, 1728, 1, 0,
		0, 0, 1729, 1730, 1, 0, 0, 0, 1730, 1732, 1, 0, 0, 0, 1731, 1733, 3, 294,
		147, 0, 1732, 1731, 1, 0, 0, 0, 1732, 1733, 1, 0, 0, 0, 1733, 1734, 1,
		0, 0, 0, 1734, 1742, 5, 128, 0, 0, 1735, 1742, 3, 264, 132, 0, 1736, 1742,
		3, 196, 98, 0, 1737, 1742, 3, 130, 65, 0, 1738, 1742, 3, 332, 166, 0, 1739,
		1742, 3, 126, 63, 0, 1740, 1742, 3, 132, 66, 0, 1741, 1726, 1, 0, 0, 0,
		1741, 1735, 1, 0, 0, 0, 1741, 1736, 1, 0, 0, 0, 1741, 1737, 1, 0, 0, 0,
		1741, 1738, 1, 0, 0, 0, 1741, 1739, 1, 0, 0, 0, 1741, 1740, 1, 0, 0, 0,
		1742, 293, 1, 0, 0, 0, 1743, 1748, 3, 296, 148, 0, 1744, 1745, 5, 122,
		0, 0, 1745, 1747, 3, 296, 148, 0, 1746, 1744, 1, 0, 0, 0, 1747, 1750, 1,
		0, 0, 0, 1748, 1746, 1, 0, 0, 0, 1748, 1749, 1, 0, 0, 0, 1749, 295, 1,
		0, 0, 0, 1750, 1748, 1, 0, 0, 0, 1751, 1758, 3, 226, 113, 0, 1752, 1754,
		3, 298, 149, 0, 1753, 1752, 1, 0, 0, 0, 1753, 1754, 1, 0, 0, 0, 1754, 1759,
		1, 0, 0, 0, 1755, 1757, 3, 270, 135, 0, 1756, 1755, 1, 0, 0, 0, 1756, 1757,
		1, 0, 0, 0, 1757, 1759, 1, 0, 0, 0, 1758, 1753, 1, 0, 0, 0, 1758, 1756,
		1, 0, 0, 0, 1759, 1769, 1, 0, 0, 0, 1760, 1762, 5, 132, 0, 0, 1761, 1760,
		1, 0, 0, 0, 1761, 1762, 1, 0, 0, 0, 1762, 1764, 1, 0, 0, 0, 1763, 1765,
		3, 204, 102, 0, 1764, 1763, 1, 0, 0, 0, 1764, 1765, 1, 0, 0, 0, 1765, 1766,
		1, 0, 0, 0, 1766, 1767, 5, 126, 0, 0, 1767, 1769, 3, 92, 46, 0, 1768, 1751,
		1, 0, 0, 0, 1768, 1761, 1, 0, 0, 0, 1769, 297, 1, 0, 0, 0, 1770, 1772,
		3, 300, 150, 0, 1771, 1770, 1, 0, 0, 0, 1772, 1773, 1, 0, 0, 0, 1773, 1771,
		1, 0, 0, 0, 1773, 1774, 1, 0, 0, 0, 1774, 299, 1, 0, 0, 0, 1775, 1776,
		7, 20, 0, 0, 1776, 301, 1, 0, 0, 0, 1777, 1778, 5, 126, 0, 0, 1778, 1779,
		3, 304, 152, 0, 1779, 303, 1, 0, 0, 0, 1780, 1782, 3, 306, 153, 0, 1781,
		1783, 5, 131, 0, 0, 1782, 1781, 1, 0, 0, 0, 1782, 1783, 1, 0, 0, 0, 1783,
		1791, 1, 0, 0, 0, 1784, 1785, 5, 122, 0, 0, 1785, 1787, 3, 306, 153, 0,
		1786, 1788, 5, 131, 0, 0, 1787, 1786, 1, 0, 0, 0, 1787, 1788, 1, 0, 0,
		0, 1788, 1790, 1, 0, 0, 0, 1789, 1784, 1, 0, 0, 0, 1790, 1793, 1, 0, 0,
		0, 1791, 1789, 1, 0, 0, 0, 1791, 1792, 1, 0, 0, 0, 1792, 305, 1, 0, 0,
		0, 1793, 1791, 1, 0, 0, 0, 1794, 1796, 3, 204, 102, 0, 1795, 1794, 1, 0,
		0, 0, 1795, 1796, 1, 0, 0, 0, 1796, 1809, 1, 0, 0, 0, 1797, 1810, 3, 310,
		155, 0, 1798, 1800, 5, 80, 0, 0, 1799, 1801, 3, 312, 156, 0, 1800, 1799,
		1, 0, 0, 0, 1800, 1801, 1, 0, 0, 0, 1801, 1802, 1, 0, 0, 0, 1802, 1810,
		3, 310, 155, 0, 1803, 1805, 3, 312, 156, 0, 1804, 1806, 5, 80, 0, 0, 1805,
		1804, 1, 0, 0, 0, 1805, 1806, 1, 0, 0, 0, 1806, 1807, 1, 0, 0, 0, 1807,
		1808, 3, 310, 155, 0, 1808, 1810, 1, 0, 0, 0, 1809, 1797, 1, 0, 0, 0, 1809,
		1798, 1, 0, 0, 0, 1809, 1803, 1, 0, 0, 0, 1810, 307, 1, 0, 0, 0, 1811,
		1813, 3, 10, 5, 0, 1812, 1811, 1, 0, 0, 0, 1812, 1813, 1, 0, 0, 0, 1813,
		1814, 1, 0, 0, 0, 1814, 1817, 3, 278, 139, 0, 1815, 1817, 3, 162, 81, 0,
		1816, 1812, 1, 0, 0, 0, 1816, 1815, 1, 0, 0, 0, 1817, 309, 1, 0, 0, 0,
		1818, 1819, 3, 308, 154, 0, 1819, 311, 1, 0, 0, 0, 1820, 1821, 7, 21, 0,
		0, 1821, 313, 1, 0, 0, 0, 1822, 1823, 5, 52, 0, 0, 1823, 1824, 3, 316,
		158, 0, 1824, 315, 1, 0, 0, 0, 1825, 1827, 3, 150, 75, 0, 1826, 1828, 3,
		318, 159, 0, 1827, 1826, 1, 0, 0, 0, 1827, 1828, 1, 0, 0, 0, 1828, 317,
		1, 0, 0, 0, 1829, 1831, 3, 236, 118, 0, 1830, 1832, 3, 318, 159, 0, 1831,
		1830, 1, 0, 0, 0, 1831, 1832, 1, 0, 0, 0, 1832, 319, 1, 0, 0, 0, 1833,
		1834, 5, 126, 0, 0, 1834, 1835, 3, 322, 161, 0, 1835, 321, 1, 0, 0, 0,
		1836, 1838, 3, 324, 162, 0, 1837, 1839, 5, 131, 0, 0, 1838, 1837, 1, 0,
		0, 0, 1838, 1839, 1, 0, 0, 0, 1839, 1847, 1, 0, 0, 0, 1840, 1841, 5, 122,
		0, 0, 1841, 1843, 3, 324, 162, 0, 1842, 1844, 5, 131, 0, 0, 1843, 1842,
		1, 0, 0, 0, 1843, 1844, 1, 0, 0, 0, 1844, 1846, 1, 0, 0, 0, 1845, 1840,
		1, 0, 0, 0, 1846, 1849, 1, 0, 0, 0, 1847, 1845, 1, 0, 0, 0, 1847, 1848,
		1, 0, 0, 0, 1848, 323, 1, 0, 0, 0, 1849, 1847, 1, 0, 0, 0, 1850, 1857,
		3, 326, 163, 0, 1851, 1853, 5, 85, 0, 0, 1852, 1854, 3, 34, 17, 0, 1853,
		1852, 1, 0, 0, 0, 1853, 1854, 1, 0, 0, 0, 1854, 1855, 1, 0, 0, 0, 1855,
		1858, 5, 86, 0, 0, 1856, 1858, 3, 276, 138, 0, 1857, 1851, 1, 0, 0, 0,
		1857, 1856, 1, 0, 0, 0, 1858, 325, 1, 0, 0, 0, 1859, 1862, 3, 308, 154,
		0, 1860, 1862, 5, 132, 0, 0, 1861, 1859, 1, 0, 0, 0, 1861, 1860, 1, 0,
		0, 0, 1862, 327, 1, 0, 0, 0, 1863, 1864, 5, 52, 0, 0, 1864, 1865, 3, 376,
		188, 0, 1865, 329, 1, 0, 0, 0, 1866, 1870, 5, 52, 0, 0, 1867, 1868, 5,
		4, 0, 0, 1868, 1871, 5, 132, 0, 0, 1869, 1871, 5, 140, 0, 0, 1870, 1867,
		1, 0, 0, 0, 1870, 1869, 1, 0, 0, 0, 1871, 331, 1, 0, 0, 0, 1872, 1873,
		5, 68, 0, 0, 1873, 1874, 5, 102, 0, 0, 1874, 1875, 3, 334, 167, 0, 1875,
		1876, 5, 103, 0, 0, 1876, 1877, 3, 122, 61, 0, 1877, 333, 1, 0, 0, 0, 1878,
		1883, 3, 336, 168, 0, 1879, 1880, 5, 122, 0, 0, 1880, 1882, 3, 336, 168,
		0, 1881, 1879, 1, 0, 0, 0, 1882, 1885, 1, 0, 0, 0, 1883, 1881, 1, 0, 0,
		0, 1883, 1884, 1, 0, 0, 0, 1884, 335, 1, 0, 0, 0, 1885, 1883, 1, 0, 0,
		0, 1886, 1889, 3, 338, 169, 0, 1887, 1889, 3, 262, 131, 0, 1888, 1886,
		1, 0, 0, 0, 1888, 1887, 1, 0, 0, 0, 1889, 337, 1, 0, 0, 0, 1890, 1891,
		5, 68, 0, 0, 1891, 1892, 5, 102, 0, 0, 1892, 1893, 3, 334, 167, 0, 1893,
		1894, 5, 103, 0, 0, 1894, 1896, 1, 0, 0, 0, 1895, 1890, 1, 0, 0, 0, 1895,
		1896, 1, 0, 0, 0, 1896, 1897, 1, 0, 0, 0, 1897, 1900, 5, 21, 0, 0, 1898,
		1900, 5, 76, 0, 0, 1899, 1895, 1, 0, 0, 0, 1899, 1898, 1, 0, 0, 0, 1900,
		1912, 1, 0, 0, 0, 1901, 1903, 5, 131, 0, 0, 1902, 1901, 1, 0, 0, 0, 1902,
		1903, 1, 0, 0, 0, 1903, 1905, 1, 0, 0, 0, 1904, 1906, 5, 132, 0, 0, 1905,
		1904, 1, 0, 0, 0, 1905, 1906, 1, 0, 0, 0, 1906, 1913, 1, 0, 0, 0, 1907,
		1909, 5, 132, 0, 0, 1908, 1907, 1, 0, 0, 0, 1908, 1909, 1, 0, 0, 0, 1909,
		1910, 1, 0, 0, 0, 1910, 1911, 5, 101, 0, 0, 1911, 1913, 3, 246, 123, 0,
		1912, 1902, 1, 0, 0, 0, 1912, 1908, 1, 0, 0, 0, 1913, 339, 1, 0, 0, 0,
		1914, 1915, 3, 344, 172, 0, 1915, 1917, 5, 102, 0, 0, 1916, 1918, 3, 346,
		173, 0, 1917, 1916, 1, 0, 0, 0, 1917, 1918, 1, 0, 0, 0, 1918, 1919, 1,
		0, 0, 0, 1919, 1920, 5, 103, 0, 0, 1920, 341, 1, 0, 0, 0, 1921, 1933, 3,
		340, 170, 0, 1922, 1925, 3, 328, 164, 0, 1923, 1925, 3, 330, 165, 0, 1924,
		1922, 1, 0, 0, 0, 1924, 1923, 1, 0, 0, 0, 1925, 1926, 1, 0, 0, 0, 1926,
		1928, 5, 102, 0, 0, 1927, 1929, 3, 346, 173, 0, 1928, 1927, 1, 0, 0, 0,
		1928, 1929, 1, 0, 0, 0, 1929, 1930, 1, 0, 0, 0, 1930, 1931, 5, 103, 0,
		0, 1931, 1933, 1, 0, 0, 0, 1932, 1921, 1, 0, 0, 0, 1932, 1924, 1, 0, 0,
		0, 1933, 343, 1, 0, 0, 0, 1934, 1935, 5, 132, 0, 0, 1935, 345, 1, 0, 0,
		0, 1936, 1938, 3, 348, 174, 0, 1937, 1939, 5, 131, 0, 0, 1938, 1937, 1,
		0, 0, 0, 1938, 1939, 1, 0, 0, 0, 1939, 1947, 1, 0, 0, 0, 1940, 1941, 5,
		122, 0, 0, 1941, 1943, 3, 348, 174, 0, 1942, 1944, 5, 131, 0, 0, 1943,
		1942, 1, 0, 0, 0, 1943, 1944, 1, 0, 0, 0, 1944, 1946, 1, 0, 0, 0, 1945,
		1940, 1, 0, 0, 0, 1946, 1949, 1, 0, 0, 0, 1947, 1945, 1, 0, 0, 0, 1947,
		1948, 1, 0, 0, 0, 1948, 347, 1, 0, 0, 0, 1949, 1947, 1, 0, 0, 0, 1950,
		1954, 3, 246, 123, 0, 1951, 1954, 3, 92, 46, 0, 1952, 1954, 3, 4, 2, 0,
		1953, 1950, 1, 0, 0, 0, 1953, 1951, 1, 0, 0, 0, 1953, 1952, 1, 0, 0, 0,
		1954, 349, 1, 0, 0, 0, 1955, 1956, 5, 76, 0, 0, 1956, 1962, 3, 10, 5, 0,
		1957, 1963, 5, 132, 0, 0, 1958, 1960, 5, 68, 0, 0, 1959, 1958, 1, 0, 0,
		0, 1959, 1960, 1, 0, 0, 0, 1960, 1961, 1, 0, 0, 0, 1961, 1963, 3, 340,
		170, 0, 1962, 1957, 1, 0, 0, 0, 1962, 1959, 1, 0, 0, 0, 1963, 351, 1, 0,
		0, 0, 1964, 1966, 5, 36, 0, 0, 1965, 1964, 1, 0, 0, 0, 1965, 1966, 1, 0,
		0, 0, 1966, 1967, 1, 0, 0, 0, 1967, 1968, 5, 68, 0, 0, 1968, 1969, 3, 122,
		61, 0, 1969, 353, 1, 0, 0, 0, 1970, 1971, 5, 68, 0, 0, 1971, 1972, 5, 102,
		0, 0, 1972, 1973, 5, 103, 0, 0, 1973, 1974, 3, 122, 61, 0, 1974, 355, 1,
		0, 0, 0, 1975, 1976, 5, 73, 0, 0, 1976, 1977, 3, 100, 50, 0, 1977, 1978,
		3, 360, 180, 0, 1978, 357, 1, 0, 0, 0, 1979, 1981, 5, 73, 0, 0, 1980, 1982,
		3, 320, 160, 0, 1981, 1980, 1, 0, 0, 0, 1981, 1982, 1, 0, 0, 0, 1982, 1983,
		1, 0, 0, 0, 1983, 1984, 3, 100, 50, 0, 1984, 1985, 3, 360, 180, 0, 1985,
		359, 1, 0, 0, 0, 1986, 1988, 3, 362, 181, 0, 1987, 1986, 1, 0, 0, 0, 1988,
		1989, 1, 0, 0, 0, 1989, 1987, 1, 0, 0, 0, 1989, 1990, 1, 0, 0, 0, 1990,
		361, 1, 0, 0, 0, 1991, 1992, 5, 17, 0, 0, 1992, 1993, 5, 85, 0, 0, 1993,
		1994, 3, 364, 182, 0, 1994, 1995, 5, 86, 0, 0, 1995, 1996, 3, 100, 50,
		0, 1996, 363, 1, 0, 0, 0, 1997, 1999, 3, 204, 102, 0, 1998, 1997, 1, 0,
		0, 0, 1998, 1999, 1, 0, 0, 0, 1999, 2000, 1, 0, 0, 0, 2000, 2003, 3, 150,
		75, 0, 2001, 2004, 3, 226, 113, 0, 2002, 2004, 3, 248, 124, 0, 2003, 2001,
		1, 0, 0, 0, 2003, 2002, 1, 0, 0, 0, 2003, 2004, 1, 0, 0, 0, 2004, 2007,
		1, 0, 0, 0, 2005, 2007, 5, 131, 0, 0, 2006, 1998, 1, 0, 0, 0, 2006, 2005,
		1, 0, 0, 0, 2007, 365, 1, 0, 0, 0, 2008, 2010, 5, 71, 0, 0, 2009, 2011,
		3, 86, 43, 0, 2010, 2009, 1, 0, 0, 0, 2010, 2011, 1, 0, 0, 0, 2011, 367,
		1, 0, 0, 0, 2012, 2015, 3, 370, 185, 0, 2013, 2015, 3, 374, 187, 0, 2014,
		2012, 1, 0, 0, 0, 2014, 2013, 1, 0, 0, 0, 2015, 369, 1, 0, 0, 0, 2016,
		2017, 5, 71, 0, 0, 2017, 2019, 5, 85, 0, 0, 2018, 2020, 3, 372, 186, 0,
		2019, 2018, 1, 0, 0, 0, 2019, 2020, 1, 0, 0, 0, 2020, 2021, 1, 0, 0, 0,
		2021, 2022, 5, 86, 0, 0, 2022, 371, 1, 0, 0, 0, 2023, 2025, 3, 246, 123,
		0, 2024, 2026, 5, 131, 0, 0, 2025, 2024, 1, 0, 0, 0, 2025, 2026, 1, 0,
		0, 0, 2026, 2034, 1, 0, 0, 0, 2027, 2028, 5, 122, 0, 0, 2028, 2030, 3,
		246, 123, 0, 2029, 2031, 5, 131, 0, 0, 2030, 2029, 1, 0, 0, 0, 2030, 2031,
		1, 0, 0, 0, 2031, 2033, 1, 0, 0, 0, 2032, 2027, 1, 0, 0, 0, 2033, 2036,
		1, 0, 0, 0, 2034, 2032, 1, 0, 0, 0, 2034, 2035, 1, 0, 0, 0, 2035, 373,
		1, 0, 0, 0, 2036, 2034, 1, 0, 0, 0, 2037, 2038, 5, 50, 0, 0, 2038, 2039,
		5, 85, 0, 0, 2039, 2040, 3, 92, 46, 0, 2040, 2041, 5, 86, 0, 0, 2041, 2044,
		1, 0, 0, 0, 2042, 2044, 5, 50, 0, 0, 2043, 2037, 1, 0, 0, 0, 2043, 2042,
		1, 0, 0, 0, 2044, 375, 1, 0, 0, 0, 2045, 2048, 5, 49, 0, 0, 2046, 2047,
		5, 87, 0, 0, 2047, 2049, 5, 88, 0, 0, 2048, 2046, 1, 0, 0, 0, 2048, 2049,
		1, 0, 0, 0, 2049, 2097, 1, 0, 0, 0, 2050, 2053, 5, 28, 0, 0, 2051, 2052,
		5, 87, 0, 0, 2052, 2054, 5, 88, 0, 0, 2053, 2051, 1, 0, 0, 0, 2053, 2054,
		1, 0, 0, 0, 2054, 2097, 1, 0, 0, 0, 2055, 2097, 5, 91, 0, 0, 2056, 2097,
		5, 92, 0, 0, 2057, 2097, 5, 93, 0, 0, 2058, 2097, 5, 94, 0, 0, 2059, 2097,
		5, 95, 0, 0, 2060, 2097, 5, 96, 0, 0, 2061, 2097, 5, 97, 0, 0, 2062, 2097,
		5, 98, 0, 0, 2063, 2097, 5, 99, 0, 0, 2064, 2097, 5, 100, 0, 0, 2065, 2097,
		5, 101, 0, 0, 2066, 2097, 5, 103, 0, 0, 2067, 2097, 5, 102, 0, 0, 2068,
		2097, 5, 117, 0, 0, 2069, 2097, 5, 104, 0, 0, 2070, 2097, 5, 105, 0, 0,
		2071, 2097, 5, 106, 0, 0, 2072, 2097, 5, 108, 0, 0, 2073, 2097, 5, 109,
		0, 0, 2074, 2097, 5, 110, 0, 0, 2075, 2097, 5, 111, 0, 0, 2076, 2077, 5,
		102, 0, 0, 2077, 2097, 5, 102, 0, 0, 2078, 2079, 5, 103, 0, 0, 2079, 2097,
		5, 103, 0, 0, 2080, 2097, 5, 113, 0, 0, 2081, 2097, 5, 112, 0, 0, 2082,
		2097, 5, 114, 0, 0, 2083, 2097, 5, 115, 0, 0, 2084, 2097, 5, 116, 0, 0,
		2085, 2097, 5, 118, 0, 0, 2086, 2097, 5, 119, 0, 0, 2087, 2097, 5, 120,
		0, 0, 2088, 2097, 5, 121, 0, 0, 2089, 2097, 5, 122, 0, 0, 2090, 2097, 5,
		123, 0, 0, 2091, 2097, 5, 124, 0, 0, 2092, 2093, 5, 85, 0, 0, 2093, 2097,
		5, 86, 0, 0, 2094, 2095, 5, 87, 0, 0, 2095, 2097, 5, 88, 0, 0, 2096, 2045,
		1, 0, 0, 0, 2096, 2050, 1, 0, 0, 0, 2096, 2055, 1, 0, 0, 0, 2096, 2056,
		1, 0, 0, 0, 2096, 2057, 1, 0, 0, 0, 2096, 2058, 1, 0, 0, 0, 2096, 2059,
		1, 0, 0, 0, 2096, 2060, 1, 0, 0, 0, 2096, 2061, 1, 0, 0, 0, 2096, 2062,
		1, 0, 0, 0, 2096, 2063, 1, 0, 0, 0, 2096, 2064, 1, 0, 0, 0, 2096, 2065,
		1, 0, 0, 0, 2096, 2066, 1, 0, 0, 0, 2096, 2067, 1, 0, 0, 0, 2096, 2068,
		1, 0, 0, 0, 2096, 2069, 1, 0, 0, 0, 2096, 2070, 1, 0, 0, 0, 2096, 2071,
		1, 0, 0, 0, 2096, 2072, 1, 0, 0, 0, 2096, 2073, 1, 0, 0, 0, 2096, 2074,
		1, 0, 0, 0, 2096, 2075, 1, 0, 0, 0, 2096, 2076, 1, 0, 0, 0, 2096, 2078,
		1, 0, 0, 0, 2096, 2080, 1, 0, 0, 0, 2096, 2081, 1, 0, 0, 0, 2096, 2082,
		1, 0, 0, 0, 2096, 2083, 1, 0, 0, 0, 2096, 2084, 1, 0, 0, 0, 2096, 2085,
		1, 0, 0, 0, 2096, 2086, 1, 0, 0, 0, 2096, 2087, 1, 0, 0, 0, 2096, 2088,
		1, 0, 0, 0, 2096, 2089, 1, 0, 0, 0, 2096, 2090, 1, 0, 0, 0, 2096, 2091,
		1, 0, 0, 0, 2096, 2092, 1, 0, 0, 0, 2096, 2094, 1, 0, 0, 0, 2097, 377,
		1, 0, 0, 0, 2098, 2099, 7, 22, 0, 0, 2099, 379, 1, 0, 0, 0, 305, 381, 388,
		397, 401, 410, 413, 417, 425, 432, 435, 440, 445, 451, 459, 461, 470, 474,
		478, 481, 485, 488, 495, 499, 502, 505, 508, 514, 518, 522, 536, 540, 546,
		553, 559, 563, 567, 569, 577, 582, 595, 602, 614, 624, 629, 633, 640, 643,
		651, 655, 658, 665, 672, 676, 681, 685, 688, 693, 708, 715, 723, 731, 740,
		747, 754, 762, 770, 778, 786, 794, 802, 811, 819, 828, 836, 844, 846, 849,
		855, 861, 867, 874, 883, 891, 895, 902, 904, 924, 928, 934, 939, 943, 946,
		953, 960, 964, 973, 984, 994, 999, 1006, 1009, 1014, 1019, 1040, 1045,
		1048, 1059, 1065, 1070, 1073, 1078, 1081, 1088, 1097, 1102, 1105, 1109,
		1113, 1117, 1122, 1127, 1133, 1139, 1145, 1151, 1157, 1160, 1166, 1170,
		1174, 1177, 1185, 1187, 1193, 1196, 1199, 1202, 1206, 1210, 1216, 1226,
		1232, 1238, 1243, 1248, 1252, 1265, 1271, 1275, 1281, 1286, 1301, 1305,
		1310, 1315, 1320, 1326, 1329, 1338, 1342, 1347, 1351, 1357, 1364, 1381,
		1383, 1390, 1395, 1402, 1406, 1410, 1418, 1424, 1430, 1434, 1436, 1440,
		1445, 1449, 1452, 1455, 1458, 1463, 1467, 1470, 1474, 1477, 1479, 1484,
		1491, 1497, 1501, 1507, 1513, 1516, 1518, 1524, 1528, 1534, 1541, 1545,
		1547, 1551, 1557, 1569, 1573, 1575, 1579, 1584, 1587, 1594, 1598, 1603,
		1605, 1609, 1612, 1615, 1619, 1624, 1631, 1638, 1643, 1647, 1651, 1656,
		1660, 1666, 1668, 1674, 1679, 1685, 1689, 1691, 1694, 1698, 1702, 1704,
		1706, 1709, 1721, 1723, 1726, 1729, 1732, 1741, 1748, 1753, 1756, 1758,
		1761, 1764, 1768, 1773, 1782, 1787, 1791, 1795, 1800, 1805, 1809, 1812,
		1816, 1827, 1831, 1838, 1843, 1847, 1853, 1857, 1861, 1870, 1883, 1888,
		1895, 1899, 1902, 1905, 1908, 1912, 1917, 1924, 1928, 1932, 1938, 1943,
		1947, 1953, 1959, 1962, 1965, 1981, 1989, 1998, 2003, 2006, 2010, 2014,
		2019, 2025, 2030, 2034, 2043, 2048, 2053, 2096,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// CPP14ParserInit initializes any static state used to implement CPP14Parser. By default the
// static state used to implement the parser is lazily initialized during the first call to
// NewCPP14Parser(). You can call this function if you wish to initialize the static state ahead
// of time.
func CPP14ParserInit() {
	staticData := &CPP14ParserParserStaticData
	staticData.once.Do(cpp14parserParserInit)
}

// NewCPP14Parser produces a new parser instance for the optional input antlr.TokenStream.
func NewCPP14Parser(input antlr.TokenStream) *CPP14Parser {
	CPP14ParserInit()
	this := new(CPP14Parser)
	this.BaseParser = antlr.NewBaseParser(input)
	staticData := &CPP14ParserParserStaticData
	this.Interpreter = antlr.NewParserATNSimulator(this, staticData.atn, staticData.decisionToDFA, staticData.PredictionContextCache)
	this.RuleNames = staticData.RuleNames
	this.LiteralNames = staticData.LiteralNames
	this.SymbolicNames = staticData.SymbolicNames
	this.GrammarFileName = "CPP14Parser.g4"

	return this
}

// CPP14Parser tokens.
const (
	CPP14ParserEOF                         = antlr.TokenEOF
	CPP14ParserIntegerLiteral              = 1
	CPP14ParserCharacterLiteral            = 2
	CPP14ParserFloatingLiteral             = 3
	CPP14ParserStringLiteral               = 4
	CPP14ParserBooleanLiteral              = 5
	CPP14ParserPointerLiteral              = 6
	CPP14ParserUserDefinedLiteral          = 7
	CPP14ParserMultiLineMacro              = 8
	CPP14ParserDirective                   = 9
	CPP14ParserAlignas                     = 10
	CPP14ParserAlignof                     = 11
	CPP14ParserAsm                         = 12
	CPP14ParserAuto                        = 13
	CPP14ParserBool                        = 14
	CPP14ParserBreak                       = 15
	CPP14ParserCase                        = 16
	CPP14ParserCatch                       = 17
	CPP14ParserChar                        = 18
	CPP14ParserChar16                      = 19
	CPP14ParserChar32                      = 20
	CPP14ParserClass                       = 21
	CPP14ParserConst                       = 22
	CPP14ParserConstexpr                   = 23
	CPP14ParserConst_cast                  = 24
	CPP14ParserContinue                    = 25
	CPP14ParserDecltype                    = 26
	CPP14ParserDefault                     = 27
	CPP14ParserDelete                      = 28
	CPP14ParserDo                          = 29
	CPP14ParserDouble                      = 30
	CPP14ParserDynamic_cast                = 31
	CPP14ParserElse                        = 32
	CPP14ParserEnum                        = 33
	CPP14ParserExplicit                    = 34
	CPP14ParserExport                      = 35
	CPP14ParserExtern                      = 36
	CPP14ParserFalse_                      = 37
	CPP14ParserFinal                       = 38
	CPP14ParserFloat                       = 39
	CPP14ParserFor                         = 40
	CPP14ParserFriend                      = 41
	CPP14ParserGoto                        = 42
	CPP14ParserIf                          = 43
	CPP14ParserInline                      = 44
	CPP14ParserInt                         = 45
	CPP14ParserLong                        = 46
	CPP14ParserMutable                     = 47
	CPP14ParserNamespace                   = 48
	CPP14ParserNew                         = 49
	CPP14ParserNoexcept                    = 50
	CPP14ParserNullptr                     = 51
	CPP14ParserOperator                    = 52
	CPP14ParserOverride                    = 53
	CPP14ParserPrivate                     = 54
	CPP14ParserProtected                   = 55
	CPP14ParserPublic                      = 56
	CPP14ParserRegister                    = 57
	CPP14ParserReinterpret_cast            = 58
	CPP14ParserReturn                      = 59
	CPP14ParserShort                       = 60
	CPP14ParserSigned                      = 61
	CPP14ParserSizeof                      = 62
	CPP14ParserStatic                      = 63
	CPP14ParserStatic_assert               = 64
	CPP14ParserStatic_cast                 = 65
	CPP14ParserStruct                      = 66
	CPP14ParserSwitch                      = 67
	CPP14ParserTemplate                    = 68
	CPP14ParserThis                        = 69
	CPP14ParserThread_local                = 70
	CPP14ParserThrow                       = 71
	CPP14ParserTrue_                       = 72
	CPP14ParserTry                         = 73
	CPP14ParserTypedef                     = 74
	CPP14ParserTypeid_                     = 75
	CPP14ParserTypename_                   = 76
	CPP14ParserUnion                       = 77
	CPP14ParserUnsigned                    = 78
	CPP14ParserUsing                       = 79
	CPP14ParserVirtual                     = 80
	CPP14ParserVoid                        = 81
	CPP14ParserVolatile                    = 82
	CPP14ParserWchar                       = 83
	CPP14ParserWhile                       = 84
	CPP14ParserLeftParen                   = 85
	CPP14ParserRightParen                  = 86
	CPP14ParserLeftBracket                 = 87
	CPP14ParserRightBracket                = 88
	CPP14ParserLeftBrace                   = 89
	CPP14ParserRightBrace                  = 90
	CPP14ParserPlus                        = 91
	CPP14ParserMinus                       = 92
	CPP14ParserStar                        = 93
	CPP14ParserDiv                         = 94
	CPP14ParserMod                         = 95
	CPP14ParserCaret                       = 96
	CPP14ParserAnd                         = 97
	CPP14ParserOr                          = 98
	CPP14ParserTilde                       = 99
	CPP14ParserNot                         = 100
	CPP14ParserAssign                      = 101
	CPP14ParserLess                        = 102
	CPP14ParserGreater                     = 103
	CPP14ParserPlusAssign                  = 104
	CPP14ParserMinusAssign                 = 105
	CPP14ParserStarAssign                  = 106
	CPP14ParserDivAssign                   = 107
	CPP14ParserModAssign                   = 108
	CPP14ParserXorAssign                   = 109
	CPP14ParserAndAssign                   = 110
	CPP14ParserOrAssign                    = 111
	CPP14ParserLeftShiftAssign             = 112
	CPP14ParserRightShiftAssign            = 113
	CPP14ParserEqual                       = 114
	CPP14ParserNotEqual                    = 115
	CPP14ParserLessEqual                   = 116
	CPP14ParserGreaterEqual                = 117
	CPP14ParserAndAnd                      = 118
	CPP14ParserOrOr                        = 119
	CPP14ParserPlusPlus                    = 120
	CPP14ParserMinusMinus                  = 121
	CPP14ParserComma                       = 122
	CPP14ParserArrowStar                   = 123
	CPP14ParserArrow                       = 124
	CPP14ParserQuestion                    = 125
	CPP14ParserColon                       = 126
	CPP14ParserDoublecolon                 = 127
	CPP14ParserSemi                        = 128
	CPP14ParserDot                         = 129
	CPP14ParserDotStar                     = 130
	CPP14ParserEllipsis                    = 131
	CPP14ParserIdentifier                  = 132
	CPP14ParserDecimalLiteral              = 133
	CPP14ParserOctalLiteral                = 134
	CPP14ParserHexadecimalLiteral          = 135
	CPP14ParserBinaryLiteral               = 136
	CPP14ParserIntegersuffix               = 137
	CPP14ParserUserDefinedIntegerLiteral   = 138
	CPP14ParserUserDefinedFloatingLiteral  = 139
	CPP14ParserUserDefinedStringLiteral    = 140
	CPP14ParserUserDefinedCharacterLiteral = 141
	CPP14ParserWhitespace                  = 142
	CPP14ParserNewline                     = 143
	CPP14ParserBlockComment                = 144
	CPP14ParserLineComment                 = 145
)

// CPP14Parser rules.
const (
	CPP14ParserRULE_translationUnit                 = 0
	CPP14ParserRULE_primaryExpression               = 1
	CPP14ParserRULE_idExpression                    = 2
	CPP14ParserRULE_unqualifiedId                   = 3
	CPP14ParserRULE_qualifiedId                     = 4
	CPP14ParserRULE_nestedNameSpecifier             = 5
	CPP14ParserRULE_lambdaExpression                = 6
	CPP14ParserRULE_lambdaIntroducer                = 7
	CPP14ParserRULE_lambdaCapture                   = 8
	CPP14ParserRULE_captureDefault                  = 9
	CPP14ParserRULE_captureList                     = 10
	CPP14ParserRULE_capture                         = 11
	CPP14ParserRULE_simpleCapture                   = 12
	CPP14ParserRULE_initcapture                     = 13
	CPP14ParserRULE_lambdaDeclarator                = 14
	CPP14ParserRULE_postfixExpression               = 15
	CPP14ParserRULE_typeIdOfTheTypeId               = 16
	CPP14ParserRULE_expressionList                  = 17
	CPP14ParserRULE_pseudoDestructorName            = 18
	CPP14ParserRULE_unaryExpression                 = 19
	CPP14ParserRULE_unaryOperator                   = 20
	CPP14ParserRULE_newOpExpression                 = 21
	CPP14ParserRULE_newOpPlacement                  = 22
	CPP14ParserRULE_newOpTypeId                     = 23
	CPP14ParserRULE_newOpDeclarator                 = 24
	CPP14ParserRULE_noPointerNewDeclarator          = 25
	CPP14ParserRULE_newOpInitializer                = 26
	CPP14ParserRULE_deleteExpression                = 27
	CPP14ParserRULE_noExceptExpression              = 28
	CPP14ParserRULE_castExpression                  = 29
	CPP14ParserRULE_pointerMemberExpression         = 30
	CPP14ParserRULE_multiplicativeExpression        = 31
	CPP14ParserRULE_additiveExpression              = 32
	CPP14ParserRULE_shiftExpression                 = 33
	CPP14ParserRULE_shiftOperator                   = 34
	CPP14ParserRULE_relationalExpression            = 35
	CPP14ParserRULE_equalityExpression              = 36
	CPP14ParserRULE_andExpression                   = 37
	CPP14ParserRULE_exclusiveOrExpression           = 38
	CPP14ParserRULE_inclusiveOrExpression           = 39
	CPP14ParserRULE_logicalAndExpression            = 40
	CPP14ParserRULE_logicalOrExpression             = 41
	CPP14ParserRULE_conditionalExpression           = 42
	CPP14ParserRULE_assignmentExpression            = 43
	CPP14ParserRULE_assignmentOperator              = 44
	CPP14ParserRULE_expression                      = 45
	CPP14ParserRULE_constantExpression              = 46
	CPP14ParserRULE_statement                       = 47
	CPP14ParserRULE_labeledStatement                = 48
	CPP14ParserRULE_expressionStatement             = 49
	CPP14ParserRULE_compoundStatement               = 50
	CPP14ParserRULE_statementSeq                    = 51
	CPP14ParserRULE_selectionStatement              = 52
	CPP14ParserRULE_condition                       = 53
	CPP14ParserRULE_iterationStatement              = 54
	CPP14ParserRULE_forInitStatement                = 55
	CPP14ParserRULE_forRangeDeclaration             = 56
	CPP14ParserRULE_forRangeInitializer             = 57
	CPP14ParserRULE_jumpStatement                   = 58
	CPP14ParserRULE_declarationStatement            = 59
	CPP14ParserRULE_declarationseq                  = 60
	CPP14ParserRULE_declaration                     = 61
	CPP14ParserRULE_blockDeclaration                = 62
	CPP14ParserRULE_aliasDeclaration                = 63
	CPP14ParserRULE_simpleDeclaration               = 64
	CPP14ParserRULE_staticAssertDeclaration         = 65
	CPP14ParserRULE_blankDeclaration                = 66
	CPP14ParserRULE_attributeDeclaration            = 67
	CPP14ParserRULE_declSpecifier                   = 68
	CPP14ParserRULE_declSpecifierSeq                = 69
	CPP14ParserRULE_storageClassSpecifier           = 70
	CPP14ParserRULE_functionSpecifier               = 71
	CPP14ParserRULE_typedefName                     = 72
	CPP14ParserRULE_typeSpecifier                   = 73
	CPP14ParserRULE_trailingTypeSpecifier           = 74
	CPP14ParserRULE_typeSpecifierSeq                = 75
	CPP14ParserRULE_trailingTypeSpecifierSeq        = 76
	CPP14ParserRULE_simpleTypeLengthModifier        = 77
	CPP14ParserRULE_simpleTypeSignednessModifier    = 78
	CPP14ParserRULE_simpleTypeSpecifier             = 79
	CPP14ParserRULE_theTypeName                     = 80
	CPP14ParserRULE_decltypeSpecifier               = 81
	CPP14ParserRULE_elaboratedTypeSpecifier         = 82
	CPP14ParserRULE_enumName                        = 83
	CPP14ParserRULE_enumSpecifier                   = 84
	CPP14ParserRULE_enumHead                        = 85
	CPP14ParserRULE_opaqueEnumDeclaration           = 86
	CPP14ParserRULE_enumkey                         = 87
	CPP14ParserRULE_enumbase                        = 88
	CPP14ParserRULE_enumeratorList                  = 89
	CPP14ParserRULE_enumeratorDefinition            = 90
	CPP14ParserRULE_enumerator                      = 91
	CPP14ParserRULE_namespaceName                   = 92
	CPP14ParserRULE_originalNamespaceName           = 93
	CPP14ParserRULE_namespaceDefinition             = 94
	CPP14ParserRULE_namespaceAlias                  = 95
	CPP14ParserRULE_namespaceAliasDefinition        = 96
	CPP14ParserRULE_qualifiednamespacespecifier     = 97
	CPP14ParserRULE_usingDeclaration                = 98
	CPP14ParserRULE_usingDirective                  = 99
	CPP14ParserRULE_asmDefinition                   = 100
	CPP14ParserRULE_linkageSpecification            = 101
	CPP14ParserRULE_attributeSpecifierSeq           = 102
	CPP14ParserRULE_attributeSpecifier              = 103
	CPP14ParserRULE_alignmentspecifier              = 104
	CPP14ParserRULE_attributeList                   = 105
	CPP14ParserRULE_attribute                       = 106
	CPP14ParserRULE_attributeNamespace              = 107
	CPP14ParserRULE_attributeArgumentClause         = 108
	CPP14ParserRULE_balancedTokenSeq                = 109
	CPP14ParserRULE_balancedtoken                   = 110
	CPP14ParserRULE_initDeclaratorList              = 111
	CPP14ParserRULE_initDeclarator                  = 112
	CPP14ParserRULE_declarator                      = 113
	CPP14ParserRULE_pointerDeclarator               = 114
	CPP14ParserRULE_noPointerDeclarator             = 115
	CPP14ParserRULE_parametersAndQualifiers         = 116
	CPP14ParserRULE_trailingReturnType              = 117
	CPP14ParserRULE_pointerOperator                 = 118
	CPP14ParserRULE_cvqualifierseq                  = 119
	CPP14ParserRULE_cvQualifier                     = 120
	CPP14ParserRULE_refqualifier                    = 121
	CPP14ParserRULE_declaratorid                    = 122
	CPP14ParserRULE_theTypeId                       = 123
	CPP14ParserRULE_abstractDeclarator              = 124
	CPP14ParserRULE_pointerAbstractDeclarator       = 125
	CPP14ParserRULE_noPointerAbstractDeclarator     = 126
	CPP14ParserRULE_abstractPackDeclarator          = 127
	CPP14ParserRULE_noPointerAbstractPackDeclarator = 128
	CPP14ParserRULE_parameterDeclarationClause      = 129
	CPP14ParserRULE_parameterDeclarationList        = 130
	CPP14ParserRULE_parameterDeclaration            = 131
	CPP14ParserRULE_functionDefinition              = 132
	CPP14ParserRULE_functionBody                    = 133
	CPP14ParserRULE_initializer                     = 134
	CPP14ParserRULE_braceOrEqualInitializer         = 135
	CPP14ParserRULE_initializerClause               = 136
	CPP14ParserRULE_initializerList                 = 137
	CPP14ParserRULE_bracedInitList                  = 138
	CPP14ParserRULE_className                       = 139
	CPP14ParserRULE_classSpecifier                  = 140
	CPP14ParserRULE_classHead                       = 141
	CPP14ParserRULE_classHeadName                   = 142
	CPP14ParserRULE_classVirtSpecifier              = 143
	CPP14ParserRULE_classKey                        = 144
	CPP14ParserRULE_memberSpecification             = 145
	CPP14ParserRULE_memberdeclaration               = 146
	CPP14ParserRULE_memberDeclaratorList            = 147
	CPP14ParserRULE_memberDeclarator                = 148
	CPP14ParserRULE_virtualSpecifierSeq             = 149
	CPP14ParserRULE_virtualSpecifier                = 150
	CPP14ParserRULE_baseClause                      = 151
	CPP14ParserRULE_baseSpecifierList               = 152
	CPP14ParserRULE_baseSpecifier                   = 153
	CPP14ParserRULE_classOrDeclType                 = 154
	CPP14ParserRULE_baseTypeSpecifier               = 155
	CPP14ParserRULE_accessSpecifier                 = 156
	CPP14ParserRULE_conversionFunctionId            = 157
	CPP14ParserRULE_conversionTypeId                = 158
	CPP14ParserRULE_conversionDeclarator            = 159
	CPP14ParserRULE_constructorInitializer          = 160
	CPP14ParserRULE_memInitializerList              = 161
	CPP14ParserRULE_memInitializer                  = 162
	CPP14ParserRULE_meminitializerid                = 163
	CPP14ParserRULE_operatorFunctionId              = 164
	CPP14ParserRULE_literalOperatorId               = 165
	CPP14ParserRULE_templateDeclaration             = 166
	CPP14ParserRULE_templateparameterList           = 167
	CPP14ParserRULE_templateParameter               = 168
	CPP14ParserRULE_typeParameter                   = 169
	CPP14ParserRULE_simpleTemplateId                = 170
	CPP14ParserRULE_templateId                      = 171
	CPP14ParserRULE_templateName                    = 172
	CPP14ParserRULE_templateArgumentList            = 173
	CPP14ParserRULE_templateArgument                = 174
	CPP14ParserRULE_typeNameSpecifier               = 175
	CPP14ParserRULE_explicitInstantiation           = 176
	CPP14ParserRULE_explicitSpecialization          = 177
	CPP14ParserRULE_tryBlock                        = 178
	CPP14ParserRULE_functionTryBlock                = 179
	CPP14ParserRULE_handlerSeq                      = 180
	CPP14ParserRULE_handler                         = 181
	CPP14ParserRULE_exceptionDeclaration            = 182
	CPP14ParserRULE_throwExpression                 = 183
	CPP14ParserRULE_exceptionSpecification          = 184
	CPP14ParserRULE_dynamicExceptionSpecification   = 185
	CPP14ParserRULE_typeIdList                      = 186
	CPP14ParserRULE_noeExceptSpecification          = 187
	CPP14ParserRULE_theOperator                     = 188
	CPP14ParserRULE_literal                         = 189
)

// ITranslationUnitContext is an interface to support dynamic dispatch.
type ITranslationUnitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	EOF() antlr.TerminalNode
	Declarationseq() IDeclarationseqContext

	// IsTranslationUnitContext differentiates from other interfaces.
	IsTranslationUnitContext()
}

type TranslationUnitContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTranslationUnitContext() *TranslationUnitContext {
	var p = new(TranslationUnitContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_translationUnit
	return p
}

func InitEmptyTranslationUnitContext(p *TranslationUnitContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_translationUnit
}

func (*TranslationUnitContext) IsTranslationUnitContext() {}

func NewTranslationUnitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TranslationUnitContext {
	var p = new(TranslationUnitContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_translationUnit

	return p
}

func (s *TranslationUnitContext) GetParser() antlr.Parser { return s.parser }

func (s *TranslationUnitContext) EOF() antlr.TerminalNode {
	return s.GetToken(CPP14ParserEOF, 0)
}

func (s *TranslationUnitContext) Declarationseq() IDeclarationseqContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDeclarationseqContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDeclarationseqContext)
}

func (s *TranslationUnitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TranslationUnitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TranslationUnitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitTranslationUnit(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) TranslationUnit() (localctx ITranslationUnitContext) {
	localctx = NewTranslationUnitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, CPP14ParserRULE_translationUnit)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(381)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64((_la-10)) & ^0x3f) == 0 && ((int64(1)<<(_la-10))&1543754443169808157) != 0) || ((int64((_la-74)) & ^0x3f) == 0 && ((int64(1)<<(_la-74))&459384754220313597) != 0) {
		{
			p.SetState(380)
			p.Declarationseq()
		}

	}
	{
		p.SetState(383)
		p.Match(CPP14ParserEOF)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPrimaryExpressionContext is an interface to support dynamic dispatch.
type IPrimaryExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllLiteral() []ILiteralContext
	Literal(i int) ILiteralContext
	This() antlr.TerminalNode
	LeftParen() antlr.TerminalNode
	Expression() IExpressionContext
	RightParen() antlr.TerminalNode
	IdExpression() IIdExpressionContext
	LambdaExpression() ILambdaExpressionContext

	// IsPrimaryExpressionContext differentiates from other interfaces.
	IsPrimaryExpressionContext()
}

type PrimaryExpressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrimaryExpressionContext() *PrimaryExpressionContext {
	var p = new(PrimaryExpressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_primaryExpression
	return p
}

func InitEmptyPrimaryExpressionContext(p *PrimaryExpressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_primaryExpression
}

func (*PrimaryExpressionContext) IsPrimaryExpressionContext() {}

func NewPrimaryExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrimaryExpressionContext {
	var p = new(PrimaryExpressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_primaryExpression

	return p
}

func (s *PrimaryExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *PrimaryExpressionContext) AllLiteral() []ILiteralContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ILiteralContext); ok {
			len++
		}
	}

	tst := make([]ILiteralContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ILiteralContext); ok {
			tst[i] = t.(ILiteralContext)
			i++
		}
	}

	return tst
}

func (s *PrimaryExpressionContext) Literal(i int) ILiteralContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILiteralContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILiteralContext)
}

func (s *PrimaryExpressionContext) This() antlr.TerminalNode {
	return s.GetToken(CPP14ParserThis, 0)
}

func (s *PrimaryExpressionContext) LeftParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, 0)
}

func (s *PrimaryExpressionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PrimaryExpressionContext) RightParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, 0)
}

func (s *PrimaryExpressionContext) IdExpression() IIdExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdExpressionContext)
}

func (s *PrimaryExpressionContext) LambdaExpression() ILambdaExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILambdaExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILambdaExpressionContext)
}

func (s *PrimaryExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimaryExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrimaryExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitPrimaryExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) PrimaryExpression() (localctx IPrimaryExpressionContext) {
	localctx = NewPrimaryExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, CPP14ParserRULE_primaryExpression)
	var _alt int

	p.SetState(397)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserIntegerLiteral, CPP14ParserCharacterLiteral, CPP14ParserFloatingLiteral, CPP14ParserStringLiteral, CPP14ParserBooleanLiteral, CPP14ParserPointerLiteral, CPP14ParserUserDefinedLiteral:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(386)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				{
					p.SetState(385)
					p.Literal()
				}

			default:
				p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
				goto errorExit
			}

			p.SetState(388)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 1, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}

	case CPP14ParserThis:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(390)
			p.Match(CPP14ParserThis)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case CPP14ParserLeftParen:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(391)
			p.Match(CPP14ParserLeftParen)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(392)
			p.Expression()
		}
		{
			p.SetState(393)
			p.Match(CPP14ParserRightParen)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case CPP14ParserDecltype, CPP14ParserOperator, CPP14ParserTilde, CPP14ParserDoublecolon, CPP14ParserIdentifier:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(395)
			p.IdExpression()
		}

	case CPP14ParserLeftBracket:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(396)
			p.LambdaExpression()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIdExpressionContext is an interface to support dynamic dispatch.
type IIdExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	UnqualifiedId() IUnqualifiedIdContext
	QualifiedId() IQualifiedIdContext

	// IsIdExpressionContext differentiates from other interfaces.
	IsIdExpressionContext()
}

type IdExpressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdExpressionContext() *IdExpressionContext {
	var p = new(IdExpressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_idExpression
	return p
}

func InitEmptyIdExpressionContext(p *IdExpressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_idExpression
}

func (*IdExpressionContext) IsIdExpressionContext() {}

func NewIdExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdExpressionContext {
	var p = new(IdExpressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_idExpression

	return p
}

func (s *IdExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *IdExpressionContext) UnqualifiedId() IUnqualifiedIdContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnqualifiedIdContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnqualifiedIdContext)
}

func (s *IdExpressionContext) QualifiedId() IQualifiedIdContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQualifiedIdContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQualifiedIdContext)
}

func (s *IdExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitIdExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) IdExpression() (localctx IIdExpressionContext) {
	localctx = NewIdExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, CPP14ParserRULE_idExpression)
	p.SetState(401)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 3, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(399)
			p.UnqualifiedId()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(400)
			p.QualifiedId()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUnqualifiedIdContext is an interface to support dynamic dispatch.
type IUnqualifiedIdContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() antlr.TerminalNode
	OperatorFunctionId() IOperatorFunctionIdContext
	ConversionFunctionId() IConversionFunctionIdContext
	LiteralOperatorId() ILiteralOperatorIdContext
	Tilde() antlr.TerminalNode
	ClassName() IClassNameContext
	DecltypeSpecifier() IDecltypeSpecifierContext
	TemplateId() ITemplateIdContext

	// IsUnqualifiedIdContext differentiates from other interfaces.
	IsUnqualifiedIdContext()
}

type UnqualifiedIdContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnqualifiedIdContext() *UnqualifiedIdContext {
	var p = new(UnqualifiedIdContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_unqualifiedId
	return p
}

func InitEmptyUnqualifiedIdContext(p *UnqualifiedIdContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_unqualifiedId
}

func (*UnqualifiedIdContext) IsUnqualifiedIdContext() {}

func NewUnqualifiedIdContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnqualifiedIdContext {
	var p = new(UnqualifiedIdContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_unqualifiedId

	return p
}

func (s *UnqualifiedIdContext) GetParser() antlr.Parser { return s.parser }

func (s *UnqualifiedIdContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *UnqualifiedIdContext) OperatorFunctionId() IOperatorFunctionIdContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOperatorFunctionIdContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOperatorFunctionIdContext)
}

func (s *UnqualifiedIdContext) ConversionFunctionId() IConversionFunctionIdContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConversionFunctionIdContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConversionFunctionIdContext)
}

func (s *UnqualifiedIdContext) LiteralOperatorId() ILiteralOperatorIdContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILiteralOperatorIdContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILiteralOperatorIdContext)
}

func (s *UnqualifiedIdContext) Tilde() antlr.TerminalNode {
	return s.GetToken(CPP14ParserTilde, 0)
}

func (s *UnqualifiedIdContext) ClassName() IClassNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClassNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClassNameContext)
}

func (s *UnqualifiedIdContext) DecltypeSpecifier() IDecltypeSpecifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDecltypeSpecifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDecltypeSpecifierContext)
}

func (s *UnqualifiedIdContext) TemplateId() ITemplateIdContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplateIdContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplateIdContext)
}

func (s *UnqualifiedIdContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnqualifiedIdContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UnqualifiedIdContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitUnqualifiedId(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) UnqualifiedId() (localctx IUnqualifiedIdContext) {
	localctx = NewUnqualifiedIdContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, CPP14ParserRULE_unqualifiedId)
	p.SetState(413)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 5, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(403)
			p.Match(CPP14ParserIdentifier)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(404)
			p.OperatorFunctionId()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(405)
			p.ConversionFunctionId()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(406)
			p.LiteralOperatorId()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(407)
			p.Match(CPP14ParserTilde)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(410)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetTokenStream().LA(1) {
		case CPP14ParserIdentifier:
			{
				p.SetState(408)
				p.ClassName()
			}

		case CPP14ParserDecltype:
			{
				p.SetState(409)
				p.DecltypeSpecifier()
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(412)
			p.TemplateId()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IQualifiedIdContext is an interface to support dynamic dispatch.
type IQualifiedIdContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	NestedNameSpecifier() INestedNameSpecifierContext
	UnqualifiedId() IUnqualifiedIdContext
	Template() antlr.TerminalNode

	// IsQualifiedIdContext differentiates from other interfaces.
	IsQualifiedIdContext()
}

type QualifiedIdContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQualifiedIdContext() *QualifiedIdContext {
	var p = new(QualifiedIdContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_qualifiedId
	return p
}

func InitEmptyQualifiedIdContext(p *QualifiedIdContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_qualifiedId
}

func (*QualifiedIdContext) IsQualifiedIdContext() {}

func NewQualifiedIdContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *QualifiedIdContext {
	var p = new(QualifiedIdContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_qualifiedId

	return p
}

func (s *QualifiedIdContext) GetParser() antlr.Parser { return s.parser }

func (s *QualifiedIdContext) NestedNameSpecifier() INestedNameSpecifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INestedNameSpecifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INestedNameSpecifierContext)
}

func (s *QualifiedIdContext) UnqualifiedId() IUnqualifiedIdContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnqualifiedIdContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnqualifiedIdContext)
}

func (s *QualifiedIdContext) Template() antlr.TerminalNode {
	return s.GetToken(CPP14ParserTemplate, 0)
}

func (s *QualifiedIdContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QualifiedIdContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *QualifiedIdContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitQualifiedId(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) QualifiedId() (localctx IQualifiedIdContext) {
	localctx = NewQualifiedIdContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, CPP14ParserRULE_qualifiedId)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(415)
		p.nestedNameSpecifier(0)
	}
	p.SetState(417)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserTemplate {
		{
			p.SetState(416)
			p.Match(CPP14ParserTemplate)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(419)
		p.UnqualifiedId()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INestedNameSpecifierContext is an interface to support dynamic dispatch.
type INestedNameSpecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Doublecolon() antlr.TerminalNode
	TheTypeName() ITheTypeNameContext
	NamespaceName() INamespaceNameContext
	DecltypeSpecifier() IDecltypeSpecifierContext
	NestedNameSpecifier() INestedNameSpecifierContext
	Identifier() antlr.TerminalNode
	SimpleTemplateId() ISimpleTemplateIdContext
	Template() antlr.TerminalNode

	// IsNestedNameSpecifierContext differentiates from other interfaces.
	IsNestedNameSpecifierContext()
}

type NestedNameSpecifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNestedNameSpecifierContext() *NestedNameSpecifierContext {
	var p = new(NestedNameSpecifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_nestedNameSpecifier
	return p
}

func InitEmptyNestedNameSpecifierContext(p *NestedNameSpecifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_nestedNameSpecifier
}

func (*NestedNameSpecifierContext) IsNestedNameSpecifierContext() {}

func NewNestedNameSpecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NestedNameSpecifierContext {
	var p = new(NestedNameSpecifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_nestedNameSpecifier

	return p
}

func (s *NestedNameSpecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *NestedNameSpecifierContext) Doublecolon() antlr.TerminalNode {
	return s.GetToken(CPP14ParserDoublecolon, 0)
}

func (s *NestedNameSpecifierContext) TheTypeName() ITheTypeNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITheTypeNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITheTypeNameContext)
}

func (s *NestedNameSpecifierContext) NamespaceName() INamespaceNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INamespaceNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INamespaceNameContext)
}

func (s *NestedNameSpecifierContext) DecltypeSpecifier() IDecltypeSpecifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDecltypeSpecifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDecltypeSpecifierContext)
}

func (s *NestedNameSpecifierContext) NestedNameSpecifier() INestedNameSpecifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INestedNameSpecifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INestedNameSpecifierContext)
}

func (s *NestedNameSpecifierContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *NestedNameSpecifierContext) SimpleTemplateId() ISimpleTemplateIdContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISimpleTemplateIdContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISimpleTemplateIdContext)
}

func (s *NestedNameSpecifierContext) Template() antlr.TerminalNode {
	return s.GetToken(CPP14ParserTemplate, 0)
}

func (s *NestedNameSpecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NestedNameSpecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NestedNameSpecifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitNestedNameSpecifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) NestedNameSpecifier() (localctx INestedNameSpecifierContext) {
	return p.nestedNameSpecifier(0)
}

func (p *CPP14Parser) nestedNameSpecifier(_p int) (localctx INestedNameSpecifierContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewNestedNameSpecifierContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx INestedNameSpecifierContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 10
	p.EnterRecursionRule(localctx, 10, CPP14ParserRULE_nestedNameSpecifier, _p)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(425)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 7, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(422)
			p.TheTypeName()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	} else if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 7, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(423)
			p.NamespaceName()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	} else if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 7, p.GetParserRuleContext()) == 3 {
		{
			p.SetState(424)
			p.DecltypeSpecifier()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(427)
		p.Match(CPP14ParserDoublecolon)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(440)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 10, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewNestedNameSpecifierContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, CPP14ParserRULE_nestedNameSpecifier)
			p.SetState(429)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				goto errorExit
			}
			p.SetState(435)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 9, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(430)
					p.Match(CPP14ParserIdentifier)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			case 2:
				p.SetState(432)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)

				if _la == CPP14ParserTemplate {
					{
						p.SetState(431)
						p.Match(CPP14ParserTemplate)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				}
				{
					p.SetState(434)
					p.SimpleTemplateId()
				}

			case antlr.ATNInvalidAltNumber:
				goto errorExit
			}
			{
				p.SetState(437)
				p.Match(CPP14ParserDoublecolon)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(442)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 10, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILambdaExpressionContext is an interface to support dynamic dispatch.
type ILambdaExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LambdaIntroducer() ILambdaIntroducerContext
	CompoundStatement() ICompoundStatementContext
	LambdaDeclarator() ILambdaDeclaratorContext

	// IsLambdaExpressionContext differentiates from other interfaces.
	IsLambdaExpressionContext()
}

type LambdaExpressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLambdaExpressionContext() *LambdaExpressionContext {
	var p = new(LambdaExpressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_lambdaExpression
	return p
}

func InitEmptyLambdaExpressionContext(p *LambdaExpressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_lambdaExpression
}

func (*LambdaExpressionContext) IsLambdaExpressionContext() {}

func NewLambdaExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LambdaExpressionContext {
	var p = new(LambdaExpressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_lambdaExpression

	return p
}

func (s *LambdaExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *LambdaExpressionContext) LambdaIntroducer() ILambdaIntroducerContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILambdaIntroducerContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILambdaIntroducerContext)
}

func (s *LambdaExpressionContext) CompoundStatement() ICompoundStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICompoundStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICompoundStatementContext)
}

func (s *LambdaExpressionContext) LambdaDeclarator() ILambdaDeclaratorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILambdaDeclaratorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILambdaDeclaratorContext)
}

func (s *LambdaExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LambdaExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LambdaExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitLambdaExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) LambdaExpression() (localctx ILambdaExpressionContext) {
	localctx = NewLambdaExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, CPP14ParserRULE_lambdaExpression)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(443)
		p.LambdaIntroducer()
	}
	p.SetState(445)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserLeftParen {
		{
			p.SetState(444)
			p.LambdaDeclarator()
		}

	}
	{
		p.SetState(447)
		p.CompoundStatement()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILambdaIntroducerContext is an interface to support dynamic dispatch.
type ILambdaIntroducerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LeftBracket() antlr.TerminalNode
	RightBracket() antlr.TerminalNode
	LambdaCapture() ILambdaCaptureContext

	// IsLambdaIntroducerContext differentiates from other interfaces.
	IsLambdaIntroducerContext()
}

type LambdaIntroducerContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLambdaIntroducerContext() *LambdaIntroducerContext {
	var p = new(LambdaIntroducerContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_lambdaIntroducer
	return p
}

func InitEmptyLambdaIntroducerContext(p *LambdaIntroducerContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_lambdaIntroducer
}

func (*LambdaIntroducerContext) IsLambdaIntroducerContext() {}

func NewLambdaIntroducerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LambdaIntroducerContext {
	var p = new(LambdaIntroducerContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_lambdaIntroducer

	return p
}

func (s *LambdaIntroducerContext) GetParser() antlr.Parser { return s.parser }

func (s *LambdaIntroducerContext) LeftBracket() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftBracket, 0)
}

func (s *LambdaIntroducerContext) RightBracket() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightBracket, 0)
}

func (s *LambdaIntroducerContext) LambdaCapture() ILambdaCaptureContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILambdaCaptureContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILambdaCaptureContext)
}

func (s *LambdaIntroducerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LambdaIntroducerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LambdaIntroducerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitLambdaIntroducer(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) LambdaIntroducer() (localctx ILambdaIntroducerContext) {
	localctx = NewLambdaIntroducerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, CPP14ParserRULE_lambdaIntroducer)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(449)
		p.Match(CPP14ParserLeftBracket)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(451)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if (int64((_la-69)) & ^0x3f) == 0 && ((int64(1)<<(_la-69))&-9223372032291373055) != 0 {
		{
			p.SetState(450)
			p.LambdaCapture()
		}

	}
	{
		p.SetState(453)
		p.Match(CPP14ParserRightBracket)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILambdaCaptureContext is an interface to support dynamic dispatch.
type ILambdaCaptureContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CaptureList() ICaptureListContext
	CaptureDefault() ICaptureDefaultContext
	Comma() antlr.TerminalNode

	// IsLambdaCaptureContext differentiates from other interfaces.
	IsLambdaCaptureContext()
}

type LambdaCaptureContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLambdaCaptureContext() *LambdaCaptureContext {
	var p = new(LambdaCaptureContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_lambdaCapture
	return p
}

func InitEmptyLambdaCaptureContext(p *LambdaCaptureContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_lambdaCapture
}

func (*LambdaCaptureContext) IsLambdaCaptureContext() {}

func NewLambdaCaptureContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LambdaCaptureContext {
	var p = new(LambdaCaptureContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_lambdaCapture

	return p
}

func (s *LambdaCaptureContext) GetParser() antlr.Parser { return s.parser }

func (s *LambdaCaptureContext) CaptureList() ICaptureListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICaptureListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICaptureListContext)
}

func (s *LambdaCaptureContext) CaptureDefault() ICaptureDefaultContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICaptureDefaultContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICaptureDefaultContext)
}

func (s *LambdaCaptureContext) Comma() antlr.TerminalNode {
	return s.GetToken(CPP14ParserComma, 0)
}

func (s *LambdaCaptureContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LambdaCaptureContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LambdaCaptureContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitLambdaCapture(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) LambdaCapture() (localctx ILambdaCaptureContext) {
	localctx = NewLambdaCaptureContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, CPP14ParserRULE_lambdaCapture)
	var _la int

	p.SetState(461)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 14, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(455)
			p.CaptureList()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(456)
			p.CaptureDefault()
		}
		p.SetState(459)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == CPP14ParserComma {
			{
				p.SetState(457)
				p.Match(CPP14ParserComma)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(458)
				p.CaptureList()
			}

		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICaptureDefaultContext is an interface to support dynamic dispatch.
type ICaptureDefaultContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	And() antlr.TerminalNode
	Assign() antlr.TerminalNode

	// IsCaptureDefaultContext differentiates from other interfaces.
	IsCaptureDefaultContext()
}

type CaptureDefaultContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCaptureDefaultContext() *CaptureDefaultContext {
	var p = new(CaptureDefaultContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_captureDefault
	return p
}

func InitEmptyCaptureDefaultContext(p *CaptureDefaultContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_captureDefault
}

func (*CaptureDefaultContext) IsCaptureDefaultContext() {}

func NewCaptureDefaultContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CaptureDefaultContext {
	var p = new(CaptureDefaultContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_captureDefault

	return p
}

func (s *CaptureDefaultContext) GetParser() antlr.Parser { return s.parser }

func (s *CaptureDefaultContext) And() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAnd, 0)
}

func (s *CaptureDefaultContext) Assign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAssign, 0)
}

func (s *CaptureDefaultContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CaptureDefaultContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CaptureDefaultContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitCaptureDefault(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) CaptureDefault() (localctx ICaptureDefaultContext) {
	localctx = NewCaptureDefaultContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, CPP14ParserRULE_captureDefault)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(463)
		_la = p.GetTokenStream().LA(1)

		if !(_la == CPP14ParserAnd || _la == CPP14ParserAssign) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICaptureListContext is an interface to support dynamic dispatch.
type ICaptureListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllCapture() []ICaptureContext
	Capture(i int) ICaptureContext
	AllComma() []antlr.TerminalNode
	Comma(i int) antlr.TerminalNode
	Ellipsis() antlr.TerminalNode

	// IsCaptureListContext differentiates from other interfaces.
	IsCaptureListContext()
}

type CaptureListContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCaptureListContext() *CaptureListContext {
	var p = new(CaptureListContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_captureList
	return p
}

func InitEmptyCaptureListContext(p *CaptureListContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_captureList
}

func (*CaptureListContext) IsCaptureListContext() {}

func NewCaptureListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CaptureListContext {
	var p = new(CaptureListContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_captureList

	return p
}

func (s *CaptureListContext) GetParser() antlr.Parser { return s.parser }

func (s *CaptureListContext) AllCapture() []ICaptureContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ICaptureContext); ok {
			len++
		}
	}

	tst := make([]ICaptureContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ICaptureContext); ok {
			tst[i] = t.(ICaptureContext)
			i++
		}
	}

	return tst
}

func (s *CaptureListContext) Capture(i int) ICaptureContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICaptureContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICaptureContext)
}

func (s *CaptureListContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserComma)
}

func (s *CaptureListContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserComma, i)
}

func (s *CaptureListContext) Ellipsis() antlr.TerminalNode {
	return s.GetToken(CPP14ParserEllipsis, 0)
}

func (s *CaptureListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CaptureListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CaptureListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitCaptureList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) CaptureList() (localctx ICaptureListContext) {
	localctx = NewCaptureListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, CPP14ParserRULE_captureList)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(465)
		p.Capture()
	}
	p.SetState(470)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == CPP14ParserComma {
		{
			p.SetState(466)
			p.Match(CPP14ParserComma)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(467)
			p.Capture()
		}

		p.SetState(472)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(474)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserEllipsis {
		{
			p.SetState(473)
			p.Match(CPP14ParserEllipsis)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICaptureContext is an interface to support dynamic dispatch.
type ICaptureContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SimpleCapture() ISimpleCaptureContext
	Initcapture() IInitcaptureContext

	// IsCaptureContext differentiates from other interfaces.
	IsCaptureContext()
}

type CaptureContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCaptureContext() *CaptureContext {
	var p = new(CaptureContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_capture
	return p
}

func InitEmptyCaptureContext(p *CaptureContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_capture
}

func (*CaptureContext) IsCaptureContext() {}

func NewCaptureContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CaptureContext {
	var p = new(CaptureContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_capture

	return p
}

func (s *CaptureContext) GetParser() antlr.Parser { return s.parser }

func (s *CaptureContext) SimpleCapture() ISimpleCaptureContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISimpleCaptureContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISimpleCaptureContext)
}

func (s *CaptureContext) Initcapture() IInitcaptureContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInitcaptureContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInitcaptureContext)
}

func (s *CaptureContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CaptureContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CaptureContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitCapture(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) Capture() (localctx ICaptureContext) {
	localctx = NewCaptureContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, CPP14ParserRULE_capture)
	p.SetState(478)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 17, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(476)
			p.SimpleCapture()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(477)
			p.Initcapture()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISimpleCaptureContext is an interface to support dynamic dispatch.
type ISimpleCaptureContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() antlr.TerminalNode
	And() antlr.TerminalNode
	This() antlr.TerminalNode

	// IsSimpleCaptureContext differentiates from other interfaces.
	IsSimpleCaptureContext()
}

type SimpleCaptureContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySimpleCaptureContext() *SimpleCaptureContext {
	var p = new(SimpleCaptureContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_simpleCapture
	return p
}

func InitEmptySimpleCaptureContext(p *SimpleCaptureContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_simpleCapture
}

func (*SimpleCaptureContext) IsSimpleCaptureContext() {}

func NewSimpleCaptureContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SimpleCaptureContext {
	var p = new(SimpleCaptureContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_simpleCapture

	return p
}

func (s *SimpleCaptureContext) GetParser() antlr.Parser { return s.parser }

func (s *SimpleCaptureContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *SimpleCaptureContext) And() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAnd, 0)
}

func (s *SimpleCaptureContext) This() antlr.TerminalNode {
	return s.GetToken(CPP14ParserThis, 0)
}

func (s *SimpleCaptureContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SimpleCaptureContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SimpleCaptureContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitSimpleCapture(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) SimpleCapture() (localctx ISimpleCaptureContext) {
	localctx = NewSimpleCaptureContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, CPP14ParserRULE_simpleCapture)
	var _la int

	p.SetState(485)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserAnd, CPP14ParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(481)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == CPP14ParserAnd {
			{
				p.SetState(480)
				p.Match(CPP14ParserAnd)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(483)
			p.Match(CPP14ParserIdentifier)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case CPP14ParserThis:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(484)
			p.Match(CPP14ParserThis)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IInitcaptureContext is an interface to support dynamic dispatch.
type IInitcaptureContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() antlr.TerminalNode
	Initializer() IInitializerContext
	And() antlr.TerminalNode

	// IsInitcaptureContext differentiates from other interfaces.
	IsInitcaptureContext()
}

type InitcaptureContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInitcaptureContext() *InitcaptureContext {
	var p = new(InitcaptureContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_initcapture
	return p
}

func InitEmptyInitcaptureContext(p *InitcaptureContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_initcapture
}

func (*InitcaptureContext) IsInitcaptureContext() {}

func NewInitcaptureContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InitcaptureContext {
	var p = new(InitcaptureContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_initcapture

	return p
}

func (s *InitcaptureContext) GetParser() antlr.Parser { return s.parser }

func (s *InitcaptureContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *InitcaptureContext) Initializer() IInitializerContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInitializerContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInitializerContext)
}

func (s *InitcaptureContext) And() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAnd, 0)
}

func (s *InitcaptureContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InitcaptureContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InitcaptureContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitInitcapture(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) Initcapture() (localctx IInitcaptureContext) {
	localctx = NewInitcaptureContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, CPP14ParserRULE_initcapture)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(488)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserAnd {
		{
			p.SetState(487)
			p.Match(CPP14ParserAnd)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(490)
		p.Match(CPP14ParserIdentifier)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(491)
		p.Initializer()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILambdaDeclaratorContext is an interface to support dynamic dispatch.
type ILambdaDeclaratorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LeftParen() antlr.TerminalNode
	RightParen() antlr.TerminalNode
	ParameterDeclarationClause() IParameterDeclarationClauseContext
	Mutable() antlr.TerminalNode
	ExceptionSpecification() IExceptionSpecificationContext
	AttributeSpecifierSeq() IAttributeSpecifierSeqContext
	TrailingReturnType() ITrailingReturnTypeContext

	// IsLambdaDeclaratorContext differentiates from other interfaces.
	IsLambdaDeclaratorContext()
}

type LambdaDeclaratorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLambdaDeclaratorContext() *LambdaDeclaratorContext {
	var p = new(LambdaDeclaratorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_lambdaDeclarator
	return p
}

func InitEmptyLambdaDeclaratorContext(p *LambdaDeclaratorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_lambdaDeclarator
}

func (*LambdaDeclaratorContext) IsLambdaDeclaratorContext() {}

func NewLambdaDeclaratorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LambdaDeclaratorContext {
	var p = new(LambdaDeclaratorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_lambdaDeclarator

	return p
}

func (s *LambdaDeclaratorContext) GetParser() antlr.Parser { return s.parser }

func (s *LambdaDeclaratorContext) LeftParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, 0)
}

func (s *LambdaDeclaratorContext) RightParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, 0)
}

func (s *LambdaDeclaratorContext) ParameterDeclarationClause() IParameterDeclarationClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParameterDeclarationClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParameterDeclarationClauseContext)
}

func (s *LambdaDeclaratorContext) Mutable() antlr.TerminalNode {
	return s.GetToken(CPP14ParserMutable, 0)
}

func (s *LambdaDeclaratorContext) ExceptionSpecification() IExceptionSpecificationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExceptionSpecificationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExceptionSpecificationContext)
}

func (s *LambdaDeclaratorContext) AttributeSpecifierSeq() IAttributeSpecifierSeqContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributeSpecifierSeqContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributeSpecifierSeqContext)
}

func (s *LambdaDeclaratorContext) TrailingReturnType() ITrailingReturnTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITrailingReturnTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITrailingReturnTypeContext)
}

func (s *LambdaDeclaratorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LambdaDeclaratorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LambdaDeclaratorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitLambdaDeclarator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) LambdaDeclarator() (localctx ILambdaDeclaratorContext) {
	localctx = NewLambdaDeclaratorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, CPP14ParserRULE_lambdaDeclarator)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(493)
		p.Match(CPP14ParserLeftParen)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(495)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64((_la-10)) & ^0x3f) == 0 && ((int64(1)<<(_la-10))&1237504995584196377) != 0) || ((int64((_la-74)) & ^0x3f) == 0 && ((int64(1)<<(_la-74))&297237575406461917) != 0) {
		{
			p.SetState(494)
			p.ParameterDeclarationClause()
		}

	}
	{
		p.SetState(497)
		p.Match(CPP14ParserRightParen)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(499)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserMutable {
		{
			p.SetState(498)
			p.Match(CPP14ParserMutable)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(502)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserNoexcept || _la == CPP14ParserThrow {
		{
			p.SetState(501)
			p.ExceptionSpecification()
		}

	}
	p.SetState(505)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserAlignas || _la == CPP14ParserLeftBracket {
		{
			p.SetState(504)
			p.AttributeSpecifierSeq()
		}

	}
	p.SetState(508)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserArrow {
		{
			p.SetState(507)
			p.TrailingReturnType()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPostfixExpressionContext is an interface to support dynamic dispatch.
type IPostfixExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	PrimaryExpression() IPrimaryExpressionContext
	SimpleTypeSpecifier() ISimpleTypeSpecifierContext
	TypeNameSpecifier() ITypeNameSpecifierContext
	LeftParen() antlr.TerminalNode
	RightParen() antlr.TerminalNode
	BracedInitList() IBracedInitListContext
	ExpressionList() IExpressionListContext
	Less() antlr.TerminalNode
	TheTypeId() ITheTypeIdContext
	Greater() antlr.TerminalNode
	Expression() IExpressionContext
	Dynamic_cast() antlr.TerminalNode
	Static_cast() antlr.TerminalNode
	Reinterpret_cast() antlr.TerminalNode
	Const_cast() antlr.TerminalNode
	TypeIdOfTheTypeId() ITypeIdOfTheTypeIdContext
	PostfixExpression() IPostfixExpressionContext
	LeftBracket() antlr.TerminalNode
	RightBracket() antlr.TerminalNode
	Dot() antlr.TerminalNode
	Arrow() antlr.TerminalNode
	IdExpression() IIdExpressionContext
	PseudoDestructorName() IPseudoDestructorNameContext
	Template() antlr.TerminalNode
	PlusPlus() antlr.TerminalNode
	MinusMinus() antlr.TerminalNode

	// IsPostfixExpressionContext differentiates from other interfaces.
	IsPostfixExpressionContext()
}

type PostfixExpressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPostfixExpressionContext() *PostfixExpressionContext {
	var p = new(PostfixExpressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_postfixExpression
	return p
}

func InitEmptyPostfixExpressionContext(p *PostfixExpressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_postfixExpression
}

func (*PostfixExpressionContext) IsPostfixExpressionContext() {}

func NewPostfixExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PostfixExpressionContext {
	var p = new(PostfixExpressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_postfixExpression

	return p
}

func (s *PostfixExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *PostfixExpressionContext) PrimaryExpression() IPrimaryExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPrimaryExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPrimaryExpressionContext)
}

func (s *PostfixExpressionContext) SimpleTypeSpecifier() ISimpleTypeSpecifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISimpleTypeSpecifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISimpleTypeSpecifierContext)
}

func (s *PostfixExpressionContext) TypeNameSpecifier() ITypeNameSpecifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeNameSpecifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeNameSpecifierContext)
}

func (s *PostfixExpressionContext) LeftParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, 0)
}

func (s *PostfixExpressionContext) RightParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, 0)
}

func (s *PostfixExpressionContext) BracedInitList() IBracedInitListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBracedInitListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBracedInitListContext)
}

func (s *PostfixExpressionContext) ExpressionList() IExpressionListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *PostfixExpressionContext) Less() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLess, 0)
}

func (s *PostfixExpressionContext) TheTypeId() ITheTypeIdContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITheTypeIdContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITheTypeIdContext)
}

func (s *PostfixExpressionContext) Greater() antlr.TerminalNode {
	return s.GetToken(CPP14ParserGreater, 0)
}

func (s *PostfixExpressionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PostfixExpressionContext) Dynamic_cast() antlr.TerminalNode {
	return s.GetToken(CPP14ParserDynamic_cast, 0)
}

func (s *PostfixExpressionContext) Static_cast() antlr.TerminalNode {
	return s.GetToken(CPP14ParserStatic_cast, 0)
}

func (s *PostfixExpressionContext) Reinterpret_cast() antlr.TerminalNode {
	return s.GetToken(CPP14ParserReinterpret_cast, 0)
}

func (s *PostfixExpressionContext) Const_cast() antlr.TerminalNode {
	return s.GetToken(CPP14ParserConst_cast, 0)
}

func (s *PostfixExpressionContext) TypeIdOfTheTypeId() ITypeIdOfTheTypeIdContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeIdOfTheTypeIdContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeIdOfTheTypeIdContext)
}

func (s *PostfixExpressionContext) PostfixExpression() IPostfixExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPostfixExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPostfixExpressionContext)
}

func (s *PostfixExpressionContext) LeftBracket() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftBracket, 0)
}

func (s *PostfixExpressionContext) RightBracket() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightBracket, 0)
}

func (s *PostfixExpressionContext) Dot() antlr.TerminalNode {
	return s.GetToken(CPP14ParserDot, 0)
}

func (s *PostfixExpressionContext) Arrow() antlr.TerminalNode {
	return s.GetToken(CPP14ParserArrow, 0)
}

func (s *PostfixExpressionContext) IdExpression() IIdExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdExpressionContext)
}

func (s *PostfixExpressionContext) PseudoDestructorName() IPseudoDestructorNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPseudoDestructorNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPseudoDestructorNameContext)
}

func (s *PostfixExpressionContext) Template() antlr.TerminalNode {
	return s.GetToken(CPP14ParserTemplate, 0)
}

func (s *PostfixExpressionContext) PlusPlus() antlr.TerminalNode {
	return s.GetToken(CPP14ParserPlusPlus, 0)
}

func (s *PostfixExpressionContext) MinusMinus() antlr.TerminalNode {
	return s.GetToken(CPP14ParserMinusMinus, 0)
}

func (s *PostfixExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PostfixExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PostfixExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitPostfixExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) PostfixExpression() (localctx IPostfixExpressionContext) {
	return p.postfixExpression(0)
}

func (p *CPP14Parser) postfixExpression(_p int) (localctx IPostfixExpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewPostfixExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IPostfixExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 30
	p.EnterRecursionRule(localctx, 30, CPP14ParserRULE_postfixExpression, _p)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(540)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 30, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(511)
			p.PrimaryExpression()
		}

	case 2:
		p.SetState(514)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetTokenStream().LA(1) {
		case CPP14ParserAuto, CPP14ParserBool, CPP14ParserChar, CPP14ParserChar16, CPP14ParserChar32, CPP14ParserDecltype, CPP14ParserDouble, CPP14ParserFloat, CPP14ParserInt, CPP14ParserLong, CPP14ParserShort, CPP14ParserSigned, CPP14ParserUnsigned, CPP14ParserVoid, CPP14ParserWchar, CPP14ParserDoublecolon, CPP14ParserIdentifier:
			{
				p.SetState(512)
				p.SimpleTypeSpecifier()
			}

		case CPP14ParserTypename_:
			{
				p.SetState(513)
				p.TypeNameSpecifier()
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}
		p.SetState(522)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetTokenStream().LA(1) {
		case CPP14ParserLeftParen:
			{
				p.SetState(516)
				p.Match(CPP14ParserLeftParen)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			p.SetState(518)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&8364979464334764286) != 0) || ((int64((_la-65)) & ^0x3f) == 0 && ((int64(1)<<(_la-65))&4719772474400910417) != 0) || _la == CPP14ParserIdentifier {
				{
					p.SetState(517)
					p.ExpressionList()
				}

			}
			{
				p.SetState(520)
				p.Match(CPP14ParserRightParen)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		case CPP14ParserLeftBrace:
			{
				p.SetState(521)
				p.BracedInitList()
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}

	case 3:
		{
			p.SetState(524)
			_la = p.GetTokenStream().LA(1)

			if !((int64((_la-24)) & ^0x3f) == 0 && ((int64(1)<<(_la-24))&2216203124865) != 0) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(525)
			p.Match(CPP14ParserLess)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(526)
			p.TheTypeId()
		}
		{
			p.SetState(527)
			p.Match(CPP14ParserGreater)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(528)
			p.Match(CPP14ParserLeftParen)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(529)
			p.Expression()
		}
		{
			p.SetState(530)
			p.Match(CPP14ParserRightParen)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 4:
		{
			p.SetState(532)
			p.TypeIdOfTheTypeId()
		}
		{
			p.SetState(533)
			p.Match(CPP14ParserLeftParen)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(536)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 29, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(534)
				p.Expression()
			}

		case 2:
			{
				p.SetState(535)
				p.TheTypeId()
			}

		case antlr.ATNInvalidAltNumber:
			goto errorExit
		}
		{
			p.SetState(538)
			p.Match(CPP14ParserRightParen)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(569)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 36, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(567)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 35, p.GetParserRuleContext()) {
			case 1:
				localctx = NewPostfixExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, CPP14ParserRULE_postfixExpression)
				p.SetState(542)

				if !(p.Precpred(p.GetParserRuleContext(), 7)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 7)", ""))
					goto errorExit
				}
				{
					p.SetState(543)
					p.Match(CPP14ParserLeftBracket)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				p.SetState(546)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}

				switch p.GetTokenStream().LA(1) {
				case CPP14ParserIntegerLiteral, CPP14ParserCharacterLiteral, CPP14ParserFloatingLiteral, CPP14ParserStringLiteral, CPP14ParserBooleanLiteral, CPP14ParserPointerLiteral, CPP14ParserUserDefinedLiteral, CPP14ParserAlignof, CPP14ParserAuto, CPP14ParserBool, CPP14ParserChar, CPP14ParserChar16, CPP14ParserChar32, CPP14ParserConst_cast, CPP14ParserDecltype, CPP14ParserDelete, CPP14ParserDouble, CPP14ParserDynamic_cast, CPP14ParserFloat, CPP14ParserInt, CPP14ParserLong, CPP14ParserNew, CPP14ParserNoexcept, CPP14ParserOperator, CPP14ParserReinterpret_cast, CPP14ParserShort, CPP14ParserSigned, CPP14ParserSizeof, CPP14ParserStatic_cast, CPP14ParserThis, CPP14ParserThrow, CPP14ParserTypeid_, CPP14ParserTypename_, CPP14ParserUnsigned, CPP14ParserVoid, CPP14ParserWchar, CPP14ParserLeftParen, CPP14ParserLeftBracket, CPP14ParserPlus, CPP14ParserMinus, CPP14ParserStar, CPP14ParserAnd, CPP14ParserOr, CPP14ParserTilde, CPP14ParserNot, CPP14ParserPlusPlus, CPP14ParserMinusMinus, CPP14ParserDoublecolon, CPP14ParserIdentifier:
					{
						p.SetState(544)
						p.Expression()
					}

				case CPP14ParserLeftBrace:
					{
						p.SetState(545)
						p.BracedInitList()
					}

				default:
					p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
					goto errorExit
				}
				{
					p.SetState(548)
					p.Match(CPP14ParserRightBracket)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			case 2:
				localctx = NewPostfixExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, CPP14ParserRULE_postfixExpression)
				p.SetState(550)

				if !(p.Precpred(p.GetParserRuleContext(), 6)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 6)", ""))
					goto errorExit
				}
				{
					p.SetState(551)
					p.Match(CPP14ParserLeftParen)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				p.SetState(553)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)

				if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&8364979464334764286) != 0) || ((int64((_la-65)) & ^0x3f) == 0 && ((int64(1)<<(_la-65))&4719772474400910417) != 0) || _la == CPP14ParserIdentifier {
					{
						p.SetState(552)
						p.ExpressionList()
					}

				}
				{
					p.SetState(555)
					p.Match(CPP14ParserRightParen)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			case 3:
				localctx = NewPostfixExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, CPP14ParserRULE_postfixExpression)
				p.SetState(556)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
					goto errorExit
				}
				{
					p.SetState(557)
					_la = p.GetTokenStream().LA(1)

					if !(_la == CPP14ParserArrow || _la == CPP14ParserDot) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				p.SetState(563)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}

				switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 34, p.GetParserRuleContext()) {
				case 1:
					p.SetState(559)
					p.GetErrorHandler().Sync(p)
					if p.HasError() {
						goto errorExit
					}
					_la = p.GetTokenStream().LA(1)

					if _la == CPP14ParserTemplate {
						{
							p.SetState(558)
							p.Match(CPP14ParserTemplate)
							if p.HasError() {
								// Recognition error - abort rule
								goto errorExit
							}
						}

					}
					{
						p.SetState(561)
						p.IdExpression()
					}

				case 2:
					{
						p.SetState(562)
						p.PseudoDestructorName()
					}

				case antlr.ATNInvalidAltNumber:
					goto errorExit
				}

			case 4:
				localctx = NewPostfixExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, CPP14ParserRULE_postfixExpression)
				p.SetState(565)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
					goto errorExit
				}
				{
					p.SetState(566)
					_la = p.GetTokenStream().LA(1)

					if !(_la == CPP14ParserPlusPlus || _la == CPP14ParserMinusMinus) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}

			case antlr.ATNInvalidAltNumber:
				goto errorExit
			}

		}
		p.SetState(571)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 36, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITypeIdOfTheTypeIdContext is an interface to support dynamic dispatch.
type ITypeIdOfTheTypeIdContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Typeid_() antlr.TerminalNode

	// IsTypeIdOfTheTypeIdContext differentiates from other interfaces.
	IsTypeIdOfTheTypeIdContext()
}

type TypeIdOfTheTypeIdContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeIdOfTheTypeIdContext() *TypeIdOfTheTypeIdContext {
	var p = new(TypeIdOfTheTypeIdContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_typeIdOfTheTypeId
	return p
}

func InitEmptyTypeIdOfTheTypeIdContext(p *TypeIdOfTheTypeIdContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_typeIdOfTheTypeId
}

func (*TypeIdOfTheTypeIdContext) IsTypeIdOfTheTypeIdContext() {}

func NewTypeIdOfTheTypeIdContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeIdOfTheTypeIdContext {
	var p = new(TypeIdOfTheTypeIdContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_typeIdOfTheTypeId

	return p
}

func (s *TypeIdOfTheTypeIdContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeIdOfTheTypeIdContext) Typeid_() antlr.TerminalNode {
	return s.GetToken(CPP14ParserTypeid_, 0)
}

func (s *TypeIdOfTheTypeIdContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeIdOfTheTypeIdContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeIdOfTheTypeIdContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitTypeIdOfTheTypeId(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) TypeIdOfTheTypeId() (localctx ITypeIdOfTheTypeIdContext) {
	localctx = NewTypeIdOfTheTypeIdContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, CPP14ParserRULE_typeIdOfTheTypeId)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(572)
		p.Match(CPP14ParserTypeid_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExpressionListContext is an interface to support dynamic dispatch.
type IExpressionListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	InitializerList() IInitializerListContext

	// IsExpressionListContext differentiates from other interfaces.
	IsExpressionListContext()
}

type ExpressionListContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionListContext() *ExpressionListContext {
	var p = new(ExpressionListContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_expressionList
	return p
}

func InitEmptyExpressionListContext(p *ExpressionListContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_expressionList
}

func (*ExpressionListContext) IsExpressionListContext() {}

func NewExpressionListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionListContext {
	var p = new(ExpressionListContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_expressionList

	return p
}

func (s *ExpressionListContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionListContext) InitializerList() IInitializerListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInitializerListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInitializerListContext)
}

func (s *ExpressionListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitExpressionList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) ExpressionList() (localctx IExpressionListContext) {
	localctx = NewExpressionListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, CPP14ParserRULE_expressionList)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(574)
		p.InitializerList()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPseudoDestructorNameContext is an interface to support dynamic dispatch.
type IPseudoDestructorNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Tilde() antlr.TerminalNode
	AllTheTypeName() []ITheTypeNameContext
	TheTypeName(i int) ITheTypeNameContext
	NestedNameSpecifier() INestedNameSpecifierContext
	Doublecolon() antlr.TerminalNode
	Template() antlr.TerminalNode
	SimpleTemplateId() ISimpleTemplateIdContext
	DecltypeSpecifier() IDecltypeSpecifierContext

	// IsPseudoDestructorNameContext differentiates from other interfaces.
	IsPseudoDestructorNameContext()
}

type PseudoDestructorNameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPseudoDestructorNameContext() *PseudoDestructorNameContext {
	var p = new(PseudoDestructorNameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_pseudoDestructorName
	return p
}

func InitEmptyPseudoDestructorNameContext(p *PseudoDestructorNameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_pseudoDestructorName
}

func (*PseudoDestructorNameContext) IsPseudoDestructorNameContext() {}

func NewPseudoDestructorNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PseudoDestructorNameContext {
	var p = new(PseudoDestructorNameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_pseudoDestructorName

	return p
}

func (s *PseudoDestructorNameContext) GetParser() antlr.Parser { return s.parser }

func (s *PseudoDestructorNameContext) Tilde() antlr.TerminalNode {
	return s.GetToken(CPP14ParserTilde, 0)
}

func (s *PseudoDestructorNameContext) AllTheTypeName() []ITheTypeNameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITheTypeNameContext); ok {
			len++
		}
	}

	tst := make([]ITheTypeNameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITheTypeNameContext); ok {
			tst[i] = t.(ITheTypeNameContext)
			i++
		}
	}

	return tst
}

func (s *PseudoDestructorNameContext) TheTypeName(i int) ITheTypeNameContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITheTypeNameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITheTypeNameContext)
}

func (s *PseudoDestructorNameContext) NestedNameSpecifier() INestedNameSpecifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INestedNameSpecifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INestedNameSpecifierContext)
}

func (s *PseudoDestructorNameContext) Doublecolon() antlr.TerminalNode {
	return s.GetToken(CPP14ParserDoublecolon, 0)
}

func (s *PseudoDestructorNameContext) Template() antlr.TerminalNode {
	return s.GetToken(CPP14ParserTemplate, 0)
}

func (s *PseudoDestructorNameContext) SimpleTemplateId() ISimpleTemplateIdContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISimpleTemplateIdContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISimpleTemplateIdContext)
}

func (s *PseudoDestructorNameContext) DecltypeSpecifier() IDecltypeSpecifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDecltypeSpecifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDecltypeSpecifierContext)
}

func (s *PseudoDestructorNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PseudoDestructorNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PseudoDestructorNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitPseudoDestructorName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) PseudoDestructorName() (localctx IPseudoDestructorNameContext) {
	localctx = NewPseudoDestructorNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, CPP14ParserRULE_pseudoDestructorName)
	var _la int

	p.SetState(595)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 39, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(577)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 37, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(576)
				p.nestedNameSpecifier(0)
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(582)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == CPP14ParserIdentifier {
			{
				p.SetState(579)
				p.TheTypeName()
			}
			{
				p.SetState(580)
				p.Match(CPP14ParserDoublecolon)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(584)
			p.Match(CPP14ParserTilde)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(585)
			p.TheTypeName()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(586)
			p.nestedNameSpecifier(0)
		}
		{
			p.SetState(587)
			p.Match(CPP14ParserTemplate)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(588)
			p.SimpleTemplateId()
		}
		{
			p.SetState(589)
			p.Match(CPP14ParserDoublecolon)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(590)
			p.Match(CPP14ParserTilde)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(591)
			p.TheTypeName()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(593)
			p.Match(CPP14ParserTilde)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(594)
			p.DecltypeSpecifier()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUnaryExpressionContext is an interface to support dynamic dispatch.
type IUnaryExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	PostfixExpression() IPostfixExpressionContext
	UnaryExpression() IUnaryExpressionContext
	PlusPlus() antlr.TerminalNode
	MinusMinus() antlr.TerminalNode
	UnaryOperator() IUnaryOperatorContext
	Sizeof() antlr.TerminalNode
	LeftParen() antlr.TerminalNode
	TheTypeId() ITheTypeIdContext
	RightParen() antlr.TerminalNode
	Ellipsis() antlr.TerminalNode
	Identifier() antlr.TerminalNode
	Alignof() antlr.TerminalNode
	NoExceptExpression() INoExceptExpressionContext
	NewOpExpression() INewOpExpressionContext
	DeleteExpression() IDeleteExpressionContext

	// IsUnaryExpressionContext differentiates from other interfaces.
	IsUnaryExpressionContext()
}

type UnaryExpressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnaryExpressionContext() *UnaryExpressionContext {
	var p = new(UnaryExpressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_unaryExpression
	return p
}

func InitEmptyUnaryExpressionContext(p *UnaryExpressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_unaryExpression
}

func (*UnaryExpressionContext) IsUnaryExpressionContext() {}

func NewUnaryExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnaryExpressionContext {
	var p = new(UnaryExpressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_unaryExpression

	return p
}

func (s *UnaryExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *UnaryExpressionContext) PostfixExpression() IPostfixExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPostfixExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPostfixExpressionContext)
}

func (s *UnaryExpressionContext) UnaryExpression() IUnaryExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnaryExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnaryExpressionContext)
}

func (s *UnaryExpressionContext) PlusPlus() antlr.TerminalNode {
	return s.GetToken(CPP14ParserPlusPlus, 0)
}

func (s *UnaryExpressionContext) MinusMinus() antlr.TerminalNode {
	return s.GetToken(CPP14ParserMinusMinus, 0)
}

func (s *UnaryExpressionContext) UnaryOperator() IUnaryOperatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnaryOperatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnaryOperatorContext)
}

func (s *UnaryExpressionContext) Sizeof() antlr.TerminalNode {
	return s.GetToken(CPP14ParserSizeof, 0)
}

func (s *UnaryExpressionContext) LeftParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, 0)
}

func (s *UnaryExpressionContext) TheTypeId() ITheTypeIdContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITheTypeIdContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITheTypeIdContext)
}

func (s *UnaryExpressionContext) RightParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, 0)
}

func (s *UnaryExpressionContext) Ellipsis() antlr.TerminalNode {
	return s.GetToken(CPP14ParserEllipsis, 0)
}

func (s *UnaryExpressionContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *UnaryExpressionContext) Alignof() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAlignof, 0)
}

func (s *UnaryExpressionContext) NoExceptExpression() INoExceptExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INoExceptExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INoExceptExpressionContext)
}

func (s *UnaryExpressionContext) NewOpExpression() INewOpExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INewOpExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INewOpExpressionContext)
}

func (s *UnaryExpressionContext) DeleteExpression() IDeleteExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDeleteExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDeleteExpressionContext)
}

func (s *UnaryExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnaryExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UnaryExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitUnaryExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) UnaryExpression() (localctx IUnaryExpressionContext) {
	localctx = NewUnaryExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, CPP14ParserRULE_unaryExpression)
	p.SetState(624)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 42, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(597)
			p.postfixExpression(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(602)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetTokenStream().LA(1) {
		case CPP14ParserPlusPlus:
			{
				p.SetState(598)
				p.Match(CPP14ParserPlusPlus)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		case CPP14ParserMinusMinus:
			{
				p.SetState(599)
				p.Match(CPP14ParserMinusMinus)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		case CPP14ParserPlus, CPP14ParserMinus, CPP14ParserStar, CPP14ParserAnd, CPP14ParserOr, CPP14ParserTilde, CPP14ParserNot:
			{
				p.SetState(600)
				p.UnaryOperator()
			}

		case CPP14ParserSizeof:
			{
				p.SetState(601)
				p.Match(CPP14ParserSizeof)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}
		{
			p.SetState(604)
			p.UnaryExpression()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(605)
			p.Match(CPP14ParserSizeof)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(614)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetTokenStream().LA(1) {
		case CPP14ParserLeftParen:
			{
				p.SetState(606)
				p.Match(CPP14ParserLeftParen)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(607)
				p.TheTypeId()
			}
			{
				p.SetState(608)
				p.Match(CPP14ParserRightParen)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		case CPP14ParserEllipsis:
			{
				p.SetState(610)
				p.Match(CPP14ParserEllipsis)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(611)
				p.Match(CPP14ParserLeftParen)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(612)
				p.Match(CPP14ParserIdentifier)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(613)
				p.Match(CPP14ParserRightParen)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(616)
			p.Match(CPP14ParserAlignof)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(617)
			p.Match(CPP14ParserLeftParen)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(618)
			p.TheTypeId()
		}
		{
			p.SetState(619)
			p.Match(CPP14ParserRightParen)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(621)
			p.NoExceptExpression()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(622)
			p.NewOpExpression()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(623)
			p.DeleteExpression()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUnaryOperatorContext is an interface to support dynamic dispatch.
type IUnaryOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Or() antlr.TerminalNode
	Star() antlr.TerminalNode
	And() antlr.TerminalNode
	Plus() antlr.TerminalNode
	Tilde() antlr.TerminalNode
	Minus() antlr.TerminalNode
	Not() antlr.TerminalNode

	// IsUnaryOperatorContext differentiates from other interfaces.
	IsUnaryOperatorContext()
}

type UnaryOperatorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnaryOperatorContext() *UnaryOperatorContext {
	var p = new(UnaryOperatorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_unaryOperator
	return p
}

func InitEmptyUnaryOperatorContext(p *UnaryOperatorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_unaryOperator
}

func (*UnaryOperatorContext) IsUnaryOperatorContext() {}

func NewUnaryOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnaryOperatorContext {
	var p = new(UnaryOperatorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_unaryOperator

	return p
}

func (s *UnaryOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *UnaryOperatorContext) Or() antlr.TerminalNode {
	return s.GetToken(CPP14ParserOr, 0)
}

func (s *UnaryOperatorContext) Star() antlr.TerminalNode {
	return s.GetToken(CPP14ParserStar, 0)
}

func (s *UnaryOperatorContext) And() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAnd, 0)
}

func (s *UnaryOperatorContext) Plus() antlr.TerminalNode {
	return s.GetToken(CPP14ParserPlus, 0)
}

func (s *UnaryOperatorContext) Tilde() antlr.TerminalNode {
	return s.GetToken(CPP14ParserTilde, 0)
}

func (s *UnaryOperatorContext) Minus() antlr.TerminalNode {
	return s.GetToken(CPP14ParserMinus, 0)
}

func (s *UnaryOperatorContext) Not() antlr.TerminalNode {
	return s.GetToken(CPP14ParserNot, 0)
}

func (s *UnaryOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnaryOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UnaryOperatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitUnaryOperator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) UnaryOperator() (localctx IUnaryOperatorContext) {
	localctx = NewUnaryOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, CPP14ParserRULE_unaryOperator)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(626)
		_la = p.GetTokenStream().LA(1)

		if !((int64((_la-91)) & ^0x3f) == 0 && ((int64(1)<<(_la-91))&967) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INewOpExpressionContext is an interface to support dynamic dispatch.
type INewOpExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	New() antlr.TerminalNode
	NewOpTypeId() INewOpTypeIdContext
	Doublecolon() antlr.TerminalNode
	NewOpPlacement() INewOpPlacementContext
	NewOpInitializer() INewOpInitializerContext
	LeftParen() antlr.TerminalNode
	TheTypeId() ITheTypeIdContext
	RightParen() antlr.TerminalNode

	// IsNewOpExpressionContext differentiates from other interfaces.
	IsNewOpExpressionContext()
}

type NewOpExpressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNewOpExpressionContext() *NewOpExpressionContext {
	var p = new(NewOpExpressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_newOpExpression
	return p
}

func InitEmptyNewOpExpressionContext(p *NewOpExpressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_newOpExpression
}

func (*NewOpExpressionContext) IsNewOpExpressionContext() {}

func NewNewOpExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NewOpExpressionContext {
	var p = new(NewOpExpressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_newOpExpression

	return p
}

func (s *NewOpExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *NewOpExpressionContext) New() antlr.TerminalNode {
	return s.GetToken(CPP14ParserNew, 0)
}

func (s *NewOpExpressionContext) NewOpTypeId() INewOpTypeIdContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INewOpTypeIdContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INewOpTypeIdContext)
}

func (s *NewOpExpressionContext) Doublecolon() antlr.TerminalNode {
	return s.GetToken(CPP14ParserDoublecolon, 0)
}

func (s *NewOpExpressionContext) NewOpPlacement() INewOpPlacementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INewOpPlacementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INewOpPlacementContext)
}

func (s *NewOpExpressionContext) NewOpInitializer() INewOpInitializerContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INewOpInitializerContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INewOpInitializerContext)
}

func (s *NewOpExpressionContext) LeftParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, 0)
}

func (s *NewOpExpressionContext) TheTypeId() ITheTypeIdContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITheTypeIdContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITheTypeIdContext)
}

func (s *NewOpExpressionContext) RightParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, 0)
}

func (s *NewOpExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NewOpExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NewOpExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitNewOpExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) NewOpExpression() (localctx INewOpExpressionContext) {
	localctx = NewNewOpExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, CPP14ParserRULE_newOpExpression)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(629)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserDoublecolon {
		{
			p.SetState(628)
			p.Match(CPP14ParserDoublecolon)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(631)
		p.Match(CPP14ParserNew)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(633)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 44, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(632)
			p.NewOpPlacement()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(640)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserAuto, CPP14ParserBool, CPP14ParserChar, CPP14ParserChar16, CPP14ParserChar32, CPP14ParserClass, CPP14ParserConst, CPP14ParserDecltype, CPP14ParserDouble, CPP14ParserEnum, CPP14ParserFloat, CPP14ParserInt, CPP14ParserLong, CPP14ParserShort, CPP14ParserSigned, CPP14ParserStruct, CPP14ParserTypename_, CPP14ParserUnion, CPP14ParserUnsigned, CPP14ParserVoid, CPP14ParserVolatile, CPP14ParserWchar, CPP14ParserDoublecolon, CPP14ParserIdentifier:
		{
			p.SetState(635)
			p.NewOpTypeId()
		}

	case CPP14ParserLeftParen:
		{
			p.SetState(636)
			p.Match(CPP14ParserLeftParen)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(637)
			p.TheTypeId()
		}
		{
			p.SetState(638)
			p.Match(CPP14ParserRightParen)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}
	p.SetState(643)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserLeftParen || _la == CPP14ParserLeftBrace {
		{
			p.SetState(642)
			p.NewOpInitializer()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INewOpPlacementContext is an interface to support dynamic dispatch.
type INewOpPlacementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LeftParen() antlr.TerminalNode
	ExpressionList() IExpressionListContext
	RightParen() antlr.TerminalNode

	// IsNewOpPlacementContext differentiates from other interfaces.
	IsNewOpPlacementContext()
}

type NewOpPlacementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNewOpPlacementContext() *NewOpPlacementContext {
	var p = new(NewOpPlacementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_newOpPlacement
	return p
}

func InitEmptyNewOpPlacementContext(p *NewOpPlacementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_newOpPlacement
}

func (*NewOpPlacementContext) IsNewOpPlacementContext() {}

func NewNewOpPlacementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NewOpPlacementContext {
	var p = new(NewOpPlacementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_newOpPlacement

	return p
}

func (s *NewOpPlacementContext) GetParser() antlr.Parser { return s.parser }

func (s *NewOpPlacementContext) LeftParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, 0)
}

func (s *NewOpPlacementContext) ExpressionList() IExpressionListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *NewOpPlacementContext) RightParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, 0)
}

func (s *NewOpPlacementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NewOpPlacementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NewOpPlacementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitNewOpPlacement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) NewOpPlacement() (localctx INewOpPlacementContext) {
	localctx = NewNewOpPlacementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, CPP14ParserRULE_newOpPlacement)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(645)
		p.Match(CPP14ParserLeftParen)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(646)
		p.ExpressionList()
	}
	{
		p.SetState(647)
		p.Match(CPP14ParserRightParen)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INewOpTypeIdContext is an interface to support dynamic dispatch.
type INewOpTypeIdContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	TypeSpecifierSeq() ITypeSpecifierSeqContext
	NewOpDeclarator() INewOpDeclaratorContext

	// IsNewOpTypeIdContext differentiates from other interfaces.
	IsNewOpTypeIdContext()
}

type NewOpTypeIdContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNewOpTypeIdContext() *NewOpTypeIdContext {
	var p = new(NewOpTypeIdContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_newOpTypeId
	return p
}

func InitEmptyNewOpTypeIdContext(p *NewOpTypeIdContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_newOpTypeId
}

func (*NewOpTypeIdContext) IsNewOpTypeIdContext() {}

func NewNewOpTypeIdContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NewOpTypeIdContext {
	var p = new(NewOpTypeIdContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_newOpTypeId

	return p
}

func (s *NewOpTypeIdContext) GetParser() antlr.Parser { return s.parser }

func (s *NewOpTypeIdContext) TypeSpecifierSeq() ITypeSpecifierSeqContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeSpecifierSeqContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeSpecifierSeqContext)
}

func (s *NewOpTypeIdContext) NewOpDeclarator() INewOpDeclaratorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INewOpDeclaratorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INewOpDeclaratorContext)
}

func (s *NewOpTypeIdContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NewOpTypeIdContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NewOpTypeIdContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitNewOpTypeId(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) NewOpTypeId() (localctx INewOpTypeIdContext) {
	localctx = NewNewOpTypeIdContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, CPP14ParserRULE_newOpTypeId)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(649)
		p.TypeSpecifierSeq()
	}
	p.SetState(651)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 47, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(650)
			p.NewOpDeclarator()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INewOpDeclaratorContext is an interface to support dynamic dispatch.
type INewOpDeclaratorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	PointerOperator() IPointerOperatorContext
	NewOpDeclarator() INewOpDeclaratorContext
	NoPointerNewDeclarator() INoPointerNewDeclaratorContext

	// IsNewOpDeclaratorContext differentiates from other interfaces.
	IsNewOpDeclaratorContext()
}

type NewOpDeclaratorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNewOpDeclaratorContext() *NewOpDeclaratorContext {
	var p = new(NewOpDeclaratorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_newOpDeclarator
	return p
}

func InitEmptyNewOpDeclaratorContext(p *NewOpDeclaratorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_newOpDeclarator
}

func (*NewOpDeclaratorContext) IsNewOpDeclaratorContext() {}

func NewNewOpDeclaratorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NewOpDeclaratorContext {
	var p = new(NewOpDeclaratorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_newOpDeclarator

	return p
}

func (s *NewOpDeclaratorContext) GetParser() antlr.Parser { return s.parser }

func (s *NewOpDeclaratorContext) PointerOperator() IPointerOperatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPointerOperatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPointerOperatorContext)
}

func (s *NewOpDeclaratorContext) NewOpDeclarator() INewOpDeclaratorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INewOpDeclaratorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INewOpDeclaratorContext)
}

func (s *NewOpDeclaratorContext) NoPointerNewDeclarator() INoPointerNewDeclaratorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INoPointerNewDeclaratorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INoPointerNewDeclaratorContext)
}

func (s *NewOpDeclaratorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NewOpDeclaratorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NewOpDeclaratorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitNewOpDeclarator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) NewOpDeclarator() (localctx INewOpDeclaratorContext) {
	localctx = NewNewOpDeclaratorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, CPP14ParserRULE_newOpDeclarator)
	p.SetState(658)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserDecltype, CPP14ParserStar, CPP14ParserAnd, CPP14ParserAndAnd, CPP14ParserDoublecolon, CPP14ParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(653)
			p.PointerOperator()
		}
		p.SetState(655)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 48, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(654)
				p.NewOpDeclarator()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case CPP14ParserLeftBracket:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(657)
			p.noPointerNewDeclarator(0)
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INoPointerNewDeclaratorContext is an interface to support dynamic dispatch.
type INoPointerNewDeclaratorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LeftBracket() antlr.TerminalNode
	Expression() IExpressionContext
	RightBracket() antlr.TerminalNode
	AttributeSpecifierSeq() IAttributeSpecifierSeqContext
	NoPointerNewDeclarator() INoPointerNewDeclaratorContext
	ConstantExpression() IConstantExpressionContext

	// IsNoPointerNewDeclaratorContext differentiates from other interfaces.
	IsNoPointerNewDeclaratorContext()
}

type NoPointerNewDeclaratorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNoPointerNewDeclaratorContext() *NoPointerNewDeclaratorContext {
	var p = new(NoPointerNewDeclaratorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_noPointerNewDeclarator
	return p
}

func InitEmptyNoPointerNewDeclaratorContext(p *NoPointerNewDeclaratorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_noPointerNewDeclarator
}

func (*NoPointerNewDeclaratorContext) IsNoPointerNewDeclaratorContext() {}

func NewNoPointerNewDeclaratorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NoPointerNewDeclaratorContext {
	var p = new(NoPointerNewDeclaratorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_noPointerNewDeclarator

	return p
}

func (s *NoPointerNewDeclaratorContext) GetParser() antlr.Parser { return s.parser }

func (s *NoPointerNewDeclaratorContext) LeftBracket() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftBracket, 0)
}

func (s *NoPointerNewDeclaratorContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *NoPointerNewDeclaratorContext) RightBracket() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightBracket, 0)
}

func (s *NoPointerNewDeclaratorContext) AttributeSpecifierSeq() IAttributeSpecifierSeqContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributeSpecifierSeqContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributeSpecifierSeqContext)
}

func (s *NoPointerNewDeclaratorContext) NoPointerNewDeclarator() INoPointerNewDeclaratorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INoPointerNewDeclaratorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INoPointerNewDeclaratorContext)
}

func (s *NoPointerNewDeclaratorContext) ConstantExpression() IConstantExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConstantExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConstantExpressionContext)
}

func (s *NoPointerNewDeclaratorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NoPointerNewDeclaratorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NoPointerNewDeclaratorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitNoPointerNewDeclarator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) NoPointerNewDeclarator() (localctx INoPointerNewDeclaratorContext) {
	return p.noPointerNewDeclarator(0)
}

func (p *CPP14Parser) noPointerNewDeclarator(_p int) (localctx INoPointerNewDeclaratorContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewNoPointerNewDeclaratorContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx INoPointerNewDeclaratorContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 50
	p.EnterRecursionRule(localctx, 50, CPP14ParserRULE_noPointerNewDeclarator, _p)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(661)
		p.Match(CPP14ParserLeftBracket)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(662)
		p.Expression()
	}
	{
		p.SetState(663)
		p.Match(CPP14ParserRightBracket)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(665)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 50, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(664)
			p.AttributeSpecifierSeq()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(676)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 52, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewNoPointerNewDeclaratorContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, CPP14ParserRULE_noPointerNewDeclarator)
			p.SetState(667)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				goto errorExit
			}
			{
				p.SetState(668)
				p.Match(CPP14ParserLeftBracket)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(669)
				p.ConstantExpression()
			}
			{
				p.SetState(670)
				p.Match(CPP14ParserRightBracket)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			p.SetState(672)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 51, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(671)
					p.AttributeSpecifierSeq()
				}

			} else if p.HasError() { // JIM
				goto errorExit
			}

		}
		p.SetState(678)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 52, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INewOpInitializerContext is an interface to support dynamic dispatch.
type INewOpInitializerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LeftParen() antlr.TerminalNode
	RightParen() antlr.TerminalNode
	ExpressionList() IExpressionListContext
	BracedInitList() IBracedInitListContext

	// IsNewOpInitializerContext differentiates from other interfaces.
	IsNewOpInitializerContext()
}

type NewOpInitializerContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNewOpInitializerContext() *NewOpInitializerContext {
	var p = new(NewOpInitializerContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_newOpInitializer
	return p
}

func InitEmptyNewOpInitializerContext(p *NewOpInitializerContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_newOpInitializer
}

func (*NewOpInitializerContext) IsNewOpInitializerContext() {}

func NewNewOpInitializerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NewOpInitializerContext {
	var p = new(NewOpInitializerContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_newOpInitializer

	return p
}

func (s *NewOpInitializerContext) GetParser() antlr.Parser { return s.parser }

func (s *NewOpInitializerContext) LeftParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, 0)
}

func (s *NewOpInitializerContext) RightParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, 0)
}

func (s *NewOpInitializerContext) ExpressionList() IExpressionListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *NewOpInitializerContext) BracedInitList() IBracedInitListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBracedInitListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBracedInitListContext)
}

func (s *NewOpInitializerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NewOpInitializerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NewOpInitializerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitNewOpInitializer(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) NewOpInitializer() (localctx INewOpInitializerContext) {
	localctx = NewNewOpInitializerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, CPP14ParserRULE_newOpInitializer)
	var _la int

	p.SetState(685)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserLeftParen:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(679)
			p.Match(CPP14ParserLeftParen)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(681)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&8364979464334764286) != 0) || ((int64((_la-65)) & ^0x3f) == 0 && ((int64(1)<<(_la-65))&4719772474400910417) != 0) || _la == CPP14ParserIdentifier {
			{
				p.SetState(680)
				p.ExpressionList()
			}

		}
		{
			p.SetState(683)
			p.Match(CPP14ParserRightParen)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case CPP14ParserLeftBrace:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(684)
			p.BracedInitList()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDeleteExpressionContext is an interface to support dynamic dispatch.
type IDeleteExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Delete() antlr.TerminalNode
	CastExpression() ICastExpressionContext
	Doublecolon() antlr.TerminalNode
	LeftBracket() antlr.TerminalNode
	RightBracket() antlr.TerminalNode

	// IsDeleteExpressionContext differentiates from other interfaces.
	IsDeleteExpressionContext()
}

type DeleteExpressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeleteExpressionContext() *DeleteExpressionContext {
	var p = new(DeleteExpressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_deleteExpression
	return p
}

func InitEmptyDeleteExpressionContext(p *DeleteExpressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_deleteExpression
}

func (*DeleteExpressionContext) IsDeleteExpressionContext() {}

func NewDeleteExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeleteExpressionContext {
	var p = new(DeleteExpressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_deleteExpression

	return p
}

func (s *DeleteExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *DeleteExpressionContext) Delete() antlr.TerminalNode {
	return s.GetToken(CPP14ParserDelete, 0)
}

func (s *DeleteExpressionContext) CastExpression() ICastExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICastExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICastExpressionContext)
}

func (s *DeleteExpressionContext) Doublecolon() antlr.TerminalNode {
	return s.GetToken(CPP14ParserDoublecolon, 0)
}

func (s *DeleteExpressionContext) LeftBracket() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftBracket, 0)
}

func (s *DeleteExpressionContext) RightBracket() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightBracket, 0)
}

func (s *DeleteExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeleteExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeleteExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitDeleteExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) DeleteExpression() (localctx IDeleteExpressionContext) {
	localctx = NewDeleteExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, CPP14ParserRULE_deleteExpression)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(688)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserDoublecolon {
		{
			p.SetState(687)
			p.Match(CPP14ParserDoublecolon)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(690)
		p.Match(CPP14ParserDelete)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(693)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 56, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(691)
			p.Match(CPP14ParserLeftBracket)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(692)
			p.Match(CPP14ParserRightBracket)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(695)
		p.CastExpression()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INoExceptExpressionContext is an interface to support dynamic dispatch.
type INoExceptExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Noexcept() antlr.TerminalNode
	LeftParen() antlr.TerminalNode
	Expression() IExpressionContext
	RightParen() antlr.TerminalNode

	// IsNoExceptExpressionContext differentiates from other interfaces.
	IsNoExceptExpressionContext()
}

type NoExceptExpressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNoExceptExpressionContext() *NoExceptExpressionContext {
	var p = new(NoExceptExpressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_noExceptExpression
	return p
}

func InitEmptyNoExceptExpressionContext(p *NoExceptExpressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_noExceptExpression
}

func (*NoExceptExpressionContext) IsNoExceptExpressionContext() {}

func NewNoExceptExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NoExceptExpressionContext {
	var p = new(NoExceptExpressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_noExceptExpression

	return p
}

func (s *NoExceptExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *NoExceptExpressionContext) Noexcept() antlr.TerminalNode {
	return s.GetToken(CPP14ParserNoexcept, 0)
}

func (s *NoExceptExpressionContext) LeftParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, 0)
}

func (s *NoExceptExpressionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *NoExceptExpressionContext) RightParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, 0)
}

func (s *NoExceptExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NoExceptExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NoExceptExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitNoExceptExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) NoExceptExpression() (localctx INoExceptExpressionContext) {
	localctx = NewNoExceptExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, CPP14ParserRULE_noExceptExpression)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(697)
		p.Match(CPP14ParserNoexcept)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(698)
		p.Match(CPP14ParserLeftParen)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(699)
		p.Expression()
	}
	{
		p.SetState(700)
		p.Match(CPP14ParserRightParen)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICastExpressionContext is an interface to support dynamic dispatch.
type ICastExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	UnaryExpression() IUnaryExpressionContext
	LeftParen() antlr.TerminalNode
	TheTypeId() ITheTypeIdContext
	RightParen() antlr.TerminalNode
	CastExpression() ICastExpressionContext

	// IsCastExpressionContext differentiates from other interfaces.
	IsCastExpressionContext()
}

type CastExpressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCastExpressionContext() *CastExpressionContext {
	var p = new(CastExpressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_castExpression
	return p
}

func InitEmptyCastExpressionContext(p *CastExpressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_castExpression
}

func (*CastExpressionContext) IsCastExpressionContext() {}

func NewCastExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CastExpressionContext {
	var p = new(CastExpressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_castExpression

	return p
}

func (s *CastExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *CastExpressionContext) UnaryExpression() IUnaryExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnaryExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnaryExpressionContext)
}

func (s *CastExpressionContext) LeftParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, 0)
}

func (s *CastExpressionContext) TheTypeId() ITheTypeIdContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITheTypeIdContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITheTypeIdContext)
}

func (s *CastExpressionContext) RightParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, 0)
}

func (s *CastExpressionContext) CastExpression() ICastExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICastExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICastExpressionContext)
}

func (s *CastExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CastExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CastExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitCastExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) CastExpression() (localctx ICastExpressionContext) {
	localctx = NewCastExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, CPP14ParserRULE_castExpression)
	p.SetState(708)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 57, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(702)
			p.UnaryExpression()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(703)
			p.Match(CPP14ParserLeftParen)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(704)
			p.TheTypeId()
		}
		{
			p.SetState(705)
			p.Match(CPP14ParserRightParen)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(706)
			p.CastExpression()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPointerMemberExpressionContext is an interface to support dynamic dispatch.
type IPointerMemberExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllCastExpression() []ICastExpressionContext
	CastExpression(i int) ICastExpressionContext
	AllDotStar() []antlr.TerminalNode
	DotStar(i int) antlr.TerminalNode
	AllArrowStar() []antlr.TerminalNode
	ArrowStar(i int) antlr.TerminalNode

	// IsPointerMemberExpressionContext differentiates from other interfaces.
	IsPointerMemberExpressionContext()
}

type PointerMemberExpressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPointerMemberExpressionContext() *PointerMemberExpressionContext {
	var p = new(PointerMemberExpressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_pointerMemberExpression
	return p
}

func InitEmptyPointerMemberExpressionContext(p *PointerMemberExpressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_pointerMemberExpression
}

func (*PointerMemberExpressionContext) IsPointerMemberExpressionContext() {}

func NewPointerMemberExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PointerMemberExpressionContext {
	var p = new(PointerMemberExpressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_pointerMemberExpression

	return p
}

func (s *PointerMemberExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *PointerMemberExpressionContext) AllCastExpression() []ICastExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ICastExpressionContext); ok {
			len++
		}
	}

	tst := make([]ICastExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ICastExpressionContext); ok {
			tst[i] = t.(ICastExpressionContext)
			i++
		}
	}

	return tst
}

func (s *PointerMemberExpressionContext) CastExpression(i int) ICastExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICastExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICastExpressionContext)
}

func (s *PointerMemberExpressionContext) AllDotStar() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserDotStar)
}

func (s *PointerMemberExpressionContext) DotStar(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserDotStar, i)
}

func (s *PointerMemberExpressionContext) AllArrowStar() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserArrowStar)
}

func (s *PointerMemberExpressionContext) ArrowStar(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserArrowStar, i)
}

func (s *PointerMemberExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PointerMemberExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PointerMemberExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitPointerMemberExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) PointerMemberExpression() (localctx IPointerMemberExpressionContext) {
	localctx = NewPointerMemberExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, CPP14ParserRULE_pointerMemberExpression)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(710)
		p.CastExpression()
	}
	p.SetState(715)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == CPP14ParserArrowStar || _la == CPP14ParserDotStar {
		{
			p.SetState(711)
			_la = p.GetTokenStream().LA(1)

			if !(_la == CPP14ParserArrowStar || _la == CPP14ParserDotStar) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(712)
			p.CastExpression()
		}

		p.SetState(717)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMultiplicativeExpressionContext is an interface to support dynamic dispatch.
type IMultiplicativeExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllPointerMemberExpression() []IPointerMemberExpressionContext
	PointerMemberExpression(i int) IPointerMemberExpressionContext
	AllStar() []antlr.TerminalNode
	Star(i int) antlr.TerminalNode
	AllDiv() []antlr.TerminalNode
	Div(i int) antlr.TerminalNode
	AllMod() []antlr.TerminalNode
	Mod(i int) antlr.TerminalNode

	// IsMultiplicativeExpressionContext differentiates from other interfaces.
	IsMultiplicativeExpressionContext()
}

type MultiplicativeExpressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMultiplicativeExpressionContext() *MultiplicativeExpressionContext {
	var p = new(MultiplicativeExpressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_multiplicativeExpression
	return p
}

func InitEmptyMultiplicativeExpressionContext(p *MultiplicativeExpressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_multiplicativeExpression
}

func (*MultiplicativeExpressionContext) IsMultiplicativeExpressionContext() {}

func NewMultiplicativeExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MultiplicativeExpressionContext {
	var p = new(MultiplicativeExpressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_multiplicativeExpression

	return p
}

func (s *MultiplicativeExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *MultiplicativeExpressionContext) AllPointerMemberExpression() []IPointerMemberExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IPointerMemberExpressionContext); ok {
			len++
		}
	}

	tst := make([]IPointerMemberExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IPointerMemberExpressionContext); ok {
			tst[i] = t.(IPointerMemberExpressionContext)
			i++
		}
	}

	return tst
}

func (s *MultiplicativeExpressionContext) PointerMemberExpression(i int) IPointerMemberExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPointerMemberExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPointerMemberExpressionContext)
}

func (s *MultiplicativeExpressionContext) AllStar() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserStar)
}

func (s *MultiplicativeExpressionContext) Star(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserStar, i)
}

func (s *MultiplicativeExpressionContext) AllDiv() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserDiv)
}

func (s *MultiplicativeExpressionContext) Div(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserDiv, i)
}

func (s *MultiplicativeExpressionContext) AllMod() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserMod)
}

func (s *MultiplicativeExpressionContext) Mod(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserMod, i)
}

func (s *MultiplicativeExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MultiplicativeExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MultiplicativeExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitMultiplicativeExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) MultiplicativeExpression() (localctx IMultiplicativeExpressionContext) {
	localctx = NewMultiplicativeExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, CPP14ParserRULE_multiplicativeExpression)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(718)
		p.PointerMemberExpression()
	}
	p.SetState(723)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for (int64((_la-93)) & ^0x3f) == 0 && ((int64(1)<<(_la-93))&7) != 0 {
		{
			p.SetState(719)
			_la = p.GetTokenStream().LA(1)

			if !((int64((_la-93)) & ^0x3f) == 0 && ((int64(1)<<(_la-93))&7) != 0) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(720)
			p.PointerMemberExpression()
		}

		p.SetState(725)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAdditiveExpressionContext is an interface to support dynamic dispatch.
type IAdditiveExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllMultiplicativeExpression() []IMultiplicativeExpressionContext
	MultiplicativeExpression(i int) IMultiplicativeExpressionContext
	AllPlus() []antlr.TerminalNode
	Plus(i int) antlr.TerminalNode
	AllMinus() []antlr.TerminalNode
	Minus(i int) antlr.TerminalNode

	// IsAdditiveExpressionContext differentiates from other interfaces.
	IsAdditiveExpressionContext()
}

type AdditiveExpressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAdditiveExpressionContext() *AdditiveExpressionContext {
	var p = new(AdditiveExpressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_additiveExpression
	return p
}

func InitEmptyAdditiveExpressionContext(p *AdditiveExpressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_additiveExpression
}

func (*AdditiveExpressionContext) IsAdditiveExpressionContext() {}

func NewAdditiveExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AdditiveExpressionContext {
	var p = new(AdditiveExpressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_additiveExpression

	return p
}

func (s *AdditiveExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *AdditiveExpressionContext) AllMultiplicativeExpression() []IMultiplicativeExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IMultiplicativeExpressionContext); ok {
			len++
		}
	}

	tst := make([]IMultiplicativeExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IMultiplicativeExpressionContext); ok {
			tst[i] = t.(IMultiplicativeExpressionContext)
			i++
		}
	}

	return tst
}

func (s *AdditiveExpressionContext) MultiplicativeExpression(i int) IMultiplicativeExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMultiplicativeExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMultiplicativeExpressionContext)
}

func (s *AdditiveExpressionContext) AllPlus() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserPlus)
}

func (s *AdditiveExpressionContext) Plus(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserPlus, i)
}

func (s *AdditiveExpressionContext) AllMinus() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserMinus)
}

func (s *AdditiveExpressionContext) Minus(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserMinus, i)
}

func (s *AdditiveExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AdditiveExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AdditiveExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitAdditiveExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) AdditiveExpression() (localctx IAdditiveExpressionContext) {
	localctx = NewAdditiveExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, CPP14ParserRULE_additiveExpression)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(726)
		p.MultiplicativeExpression()
	}
	p.SetState(731)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == CPP14ParserPlus || _la == CPP14ParserMinus {
		{
			p.SetState(727)
			_la = p.GetTokenStream().LA(1)

			if !(_la == CPP14ParserPlus || _la == CPP14ParserMinus) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(728)
			p.MultiplicativeExpression()
		}

		p.SetState(733)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IShiftExpressionContext is an interface to support dynamic dispatch.
type IShiftExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllAdditiveExpression() []IAdditiveExpressionContext
	AdditiveExpression(i int) IAdditiveExpressionContext
	AllShiftOperator() []IShiftOperatorContext
	ShiftOperator(i int) IShiftOperatorContext

	// IsShiftExpressionContext differentiates from other interfaces.
	IsShiftExpressionContext()
}

type ShiftExpressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShiftExpressionContext() *ShiftExpressionContext {
	var p = new(ShiftExpressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_shiftExpression
	return p
}

func InitEmptyShiftExpressionContext(p *ShiftExpressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_shiftExpression
}

func (*ShiftExpressionContext) IsShiftExpressionContext() {}

func NewShiftExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShiftExpressionContext {
	var p = new(ShiftExpressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_shiftExpression

	return p
}

func (s *ShiftExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ShiftExpressionContext) AllAdditiveExpression() []IAdditiveExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAdditiveExpressionContext); ok {
			len++
		}
	}

	tst := make([]IAdditiveExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAdditiveExpressionContext); ok {
			tst[i] = t.(IAdditiveExpressionContext)
			i++
		}
	}

	return tst
}

func (s *ShiftExpressionContext) AdditiveExpression(i int) IAdditiveExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAdditiveExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAdditiveExpressionContext)
}

func (s *ShiftExpressionContext) AllShiftOperator() []IShiftOperatorContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IShiftOperatorContext); ok {
			len++
		}
	}

	tst := make([]IShiftOperatorContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IShiftOperatorContext); ok {
			tst[i] = t.(IShiftOperatorContext)
			i++
		}
	}

	return tst
}

func (s *ShiftExpressionContext) ShiftOperator(i int) IShiftOperatorContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IShiftOperatorContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IShiftOperatorContext)
}

func (s *ShiftExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShiftExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShiftExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitShiftExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) ShiftExpression() (localctx IShiftExpressionContext) {
	localctx = NewShiftExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, CPP14ParserRULE_shiftExpression)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(734)
		p.AdditiveExpression()
	}
	p.SetState(740)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 61, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(735)
				p.ShiftOperator()
			}
			{
				p.SetState(736)
				p.AdditiveExpression()
			}

		}
		p.SetState(742)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 61, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IShiftOperatorContext is an interface to support dynamic dispatch.
type IShiftOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllGreater() []antlr.TerminalNode
	Greater(i int) antlr.TerminalNode
	AllLess() []antlr.TerminalNode
	Less(i int) antlr.TerminalNode

	// IsShiftOperatorContext differentiates from other interfaces.
	IsShiftOperatorContext()
}

type ShiftOperatorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShiftOperatorContext() *ShiftOperatorContext {
	var p = new(ShiftOperatorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_shiftOperator
	return p
}

func InitEmptyShiftOperatorContext(p *ShiftOperatorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_shiftOperator
}

func (*ShiftOperatorContext) IsShiftOperatorContext() {}

func NewShiftOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShiftOperatorContext {
	var p = new(ShiftOperatorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_shiftOperator

	return p
}

func (s *ShiftOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *ShiftOperatorContext) AllGreater() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserGreater)
}

func (s *ShiftOperatorContext) Greater(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserGreater, i)
}

func (s *ShiftOperatorContext) AllLess() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserLess)
}

func (s *ShiftOperatorContext) Less(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserLess, i)
}

func (s *ShiftOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShiftOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShiftOperatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitShiftOperator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) ShiftOperator() (localctx IShiftOperatorContext) {
	localctx = NewShiftOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, CPP14ParserRULE_shiftOperator)
	p.SetState(747)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserGreater:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(743)
			p.Match(CPP14ParserGreater)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(744)
			p.Match(CPP14ParserGreater)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case CPP14ParserLess:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(745)
			p.Match(CPP14ParserLess)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(746)
			p.Match(CPP14ParserLess)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IRelationalExpressionContext is an interface to support dynamic dispatch.
type IRelationalExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllShiftExpression() []IShiftExpressionContext
	ShiftExpression(i int) IShiftExpressionContext
	AllLess() []antlr.TerminalNode
	Less(i int) antlr.TerminalNode
	AllGreater() []antlr.TerminalNode
	Greater(i int) antlr.TerminalNode
	AllLessEqual() []antlr.TerminalNode
	LessEqual(i int) antlr.TerminalNode
	AllGreaterEqual() []antlr.TerminalNode
	GreaterEqual(i int) antlr.TerminalNode

	// IsRelationalExpressionContext differentiates from other interfaces.
	IsRelationalExpressionContext()
}

type RelationalExpressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRelationalExpressionContext() *RelationalExpressionContext {
	var p = new(RelationalExpressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_relationalExpression
	return p
}

func InitEmptyRelationalExpressionContext(p *RelationalExpressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_relationalExpression
}

func (*RelationalExpressionContext) IsRelationalExpressionContext() {}

func NewRelationalExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RelationalExpressionContext {
	var p = new(RelationalExpressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_relationalExpression

	return p
}

func (s *RelationalExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *RelationalExpressionContext) AllShiftExpression() []IShiftExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IShiftExpressionContext); ok {
			len++
		}
	}

	tst := make([]IShiftExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IShiftExpressionContext); ok {
			tst[i] = t.(IShiftExpressionContext)
			i++
		}
	}

	return tst
}

func (s *RelationalExpressionContext) ShiftExpression(i int) IShiftExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IShiftExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IShiftExpressionContext)
}

func (s *RelationalExpressionContext) AllLess() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserLess)
}

func (s *RelationalExpressionContext) Less(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserLess, i)
}

func (s *RelationalExpressionContext) AllGreater() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserGreater)
}

func (s *RelationalExpressionContext) Greater(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserGreater, i)
}

func (s *RelationalExpressionContext) AllLessEqual() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserLessEqual)
}

func (s *RelationalExpressionContext) LessEqual(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserLessEqual, i)
}

func (s *RelationalExpressionContext) AllGreaterEqual() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserGreaterEqual)
}

func (s *RelationalExpressionContext) GreaterEqual(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserGreaterEqual, i)
}

func (s *RelationalExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RelationalExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RelationalExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitRelationalExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) RelationalExpression() (localctx IRelationalExpressionContext) {
	localctx = NewRelationalExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, CPP14ParserRULE_relationalExpression)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(749)
		p.ShiftExpression()
	}
	p.SetState(754)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 63, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(750)
				_la = p.GetTokenStream().LA(1)

				if !((int64((_la-102)) & ^0x3f) == 0 && ((int64(1)<<(_la-102))&49155) != 0) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			{
				p.SetState(751)
				p.ShiftExpression()
			}

		}
		p.SetState(756)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 63, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IEqualityExpressionContext is an interface to support dynamic dispatch.
type IEqualityExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllRelationalExpression() []IRelationalExpressionContext
	RelationalExpression(i int) IRelationalExpressionContext
	AllEqual() []antlr.TerminalNode
	Equal(i int) antlr.TerminalNode
	AllNotEqual() []antlr.TerminalNode
	NotEqual(i int) antlr.TerminalNode

	// IsEqualityExpressionContext differentiates from other interfaces.
	IsEqualityExpressionContext()
}

type EqualityExpressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEqualityExpressionContext() *EqualityExpressionContext {
	var p = new(EqualityExpressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_equalityExpression
	return p
}

func InitEmptyEqualityExpressionContext(p *EqualityExpressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_equalityExpression
}

func (*EqualityExpressionContext) IsEqualityExpressionContext() {}

func NewEqualityExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EqualityExpressionContext {
	var p = new(EqualityExpressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_equalityExpression

	return p
}

func (s *EqualityExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *EqualityExpressionContext) AllRelationalExpression() []IRelationalExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IRelationalExpressionContext); ok {
			len++
		}
	}

	tst := make([]IRelationalExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IRelationalExpressionContext); ok {
			tst[i] = t.(IRelationalExpressionContext)
			i++
		}
	}

	return tst
}

func (s *EqualityExpressionContext) RelationalExpression(i int) IRelationalExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRelationalExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRelationalExpressionContext)
}

func (s *EqualityExpressionContext) AllEqual() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserEqual)
}

func (s *EqualityExpressionContext) Equal(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserEqual, i)
}

func (s *EqualityExpressionContext) AllNotEqual() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserNotEqual)
}

func (s *EqualityExpressionContext) NotEqual(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserNotEqual, i)
}

func (s *EqualityExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EqualityExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EqualityExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitEqualityExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) EqualityExpression() (localctx IEqualityExpressionContext) {
	localctx = NewEqualityExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, CPP14ParserRULE_equalityExpression)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(757)
		p.RelationalExpression()
	}
	p.SetState(762)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == CPP14ParserEqual || _la == CPP14ParserNotEqual {
		{
			p.SetState(758)
			_la = p.GetTokenStream().LA(1)

			if !(_la == CPP14ParserEqual || _la == CPP14ParserNotEqual) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(759)
			p.RelationalExpression()
		}

		p.SetState(764)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAndExpressionContext is an interface to support dynamic dispatch.
type IAndExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllEqualityExpression() []IEqualityExpressionContext
	EqualityExpression(i int) IEqualityExpressionContext
	AllAnd() []antlr.TerminalNode
	And(i int) antlr.TerminalNode

	// IsAndExpressionContext differentiates from other interfaces.
	IsAndExpressionContext()
}

type AndExpressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAndExpressionContext() *AndExpressionContext {
	var p = new(AndExpressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_andExpression
	return p
}

func InitEmptyAndExpressionContext(p *AndExpressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_andExpression
}

func (*AndExpressionContext) IsAndExpressionContext() {}

func NewAndExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AndExpressionContext {
	var p = new(AndExpressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_andExpression

	return p
}

func (s *AndExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *AndExpressionContext) AllEqualityExpression() []IEqualityExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IEqualityExpressionContext); ok {
			len++
		}
	}

	tst := make([]IEqualityExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IEqualityExpressionContext); ok {
			tst[i] = t.(IEqualityExpressionContext)
			i++
		}
	}

	return tst
}

func (s *AndExpressionContext) EqualityExpression(i int) IEqualityExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEqualityExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEqualityExpressionContext)
}

func (s *AndExpressionContext) AllAnd() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserAnd)
}

func (s *AndExpressionContext) And(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserAnd, i)
}

func (s *AndExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AndExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AndExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitAndExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) AndExpression() (localctx IAndExpressionContext) {
	localctx = NewAndExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, CPP14ParserRULE_andExpression)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(765)
		p.EqualityExpression()
	}
	p.SetState(770)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == CPP14ParserAnd {
		{
			p.SetState(766)
			p.Match(CPP14ParserAnd)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(767)
			p.EqualityExpression()
		}

		p.SetState(772)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExclusiveOrExpressionContext is an interface to support dynamic dispatch.
type IExclusiveOrExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllAndExpression() []IAndExpressionContext
	AndExpression(i int) IAndExpressionContext
	AllCaret() []antlr.TerminalNode
	Caret(i int) antlr.TerminalNode

	// IsExclusiveOrExpressionContext differentiates from other interfaces.
	IsExclusiveOrExpressionContext()
}

type ExclusiveOrExpressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExclusiveOrExpressionContext() *ExclusiveOrExpressionContext {
	var p = new(ExclusiveOrExpressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_exclusiveOrExpression
	return p
}

func InitEmptyExclusiveOrExpressionContext(p *ExclusiveOrExpressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_exclusiveOrExpression
}

func (*ExclusiveOrExpressionContext) IsExclusiveOrExpressionContext() {}

func NewExclusiveOrExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExclusiveOrExpressionContext {
	var p = new(ExclusiveOrExpressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_exclusiveOrExpression

	return p
}

func (s *ExclusiveOrExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ExclusiveOrExpressionContext) AllAndExpression() []IAndExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAndExpressionContext); ok {
			len++
		}
	}

	tst := make([]IAndExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAndExpressionContext); ok {
			tst[i] = t.(IAndExpressionContext)
			i++
		}
	}

	return tst
}

func (s *ExclusiveOrExpressionContext) AndExpression(i int) IAndExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAndExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAndExpressionContext)
}

func (s *ExclusiveOrExpressionContext) AllCaret() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserCaret)
}

func (s *ExclusiveOrExpressionContext) Caret(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserCaret, i)
}

func (s *ExclusiveOrExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExclusiveOrExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExclusiveOrExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitExclusiveOrExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) ExclusiveOrExpression() (localctx IExclusiveOrExpressionContext) {
	localctx = NewExclusiveOrExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, CPP14ParserRULE_exclusiveOrExpression)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(773)
		p.AndExpression()
	}
	p.SetState(778)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == CPP14ParserCaret {
		{
			p.SetState(774)
			p.Match(CPP14ParserCaret)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(775)
			p.AndExpression()
		}

		p.SetState(780)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IInclusiveOrExpressionContext is an interface to support dynamic dispatch.
type IInclusiveOrExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllExclusiveOrExpression() []IExclusiveOrExpressionContext
	ExclusiveOrExpression(i int) IExclusiveOrExpressionContext
	AllOr() []antlr.TerminalNode
	Or(i int) antlr.TerminalNode

	// IsInclusiveOrExpressionContext differentiates from other interfaces.
	IsInclusiveOrExpressionContext()
}

type InclusiveOrExpressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInclusiveOrExpressionContext() *InclusiveOrExpressionContext {
	var p = new(InclusiveOrExpressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_inclusiveOrExpression
	return p
}

func InitEmptyInclusiveOrExpressionContext(p *InclusiveOrExpressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_inclusiveOrExpression
}

func (*InclusiveOrExpressionContext) IsInclusiveOrExpressionContext() {}

func NewInclusiveOrExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InclusiveOrExpressionContext {
	var p = new(InclusiveOrExpressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_inclusiveOrExpression

	return p
}

func (s *InclusiveOrExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *InclusiveOrExpressionContext) AllExclusiveOrExpression() []IExclusiveOrExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExclusiveOrExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExclusiveOrExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExclusiveOrExpressionContext); ok {
			tst[i] = t.(IExclusiveOrExpressionContext)
			i++
		}
	}

	return tst
}

func (s *InclusiveOrExpressionContext) ExclusiveOrExpression(i int) IExclusiveOrExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExclusiveOrExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExclusiveOrExpressionContext)
}

func (s *InclusiveOrExpressionContext) AllOr() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserOr)
}

func (s *InclusiveOrExpressionContext) Or(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserOr, i)
}

func (s *InclusiveOrExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InclusiveOrExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InclusiveOrExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitInclusiveOrExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) InclusiveOrExpression() (localctx IInclusiveOrExpressionContext) {
	localctx = NewInclusiveOrExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, CPP14ParserRULE_inclusiveOrExpression)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(781)
		p.ExclusiveOrExpression()
	}
	p.SetState(786)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == CPP14ParserOr {
		{
			p.SetState(782)
			p.Match(CPP14ParserOr)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(783)
			p.ExclusiveOrExpression()
		}

		p.SetState(788)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILogicalAndExpressionContext is an interface to support dynamic dispatch.
type ILogicalAndExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllInclusiveOrExpression() []IInclusiveOrExpressionContext
	InclusiveOrExpression(i int) IInclusiveOrExpressionContext
	AllAndAnd() []antlr.TerminalNode
	AndAnd(i int) antlr.TerminalNode

	// IsLogicalAndExpressionContext differentiates from other interfaces.
	IsLogicalAndExpressionContext()
}

type LogicalAndExpressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLogicalAndExpressionContext() *LogicalAndExpressionContext {
	var p = new(LogicalAndExpressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_logicalAndExpression
	return p
}

func InitEmptyLogicalAndExpressionContext(p *LogicalAndExpressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_logicalAndExpression
}

func (*LogicalAndExpressionContext) IsLogicalAndExpressionContext() {}

func NewLogicalAndExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LogicalAndExpressionContext {
	var p = new(LogicalAndExpressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_logicalAndExpression

	return p
}

func (s *LogicalAndExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *LogicalAndExpressionContext) AllInclusiveOrExpression() []IInclusiveOrExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IInclusiveOrExpressionContext); ok {
			len++
		}
	}

	tst := make([]IInclusiveOrExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IInclusiveOrExpressionContext); ok {
			tst[i] = t.(IInclusiveOrExpressionContext)
			i++
		}
	}

	return tst
}

func (s *LogicalAndExpressionContext) InclusiveOrExpression(i int) IInclusiveOrExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInclusiveOrExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInclusiveOrExpressionContext)
}

func (s *LogicalAndExpressionContext) AllAndAnd() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserAndAnd)
}

func (s *LogicalAndExpressionContext) AndAnd(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserAndAnd, i)
}

func (s *LogicalAndExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LogicalAndExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LogicalAndExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitLogicalAndExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) LogicalAndExpression() (localctx ILogicalAndExpressionContext) {
	localctx = NewLogicalAndExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, CPP14ParserRULE_logicalAndExpression)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(789)
		p.InclusiveOrExpression()
	}
	p.SetState(794)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == CPP14ParserAndAnd {
		{
			p.SetState(790)
			p.Match(CPP14ParserAndAnd)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(791)
			p.InclusiveOrExpression()
		}

		p.SetState(796)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILogicalOrExpressionContext is an interface to support dynamic dispatch.
type ILogicalOrExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllLogicalAndExpression() []ILogicalAndExpressionContext
	LogicalAndExpression(i int) ILogicalAndExpressionContext
	AllOrOr() []antlr.TerminalNode
	OrOr(i int) antlr.TerminalNode

	// IsLogicalOrExpressionContext differentiates from other interfaces.
	IsLogicalOrExpressionContext()
}

type LogicalOrExpressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLogicalOrExpressionContext() *LogicalOrExpressionContext {
	var p = new(LogicalOrExpressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_logicalOrExpression
	return p
}

func InitEmptyLogicalOrExpressionContext(p *LogicalOrExpressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_logicalOrExpression
}

func (*LogicalOrExpressionContext) IsLogicalOrExpressionContext() {}

func NewLogicalOrExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LogicalOrExpressionContext {
	var p = new(LogicalOrExpressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_logicalOrExpression

	return p
}

func (s *LogicalOrExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *LogicalOrExpressionContext) AllLogicalAndExpression() []ILogicalAndExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ILogicalAndExpressionContext); ok {
			len++
		}
	}

	tst := make([]ILogicalAndExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ILogicalAndExpressionContext); ok {
			tst[i] = t.(ILogicalAndExpressionContext)
			i++
		}
	}

	return tst
}

func (s *LogicalOrExpressionContext) LogicalAndExpression(i int) ILogicalAndExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILogicalAndExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILogicalAndExpressionContext)
}

func (s *LogicalOrExpressionContext) AllOrOr() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserOrOr)
}

func (s *LogicalOrExpressionContext) OrOr(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserOrOr, i)
}

func (s *LogicalOrExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LogicalOrExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LogicalOrExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitLogicalOrExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) LogicalOrExpression() (localctx ILogicalOrExpressionContext) {
	localctx = NewLogicalOrExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, CPP14ParserRULE_logicalOrExpression)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(797)
		p.LogicalAndExpression()
	}
	p.SetState(802)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == CPP14ParserOrOr {
		{
			p.SetState(798)
			p.Match(CPP14ParserOrOr)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(799)
			p.LogicalAndExpression()
		}

		p.SetState(804)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IConditionalExpressionContext is an interface to support dynamic dispatch.
type IConditionalExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LogicalOrExpression() ILogicalOrExpressionContext
	Question() antlr.TerminalNode
	Expression() IExpressionContext
	Colon() antlr.TerminalNode
	AssignmentExpression() IAssignmentExpressionContext

	// IsConditionalExpressionContext differentiates from other interfaces.
	IsConditionalExpressionContext()
}

type ConditionalExpressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConditionalExpressionContext() *ConditionalExpressionContext {
	var p = new(ConditionalExpressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_conditionalExpression
	return p
}

func InitEmptyConditionalExpressionContext(p *ConditionalExpressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_conditionalExpression
}

func (*ConditionalExpressionContext) IsConditionalExpressionContext() {}

func NewConditionalExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConditionalExpressionContext {
	var p = new(ConditionalExpressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_conditionalExpression

	return p
}

func (s *ConditionalExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ConditionalExpressionContext) LogicalOrExpression() ILogicalOrExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILogicalOrExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILogicalOrExpressionContext)
}

func (s *ConditionalExpressionContext) Question() antlr.TerminalNode {
	return s.GetToken(CPP14ParserQuestion, 0)
}

func (s *ConditionalExpressionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ConditionalExpressionContext) Colon() antlr.TerminalNode {
	return s.GetToken(CPP14ParserColon, 0)
}

func (s *ConditionalExpressionContext) AssignmentExpression() IAssignmentExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAssignmentExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpressionContext)
}

func (s *ConditionalExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConditionalExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConditionalExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitConditionalExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) ConditionalExpression() (localctx IConditionalExpressionContext) {
	localctx = NewConditionalExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, CPP14ParserRULE_conditionalExpression)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(805)
		p.LogicalOrExpression()
	}
	p.SetState(811)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserQuestion {
		{
			p.SetState(806)
			p.Match(CPP14ParserQuestion)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(807)
			p.Expression()
		}
		{
			p.SetState(808)
			p.Match(CPP14ParserColon)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(809)
			p.AssignmentExpression()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAssignmentExpressionContext is an interface to support dynamic dispatch.
type IAssignmentExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ConditionalExpression() IConditionalExpressionContext
	LogicalOrExpression() ILogicalOrExpressionContext
	AssignmentOperator() IAssignmentOperatorContext
	InitializerClause() IInitializerClauseContext
	ThrowExpression() IThrowExpressionContext

	// IsAssignmentExpressionContext differentiates from other interfaces.
	IsAssignmentExpressionContext()
}

type AssignmentExpressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssignmentExpressionContext() *AssignmentExpressionContext {
	var p = new(AssignmentExpressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_assignmentExpression
	return p
}

func InitEmptyAssignmentExpressionContext(p *AssignmentExpressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_assignmentExpression
}

func (*AssignmentExpressionContext) IsAssignmentExpressionContext() {}

func NewAssignmentExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssignmentExpressionContext {
	var p = new(AssignmentExpressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_assignmentExpression

	return p
}

func (s *AssignmentExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *AssignmentExpressionContext) ConditionalExpression() IConditionalExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConditionalExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConditionalExpressionContext)
}

func (s *AssignmentExpressionContext) LogicalOrExpression() ILogicalOrExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILogicalOrExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILogicalOrExpressionContext)
}

func (s *AssignmentExpressionContext) AssignmentOperator() IAssignmentOperatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAssignmentOperatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAssignmentOperatorContext)
}

func (s *AssignmentExpressionContext) InitializerClause() IInitializerClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInitializerClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInitializerClauseContext)
}

func (s *AssignmentExpressionContext) ThrowExpression() IThrowExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IThrowExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IThrowExpressionContext)
}

func (s *AssignmentExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssignmentExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssignmentExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitAssignmentExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) AssignmentExpression() (localctx IAssignmentExpressionContext) {
	localctx = NewAssignmentExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, CPP14ParserRULE_assignmentExpression)
	p.SetState(819)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 71, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(813)
			p.ConditionalExpression()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(814)
			p.LogicalOrExpression()
		}
		{
			p.SetState(815)
			p.AssignmentOperator()
		}
		{
			p.SetState(816)
			p.InitializerClause()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(818)
			p.ThrowExpression()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAssignmentOperatorContext is an interface to support dynamic dispatch.
type IAssignmentOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Assign() antlr.TerminalNode
	StarAssign() antlr.TerminalNode
	DivAssign() antlr.TerminalNode
	ModAssign() antlr.TerminalNode
	PlusAssign() antlr.TerminalNode
	MinusAssign() antlr.TerminalNode
	RightShiftAssign() antlr.TerminalNode
	LeftShiftAssign() antlr.TerminalNode
	AndAssign() antlr.TerminalNode
	XorAssign() antlr.TerminalNode
	OrAssign() antlr.TerminalNode

	// IsAssignmentOperatorContext differentiates from other interfaces.
	IsAssignmentOperatorContext()
}

type AssignmentOperatorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssignmentOperatorContext() *AssignmentOperatorContext {
	var p = new(AssignmentOperatorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_assignmentOperator
	return p
}

func InitEmptyAssignmentOperatorContext(p *AssignmentOperatorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_assignmentOperator
}

func (*AssignmentOperatorContext) IsAssignmentOperatorContext() {}

func NewAssignmentOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssignmentOperatorContext {
	var p = new(AssignmentOperatorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_assignmentOperator

	return p
}

func (s *AssignmentOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *AssignmentOperatorContext) Assign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAssign, 0)
}

func (s *AssignmentOperatorContext) StarAssign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserStarAssign, 0)
}

func (s *AssignmentOperatorContext) DivAssign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserDivAssign, 0)
}

func (s *AssignmentOperatorContext) ModAssign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserModAssign, 0)
}

func (s *AssignmentOperatorContext) PlusAssign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserPlusAssign, 0)
}

func (s *AssignmentOperatorContext) MinusAssign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserMinusAssign, 0)
}

func (s *AssignmentOperatorContext) RightShiftAssign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightShiftAssign, 0)
}

func (s *AssignmentOperatorContext) LeftShiftAssign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftShiftAssign, 0)
}

func (s *AssignmentOperatorContext) AndAssign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAndAssign, 0)
}

func (s *AssignmentOperatorContext) XorAssign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserXorAssign, 0)
}

func (s *AssignmentOperatorContext) OrAssign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserOrAssign, 0)
}

func (s *AssignmentOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssignmentOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssignmentOperatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitAssignmentOperator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) AssignmentOperator() (localctx IAssignmentOperatorContext) {
	localctx = NewAssignmentOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, CPP14ParserRULE_assignmentOperator)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(821)
		_la = p.GetTokenStream().LA(1)

		if !((int64((_la-101)) & ^0x3f) == 0 && ((int64(1)<<(_la-101))&8185) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExpressionContext is an interface to support dynamic dispatch.
type IExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllAssignmentExpression() []IAssignmentExpressionContext
	AssignmentExpression(i int) IAssignmentExpressionContext
	AllComma() []antlr.TerminalNode
	Comma(i int) antlr.TerminalNode

	// IsExpressionContext differentiates from other interfaces.
	IsExpressionContext()
}

type ExpressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionContext() *ExpressionContext {
	var p = new(ExpressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_expression
	return p
}

func InitEmptyExpressionContext(p *ExpressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_expression
}

func (*ExpressionContext) IsExpressionContext() {}

func NewExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionContext {
	var p = new(ExpressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_expression

	return p
}

func (s *ExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionContext) AllAssignmentExpression() []IAssignmentExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAssignmentExpressionContext); ok {
			len++
		}
	}

	tst := make([]IAssignmentExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAssignmentExpressionContext); ok {
			tst[i] = t.(IAssignmentExpressionContext)
			i++
		}
	}

	return tst
}

func (s *ExpressionContext) AssignmentExpression(i int) IAssignmentExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAssignmentExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpressionContext)
}

func (s *ExpressionContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserComma)
}

func (s *ExpressionContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserComma, i)
}

func (s *ExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) Expression() (localctx IExpressionContext) {
	localctx = NewExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 90, CPP14ParserRULE_expression)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(823)
		p.AssignmentExpression()
	}
	p.SetState(828)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == CPP14ParserComma {
		{
			p.SetState(824)
			p.Match(CPP14ParserComma)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(825)
			p.AssignmentExpression()
		}

		p.SetState(830)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IConstantExpressionContext is an interface to support dynamic dispatch.
type IConstantExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ConditionalExpression() IConditionalExpressionContext

	// IsConstantExpressionContext differentiates from other interfaces.
	IsConstantExpressionContext()
}

type ConstantExpressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstantExpressionContext() *ConstantExpressionContext {
	var p = new(ConstantExpressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_constantExpression
	return p
}

func InitEmptyConstantExpressionContext(p *ConstantExpressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_constantExpression
}

func (*ConstantExpressionContext) IsConstantExpressionContext() {}

func NewConstantExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConstantExpressionContext {
	var p = new(ConstantExpressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_constantExpression

	return p
}

func (s *ConstantExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ConstantExpressionContext) ConditionalExpression() IConditionalExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConditionalExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConditionalExpressionContext)
}

func (s *ConstantExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstantExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConstantExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitConstantExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) ConstantExpression() (localctx IConstantExpressionContext) {
	localctx = NewConstantExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 92, CPP14ParserRULE_constantExpression)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(831)
		p.ConditionalExpression()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStatementContext is an interface to support dynamic dispatch.
type IStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LabeledStatement() ILabeledStatementContext
	DeclarationStatement() IDeclarationStatementContext
	ExpressionStatement() IExpressionStatementContext
	CompoundStatement() ICompoundStatementContext
	SelectionStatement() ISelectionStatementContext
	IterationStatement() IIterationStatementContext
	JumpStatement() IJumpStatementContext
	TryBlock() ITryBlockContext
	AttributeSpecifierSeq() IAttributeSpecifierSeqContext

	// IsStatementContext differentiates from other interfaces.
	IsStatementContext()
}

type StatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatementContext() *StatementContext {
	var p = new(StatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_statement
	return p
}

func InitEmptyStatementContext(p *StatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_statement
}

func (*StatementContext) IsStatementContext() {}

func NewStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementContext {
	var p = new(StatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_statement

	return p
}

func (s *StatementContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementContext) LabeledStatement() ILabeledStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILabeledStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILabeledStatementContext)
}

func (s *StatementContext) DeclarationStatement() IDeclarationStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDeclarationStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDeclarationStatementContext)
}

func (s *StatementContext) ExpressionStatement() IExpressionStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionStatementContext)
}

func (s *StatementContext) CompoundStatement() ICompoundStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICompoundStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICompoundStatementContext)
}

func (s *StatementContext) SelectionStatement() ISelectionStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelectionStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelectionStatementContext)
}

func (s *StatementContext) IterationStatement() IIterationStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIterationStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIterationStatementContext)
}

func (s *StatementContext) JumpStatement() IJumpStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IJumpStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IJumpStatementContext)
}

func (s *StatementContext) TryBlock() ITryBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITryBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITryBlockContext)
}

func (s *StatementContext) AttributeSpecifierSeq() IAttributeSpecifierSeqContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributeSpecifierSeqContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributeSpecifierSeqContext)
}

func (s *StatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) Statement() (localctx IStatementContext) {
	localctx = NewStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, CPP14ParserRULE_statement)
	p.SetState(846)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 75, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(833)
			p.LabeledStatement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(834)
			p.DeclarationStatement()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		p.SetState(836)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 73, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(835)
				p.AttributeSpecifierSeq()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(844)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetTokenStream().LA(1) {
		case CPP14ParserIntegerLiteral, CPP14ParserCharacterLiteral, CPP14ParserFloatingLiteral, CPP14ParserStringLiteral, CPP14ParserBooleanLiteral, CPP14ParserPointerLiteral, CPP14ParserUserDefinedLiteral, CPP14ParserAlignof, CPP14ParserAuto, CPP14ParserBool, CPP14ParserChar, CPP14ParserChar16, CPP14ParserChar32, CPP14ParserConst_cast, CPP14ParserDecltype, CPP14ParserDelete, CPP14ParserDouble, CPP14ParserDynamic_cast, CPP14ParserFloat, CPP14ParserInt, CPP14ParserLong, CPP14ParserNew, CPP14ParserNoexcept, CPP14ParserOperator, CPP14ParserReinterpret_cast, CPP14ParserShort, CPP14ParserSigned, CPP14ParserSizeof, CPP14ParserStatic_cast, CPP14ParserThis, CPP14ParserThrow, CPP14ParserTypeid_, CPP14ParserTypename_, CPP14ParserUnsigned, CPP14ParserVoid, CPP14ParserWchar, CPP14ParserLeftParen, CPP14ParserLeftBracket, CPP14ParserPlus, CPP14ParserMinus, CPP14ParserStar, CPP14ParserAnd, CPP14ParserOr, CPP14ParserTilde, CPP14ParserNot, CPP14ParserPlusPlus, CPP14ParserMinusMinus, CPP14ParserDoublecolon, CPP14ParserSemi, CPP14ParserIdentifier:
			{
				p.SetState(838)
				p.ExpressionStatement()
			}

		case CPP14ParserLeftBrace:
			{
				p.SetState(839)
				p.CompoundStatement()
			}

		case CPP14ParserIf, CPP14ParserSwitch:
			{
				p.SetState(840)
				p.SelectionStatement()
			}

		case CPP14ParserDo, CPP14ParserFor, CPP14ParserWhile:
			{
				p.SetState(841)
				p.IterationStatement()
			}

		case CPP14ParserBreak, CPP14ParserContinue, CPP14ParserGoto, CPP14ParserReturn:
			{
				p.SetState(842)
				p.JumpStatement()
			}

		case CPP14ParserTry:
			{
				p.SetState(843)
				p.TryBlock()
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILabeledStatementContext is an interface to support dynamic dispatch.
type ILabeledStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Colon() antlr.TerminalNode
	Statement() IStatementContext
	Identifier() antlr.TerminalNode
	Case() antlr.TerminalNode
	ConstantExpression() IConstantExpressionContext
	Default() antlr.TerminalNode
	AttributeSpecifierSeq() IAttributeSpecifierSeqContext

	// IsLabeledStatementContext differentiates from other interfaces.
	IsLabeledStatementContext()
}

type LabeledStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLabeledStatementContext() *LabeledStatementContext {
	var p = new(LabeledStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_labeledStatement
	return p
}

func InitEmptyLabeledStatementContext(p *LabeledStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_labeledStatement
}

func (*LabeledStatementContext) IsLabeledStatementContext() {}

func NewLabeledStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LabeledStatementContext {
	var p = new(LabeledStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_labeledStatement

	return p
}

func (s *LabeledStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *LabeledStatementContext) Colon() antlr.TerminalNode {
	return s.GetToken(CPP14ParserColon, 0)
}

func (s *LabeledStatementContext) Statement() IStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *LabeledStatementContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *LabeledStatementContext) Case() antlr.TerminalNode {
	return s.GetToken(CPP14ParserCase, 0)
}

func (s *LabeledStatementContext) ConstantExpression() IConstantExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConstantExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConstantExpressionContext)
}

func (s *LabeledStatementContext) Default() antlr.TerminalNode {
	return s.GetToken(CPP14ParserDefault, 0)
}

func (s *LabeledStatementContext) AttributeSpecifierSeq() IAttributeSpecifierSeqContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributeSpecifierSeqContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributeSpecifierSeqContext)
}

func (s *LabeledStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LabeledStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LabeledStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitLabeledStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) LabeledStatement() (localctx ILabeledStatementContext) {
	localctx = NewLabeledStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, CPP14ParserRULE_labeledStatement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(849)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserAlignas || _la == CPP14ParserLeftBracket {
		{
			p.SetState(848)
			p.AttributeSpecifierSeq()
		}

	}
	p.SetState(855)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserIdentifier:
		{
			p.SetState(851)
			p.Match(CPP14ParserIdentifier)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case CPP14ParserCase:
		{
			p.SetState(852)
			p.Match(CPP14ParserCase)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(853)
			p.ConstantExpression()
		}

	case CPP14ParserDefault:
		{
			p.SetState(854)
			p.Match(CPP14ParserDefault)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}
	{
		p.SetState(857)
		p.Match(CPP14ParserColon)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(858)
		p.Statement()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExpressionStatementContext is an interface to support dynamic dispatch.
type IExpressionStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Semi() antlr.TerminalNode
	Expression() IExpressionContext

	// IsExpressionStatementContext differentiates from other interfaces.
	IsExpressionStatementContext()
}

type ExpressionStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionStatementContext() *ExpressionStatementContext {
	var p = new(ExpressionStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_expressionStatement
	return p
}

func InitEmptyExpressionStatementContext(p *ExpressionStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_expressionStatement
}

func (*ExpressionStatementContext) IsExpressionStatementContext() {}

func NewExpressionStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionStatementContext {
	var p = new(ExpressionStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_expressionStatement

	return p
}

func (s *ExpressionStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionStatementContext) Semi() antlr.TerminalNode {
	return s.GetToken(CPP14ParserSemi, 0)
}

func (s *ExpressionStatementContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitExpressionStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) ExpressionStatement() (localctx IExpressionStatementContext) {
	localctx = NewExpressionStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, CPP14ParserRULE_expressionStatement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(861)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&8364979464334764286) != 0) || ((int64((_la-65)) & ^0x3f) == 0 && ((int64(1)<<(_la-65))&4719772474384133201) != 0) || _la == CPP14ParserIdentifier {
		{
			p.SetState(860)
			p.Expression()
		}

	}
	{
		p.SetState(863)
		p.Match(CPP14ParserSemi)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICompoundStatementContext is an interface to support dynamic dispatch.
type ICompoundStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LeftBrace() antlr.TerminalNode
	RightBrace() antlr.TerminalNode
	StatementSeq() IStatementSeqContext

	// IsCompoundStatementContext differentiates from other interfaces.
	IsCompoundStatementContext()
}

type CompoundStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCompoundStatementContext() *CompoundStatementContext {
	var p = new(CompoundStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_compoundStatement
	return p
}

func InitEmptyCompoundStatementContext(p *CompoundStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_compoundStatement
}

func (*CompoundStatementContext) IsCompoundStatementContext() {}

func NewCompoundStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CompoundStatementContext {
	var p = new(CompoundStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_compoundStatement

	return p
}

func (s *CompoundStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *CompoundStatementContext) LeftBrace() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftBrace, 0)
}

func (s *CompoundStatementContext) RightBrace() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightBrace, 0)
}

func (s *CompoundStatementContext) StatementSeq() IStatementSeqContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatementSeqContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatementSeqContext)
}

func (s *CompoundStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CompoundStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CompoundStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitCompoundStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) CompoundStatement() (localctx ICompoundStatementContext) {
	localctx = NewCompoundStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, CPP14ParserRULE_compoundStatement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(865)
		p.Match(CPP14ParserLeftBrace)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(867)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-137360239606498050) != 0) || ((int64((_la-64)) & ^0x3f) == 0 && ((int64(1)<<(_la-64))&-8989184726396829969) != 0) || ((int64((_la-128)) & ^0x3f) == 0 && ((int64(1)<<(_la-128))&25) != 0) {
		{
			p.SetState(866)
			p.StatementSeq()
		}

	}
	{
		p.SetState(869)
		p.Match(CPP14ParserRightBrace)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStatementSeqContext is an interface to support dynamic dispatch.
type IStatementSeqContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllStatement() []IStatementContext
	Statement(i int) IStatementContext

	// IsStatementSeqContext differentiates from other interfaces.
	IsStatementSeqContext()
}

type StatementSeqContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatementSeqContext() *StatementSeqContext {
	var p = new(StatementSeqContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_statementSeq
	return p
}

func InitEmptyStatementSeqContext(p *StatementSeqContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_statementSeq
}

func (*StatementSeqContext) IsStatementSeqContext() {}

func NewStatementSeqContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementSeqContext {
	var p = new(StatementSeqContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_statementSeq

	return p
}

func (s *StatementSeqContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementSeqContext) AllStatement() []IStatementContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStatementContext); ok {
			len++
		}
	}

	tst := make([]IStatementContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStatementContext); ok {
			tst[i] = t.(IStatementContext)
			i++
		}
	}

	return tst
}

func (s *StatementSeqContext) Statement(i int) IStatementContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatementContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *StatementSeqContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementSeqContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StatementSeqContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitStatementSeq(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) StatementSeq() (localctx IStatementSeqContext) {
	localctx = NewStatementSeqContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 102, CPP14ParserRULE_statementSeq)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(872)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-137360239606498050) != 0) || ((int64((_la-64)) & ^0x3f) == 0 && ((int64(1)<<(_la-64))&-8989184726396829969) != 0) || ((int64((_la-128)) & ^0x3f) == 0 && ((int64(1)<<(_la-128))&25) != 0) {
		{
			p.SetState(871)
			p.Statement()
		}

		p.SetState(874)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISelectionStatementContext is an interface to support dynamic dispatch.
type ISelectionStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	If() antlr.TerminalNode
	LeftParen() antlr.TerminalNode
	Condition() IConditionContext
	RightParen() antlr.TerminalNode
	AllStatement() []IStatementContext
	Statement(i int) IStatementContext
	Else() antlr.TerminalNode
	Switch() antlr.TerminalNode

	// IsSelectionStatementContext differentiates from other interfaces.
	IsSelectionStatementContext()
}

type SelectionStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelectionStatementContext() *SelectionStatementContext {
	var p = new(SelectionStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_selectionStatement
	return p
}

func InitEmptySelectionStatementContext(p *SelectionStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_selectionStatement
}

func (*SelectionStatementContext) IsSelectionStatementContext() {}

func NewSelectionStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SelectionStatementContext {
	var p = new(SelectionStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_selectionStatement

	return p
}

func (s *SelectionStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *SelectionStatementContext) If() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIf, 0)
}

func (s *SelectionStatementContext) LeftParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, 0)
}

func (s *SelectionStatementContext) Condition() IConditionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConditionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConditionContext)
}

func (s *SelectionStatementContext) RightParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, 0)
}

func (s *SelectionStatementContext) AllStatement() []IStatementContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStatementContext); ok {
			len++
		}
	}

	tst := make([]IStatementContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStatementContext); ok {
			tst[i] = t.(IStatementContext)
			i++
		}
	}

	return tst
}

func (s *SelectionStatementContext) Statement(i int) IStatementContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatementContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *SelectionStatementContext) Else() antlr.TerminalNode {
	return s.GetToken(CPP14ParserElse, 0)
}

func (s *SelectionStatementContext) Switch() antlr.TerminalNode {
	return s.GetToken(CPP14ParserSwitch, 0)
}

func (s *SelectionStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectionStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SelectionStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitSelectionStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) SelectionStatement() (localctx ISelectionStatementContext) {
	localctx = NewSelectionStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 104, CPP14ParserRULE_selectionStatement)
	p.SetState(891)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserIf:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(876)
			p.Match(CPP14ParserIf)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(877)
			p.Match(CPP14ParserLeftParen)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(878)
			p.Condition()
		}
		{
			p.SetState(879)
			p.Match(CPP14ParserRightParen)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(880)
			p.Statement()
		}
		p.SetState(883)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 81, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(881)
				p.Match(CPP14ParserElse)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(882)
				p.Statement()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case CPP14ParserSwitch:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(885)
			p.Match(CPP14ParserSwitch)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(886)
			p.Match(CPP14ParserLeftParen)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(887)
			p.Condition()
		}
		{
			p.SetState(888)
			p.Match(CPP14ParserRightParen)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(889)
			p.Statement()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IConditionContext is an interface to support dynamic dispatch.
type IConditionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Expression() IExpressionContext
	DeclSpecifierSeq() IDeclSpecifierSeqContext
	Declarator() IDeclaratorContext
	Assign() antlr.TerminalNode
	InitializerClause() IInitializerClauseContext
	BracedInitList() IBracedInitListContext
	AttributeSpecifierSeq() IAttributeSpecifierSeqContext

	// IsConditionContext differentiates from other interfaces.
	IsConditionContext()
}

type ConditionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConditionContext() *ConditionContext {
	var p = new(ConditionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_condition
	return p
}

func InitEmptyConditionContext(p *ConditionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_condition
}

func (*ConditionContext) IsConditionContext() {}

func NewConditionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConditionContext {
	var p = new(ConditionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_condition

	return p
}

func (s *ConditionContext) GetParser() antlr.Parser { return s.parser }

func (s *ConditionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ConditionContext) DeclSpecifierSeq() IDeclSpecifierSeqContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDeclSpecifierSeqContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDeclSpecifierSeqContext)
}

func (s *ConditionContext) Declarator() IDeclaratorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDeclaratorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDeclaratorContext)
}

func (s *ConditionContext) Assign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAssign, 0)
}

func (s *ConditionContext) InitializerClause() IInitializerClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInitializerClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInitializerClauseContext)
}

func (s *ConditionContext) BracedInitList() IBracedInitListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBracedInitListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBracedInitListContext)
}

func (s *ConditionContext) AttributeSpecifierSeq() IAttributeSpecifierSeqContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributeSpecifierSeqContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributeSpecifierSeqContext)
}

func (s *ConditionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConditionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConditionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitCondition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) Condition() (localctx IConditionContext) {
	localctx = NewConditionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 106, CPP14ParserRULE_condition)
	var _la int

	p.SetState(904)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 85, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(893)
			p.Expression()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(895)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == CPP14ParserAlignas || _la == CPP14ParserLeftBracket {
			{
				p.SetState(894)
				p.AttributeSpecifierSeq()
			}

		}
		{
			p.SetState(897)
			p.DeclSpecifierSeq()
		}
		{
			p.SetState(898)
			p.Declarator()
		}
		p.SetState(902)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetTokenStream().LA(1) {
		case CPP14ParserAssign:
			{
				p.SetState(899)
				p.Match(CPP14ParserAssign)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(900)
				p.InitializerClause()
			}

		case CPP14ParserLeftBrace:
			{
				p.SetState(901)
				p.BracedInitList()
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIterationStatementContext is an interface to support dynamic dispatch.
type IIterationStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	While() antlr.TerminalNode
	LeftParen() antlr.TerminalNode
	Condition() IConditionContext
	RightParen() antlr.TerminalNode
	Statement() IStatementContext
	Do() antlr.TerminalNode
	Expression() IExpressionContext
	Semi() antlr.TerminalNode
	For() antlr.TerminalNode
	ForInitStatement() IForInitStatementContext
	ForRangeDeclaration() IForRangeDeclarationContext
	Colon() antlr.TerminalNode
	ForRangeInitializer() IForRangeInitializerContext

	// IsIterationStatementContext differentiates from other interfaces.
	IsIterationStatementContext()
}

type IterationStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIterationStatementContext() *IterationStatementContext {
	var p = new(IterationStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_iterationStatement
	return p
}

func InitEmptyIterationStatementContext(p *IterationStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_iterationStatement
}

func (*IterationStatementContext) IsIterationStatementContext() {}

func NewIterationStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IterationStatementContext {
	var p = new(IterationStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_iterationStatement

	return p
}

func (s *IterationStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *IterationStatementContext) While() antlr.TerminalNode {
	return s.GetToken(CPP14ParserWhile, 0)
}

func (s *IterationStatementContext) LeftParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, 0)
}

func (s *IterationStatementContext) Condition() IConditionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConditionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConditionContext)
}

func (s *IterationStatementContext) RightParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, 0)
}

func (s *IterationStatementContext) Statement() IStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *IterationStatementContext) Do() antlr.TerminalNode {
	return s.GetToken(CPP14ParserDo, 0)
}

func (s *IterationStatementContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *IterationStatementContext) Semi() antlr.TerminalNode {
	return s.GetToken(CPP14ParserSemi, 0)
}

func (s *IterationStatementContext) For() antlr.TerminalNode {
	return s.GetToken(CPP14ParserFor, 0)
}

func (s *IterationStatementContext) ForInitStatement() IForInitStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IForInitStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IForInitStatementContext)
}

func (s *IterationStatementContext) ForRangeDeclaration() IForRangeDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IForRangeDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IForRangeDeclarationContext)
}

func (s *IterationStatementContext) Colon() antlr.TerminalNode {
	return s.GetToken(CPP14ParserColon, 0)
}

func (s *IterationStatementContext) ForRangeInitializer() IForRangeInitializerContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IForRangeInitializerContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IForRangeInitializerContext)
}

func (s *IterationStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IterationStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IterationStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitIterationStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) IterationStatement() (localctx IIterationStatementContext) {
	localctx = NewIterationStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, CPP14ParserRULE_iterationStatement)
	var _la int

	p.SetState(939)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserWhile:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(906)
			p.Match(CPP14ParserWhile)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(907)
			p.Match(CPP14ParserLeftParen)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(908)
			p.Condition()
		}
		{
			p.SetState(909)
			p.Match(CPP14ParserRightParen)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(910)
			p.Statement()
		}

	case CPP14ParserDo:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(912)
			p.Match(CPP14ParserDo)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(913)
			p.Statement()
		}
		{
			p.SetState(914)
			p.Match(CPP14ParserWhile)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(915)
			p.Match(CPP14ParserLeftParen)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(916)
			p.Expression()
		}
		{
			p.SetState(917)
			p.Match(CPP14ParserRightParen)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(918)
			p.Match(CPP14ParserSemi)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case CPP14ParserFor:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(920)
			p.Match(CPP14ParserFor)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(921)
			p.Match(CPP14ParserLeftParen)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(934)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 88, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(922)
				p.ForInitStatement()
			}
			p.SetState(924)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-714116761242538754) != 0) || ((int64((_la-65)) & ^0x3f) == 0 && ((int64(1)<<(_la-65))&4719772474384301683) != 0) || _la == CPP14ParserIdentifier {
				{
					p.SetState(923)
					p.Condition()
				}

			}
			{
				p.SetState(926)
				p.Match(CPP14ParserSemi)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			p.SetState(928)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&8364979464334764286) != 0) || ((int64((_la-65)) & ^0x3f) == 0 && ((int64(1)<<(_la-65))&4719772474384133201) != 0) || _la == CPP14ParserIdentifier {
				{
					p.SetState(927)
					p.Expression()
				}

			}

		case 2:
			{
				p.SetState(930)
				p.ForRangeDeclaration()
			}
			{
				p.SetState(931)
				p.Match(CPP14ParserColon)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(932)
				p.ForRangeInitializer()
			}

		case antlr.ATNInvalidAltNumber:
			goto errorExit
		}
		{
			p.SetState(936)
			p.Match(CPP14ParserRightParen)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(937)
			p.Statement()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IForInitStatementContext is an interface to support dynamic dispatch.
type IForInitStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ExpressionStatement() IExpressionStatementContext
	SimpleDeclaration() ISimpleDeclarationContext

	// IsForInitStatementContext differentiates from other interfaces.
	IsForInitStatementContext()
}

type ForInitStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForInitStatementContext() *ForInitStatementContext {
	var p = new(ForInitStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_forInitStatement
	return p
}

func InitEmptyForInitStatementContext(p *ForInitStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_forInitStatement
}

func (*ForInitStatementContext) IsForInitStatementContext() {}

func NewForInitStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ForInitStatementContext {
	var p = new(ForInitStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_forInitStatement

	return p
}

func (s *ForInitStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ForInitStatementContext) ExpressionStatement() IExpressionStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionStatementContext)
}

func (s *ForInitStatementContext) SimpleDeclaration() ISimpleDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISimpleDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISimpleDeclarationContext)
}

func (s *ForInitStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ForInitStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ForInitStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitForInitStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) ForInitStatement() (localctx IForInitStatementContext) {
	localctx = NewForInitStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 110, CPP14ParserRULE_forInitStatement)
	p.SetState(943)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 90, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(941)
			p.ExpressionStatement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(942)
			p.SimpleDeclaration()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IForRangeDeclarationContext is an interface to support dynamic dispatch.
type IForRangeDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DeclSpecifierSeq() IDeclSpecifierSeqContext
	Declarator() IDeclaratorContext
	AttributeSpecifierSeq() IAttributeSpecifierSeqContext

	// IsForRangeDeclarationContext differentiates from other interfaces.
	IsForRangeDeclarationContext()
}

type ForRangeDeclarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForRangeDeclarationContext() *ForRangeDeclarationContext {
	var p = new(ForRangeDeclarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_forRangeDeclaration
	return p
}

func InitEmptyForRangeDeclarationContext(p *ForRangeDeclarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_forRangeDeclaration
}

func (*ForRangeDeclarationContext) IsForRangeDeclarationContext() {}

func NewForRangeDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ForRangeDeclarationContext {
	var p = new(ForRangeDeclarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_forRangeDeclaration

	return p
}

func (s *ForRangeDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *ForRangeDeclarationContext) DeclSpecifierSeq() IDeclSpecifierSeqContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDeclSpecifierSeqContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDeclSpecifierSeqContext)
}

func (s *ForRangeDeclarationContext) Declarator() IDeclaratorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDeclaratorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDeclaratorContext)
}

func (s *ForRangeDeclarationContext) AttributeSpecifierSeq() IAttributeSpecifierSeqContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributeSpecifierSeqContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributeSpecifierSeqContext)
}

func (s *ForRangeDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ForRangeDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ForRangeDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitForRangeDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) ForRangeDeclaration() (localctx IForRangeDeclarationContext) {
	localctx = NewForRangeDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 112, CPP14ParserRULE_forRangeDeclaration)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(946)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserAlignas || _la == CPP14ParserLeftBracket {
		{
			p.SetState(945)
			p.AttributeSpecifierSeq()
		}

	}
	{
		p.SetState(948)
		p.DeclSpecifierSeq()
	}
	{
		p.SetState(949)
		p.Declarator()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IForRangeInitializerContext is an interface to support dynamic dispatch.
type IForRangeInitializerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Expression() IExpressionContext
	BracedInitList() IBracedInitListContext

	// IsForRangeInitializerContext differentiates from other interfaces.
	IsForRangeInitializerContext()
}

type ForRangeInitializerContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForRangeInitializerContext() *ForRangeInitializerContext {
	var p = new(ForRangeInitializerContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_forRangeInitializer
	return p
}

func InitEmptyForRangeInitializerContext(p *ForRangeInitializerContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_forRangeInitializer
}

func (*ForRangeInitializerContext) IsForRangeInitializerContext() {}

func NewForRangeInitializerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ForRangeInitializerContext {
	var p = new(ForRangeInitializerContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_forRangeInitializer

	return p
}

func (s *ForRangeInitializerContext) GetParser() antlr.Parser { return s.parser }

func (s *ForRangeInitializerContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ForRangeInitializerContext) BracedInitList() IBracedInitListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBracedInitListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBracedInitListContext)
}

func (s *ForRangeInitializerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ForRangeInitializerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ForRangeInitializerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitForRangeInitializer(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) ForRangeInitializer() (localctx IForRangeInitializerContext) {
	localctx = NewForRangeInitializerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 114, CPP14ParserRULE_forRangeInitializer)
	p.SetState(953)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserIntegerLiteral, CPP14ParserCharacterLiteral, CPP14ParserFloatingLiteral, CPP14ParserStringLiteral, CPP14ParserBooleanLiteral, CPP14ParserPointerLiteral, CPP14ParserUserDefinedLiteral, CPP14ParserAlignof, CPP14ParserAuto, CPP14ParserBool, CPP14ParserChar, CPP14ParserChar16, CPP14ParserChar32, CPP14ParserConst_cast, CPP14ParserDecltype, CPP14ParserDelete, CPP14ParserDouble, CPP14ParserDynamic_cast, CPP14ParserFloat, CPP14ParserInt, CPP14ParserLong, CPP14ParserNew, CPP14ParserNoexcept, CPP14ParserOperator, CPP14ParserReinterpret_cast, CPP14ParserShort, CPP14ParserSigned, CPP14ParserSizeof, CPP14ParserStatic_cast, CPP14ParserThis, CPP14ParserThrow, CPP14ParserTypeid_, CPP14ParserTypename_, CPP14ParserUnsigned, CPP14ParserVoid, CPP14ParserWchar, CPP14ParserLeftParen, CPP14ParserLeftBracket, CPP14ParserPlus, CPP14ParserMinus, CPP14ParserStar, CPP14ParserAnd, CPP14ParserOr, CPP14ParserTilde, CPP14ParserNot, CPP14ParserPlusPlus, CPP14ParserMinusMinus, CPP14ParserDoublecolon, CPP14ParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(951)
			p.Expression()
		}

	case CPP14ParserLeftBrace:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(952)
			p.BracedInitList()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IJumpStatementContext is an interface to support dynamic dispatch.
type IJumpStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Semi() antlr.TerminalNode
	Break() antlr.TerminalNode
	Continue() antlr.TerminalNode
	Return() antlr.TerminalNode
	Goto() antlr.TerminalNode
	Identifier() antlr.TerminalNode
	Expression() IExpressionContext
	BracedInitList() IBracedInitListContext

	// IsJumpStatementContext differentiates from other interfaces.
	IsJumpStatementContext()
}

type JumpStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJumpStatementContext() *JumpStatementContext {
	var p = new(JumpStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_jumpStatement
	return p
}

func InitEmptyJumpStatementContext(p *JumpStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_jumpStatement
}

func (*JumpStatementContext) IsJumpStatementContext() {}

func NewJumpStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *JumpStatementContext {
	var p = new(JumpStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_jumpStatement

	return p
}

func (s *JumpStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *JumpStatementContext) Semi() antlr.TerminalNode {
	return s.GetToken(CPP14ParserSemi, 0)
}

func (s *JumpStatementContext) Break() antlr.TerminalNode {
	return s.GetToken(CPP14ParserBreak, 0)
}

func (s *JumpStatementContext) Continue() antlr.TerminalNode {
	return s.GetToken(CPP14ParserContinue, 0)
}

func (s *JumpStatementContext) Return() antlr.TerminalNode {
	return s.GetToken(CPP14ParserReturn, 0)
}

func (s *JumpStatementContext) Goto() antlr.TerminalNode {
	return s.GetToken(CPP14ParserGoto, 0)
}

func (s *JumpStatementContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *JumpStatementContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *JumpStatementContext) BracedInitList() IBracedInitListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBracedInitListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBracedInitListContext)
}

func (s *JumpStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JumpStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *JumpStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitJumpStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) JumpStatement() (localctx IJumpStatementContext) {
	localctx = NewJumpStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 116, CPP14ParserRULE_jumpStatement)
	p.EnterOuterAlt(localctx, 1)
	p.SetState(964)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserBreak:
		{
			p.SetState(955)
			p.Match(CPP14ParserBreak)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case CPP14ParserContinue:
		{
			p.SetState(956)
			p.Match(CPP14ParserContinue)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case CPP14ParserReturn:
		{
			p.SetState(957)
			p.Match(CPP14ParserReturn)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(960)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		switch p.GetTokenStream().LA(1) {
		case CPP14ParserIntegerLiteral, CPP14ParserCharacterLiteral, CPP14ParserFloatingLiteral, CPP14ParserStringLiteral, CPP14ParserBooleanLiteral, CPP14ParserPointerLiteral, CPP14ParserUserDefinedLiteral, CPP14ParserAlignof, CPP14ParserAuto, CPP14ParserBool, CPP14ParserChar, CPP14ParserChar16, CPP14ParserChar32, CPP14ParserConst_cast, CPP14ParserDecltype, CPP14ParserDelete, CPP14ParserDouble, CPP14ParserDynamic_cast, CPP14ParserFloat, CPP14ParserInt, CPP14ParserLong, CPP14ParserNew, CPP14ParserNoexcept, CPP14ParserOperator, CPP14ParserReinterpret_cast, CPP14ParserShort, CPP14ParserSigned, CPP14ParserSizeof, CPP14ParserStatic_cast, CPP14ParserThis, CPP14ParserThrow, CPP14ParserTypeid_, CPP14ParserTypename_, CPP14ParserUnsigned, CPP14ParserVoid, CPP14ParserWchar, CPP14ParserLeftParen, CPP14ParserLeftBracket, CPP14ParserPlus, CPP14ParserMinus, CPP14ParserStar, CPP14ParserAnd, CPP14ParserOr, CPP14ParserTilde, CPP14ParserNot, CPP14ParserPlusPlus, CPP14ParserMinusMinus, CPP14ParserDoublecolon, CPP14ParserIdentifier:
			{
				p.SetState(958)
				p.Expression()
			}

		case CPP14ParserLeftBrace:
			{
				p.SetState(959)
				p.BracedInitList()
			}

		case CPP14ParserSemi:

		default:
		}

	case CPP14ParserGoto:
		{
			p.SetState(962)
			p.Match(CPP14ParserGoto)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(963)
			p.Match(CPP14ParserIdentifier)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}
	{
		p.SetState(966)
		p.Match(CPP14ParserSemi)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDeclarationStatementContext is an interface to support dynamic dispatch.
type IDeclarationStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	BlockDeclaration() IBlockDeclarationContext

	// IsDeclarationStatementContext differentiates from other interfaces.
	IsDeclarationStatementContext()
}

type DeclarationStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclarationStatementContext() *DeclarationStatementContext {
	var p = new(DeclarationStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_declarationStatement
	return p
}

func InitEmptyDeclarationStatementContext(p *DeclarationStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_declarationStatement
}

func (*DeclarationStatementContext) IsDeclarationStatementContext() {}

func NewDeclarationStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclarationStatementContext {
	var p = new(DeclarationStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_declarationStatement

	return p
}

func (s *DeclarationStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *DeclarationStatementContext) BlockDeclaration() IBlockDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockDeclarationContext)
}

func (s *DeclarationStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclarationStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeclarationStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitDeclarationStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) DeclarationStatement() (localctx IDeclarationStatementContext) {
	localctx = NewDeclarationStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 118, CPP14ParserRULE_declarationStatement)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(968)
		p.BlockDeclaration()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDeclarationseqContext is an interface to support dynamic dispatch.
type IDeclarationseqContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllDeclaration() []IDeclarationContext
	Declaration(i int) IDeclarationContext

	// IsDeclarationseqContext differentiates from other interfaces.
	IsDeclarationseqContext()
}

type DeclarationseqContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclarationseqContext() *DeclarationseqContext {
	var p = new(DeclarationseqContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_declarationseq
	return p
}

func InitEmptyDeclarationseqContext(p *DeclarationseqContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_declarationseq
}

func (*DeclarationseqContext) IsDeclarationseqContext() {}

func NewDeclarationseqContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclarationseqContext {
	var p = new(DeclarationseqContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_declarationseq

	return p
}

func (s *DeclarationseqContext) GetParser() antlr.Parser { return s.parser }

func (s *DeclarationseqContext) AllDeclaration() []IDeclarationContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDeclarationContext); ok {
			len++
		}
	}

	tst := make([]IDeclarationContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDeclarationContext); ok {
			tst[i] = t.(IDeclarationContext)
			i++
		}
	}

	return tst
}

func (s *DeclarationseqContext) Declaration(i int) IDeclarationContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDeclarationContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDeclarationContext)
}

func (s *DeclarationseqContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclarationseqContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeclarationseqContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitDeclarationseq(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) Declarationseq() (localctx IDeclarationseqContext) {
	localctx = NewDeclarationseqContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 120, CPP14ParserRULE_declarationseq)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(971)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = ((int64((_la-10)) & ^0x3f) == 0 && ((int64(1)<<(_la-10))&1543754443169808157) != 0) || ((int64((_la-74)) & ^0x3f) == 0 && ((int64(1)<<(_la-74))&459384754220313597) != 0) {
		{
			p.SetState(970)
			p.Declaration()
		}

		p.SetState(973)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDeclarationContext is an interface to support dynamic dispatch.
type IDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	BlockDeclaration() IBlockDeclarationContext
	FunctionDefinition() IFunctionDefinitionContext
	TemplateDeclaration() ITemplateDeclarationContext
	ExplicitInstantiation() IExplicitInstantiationContext
	ExplicitSpecialization() IExplicitSpecializationContext
	LinkageSpecification() ILinkageSpecificationContext
	NamespaceDefinition() INamespaceDefinitionContext
	BlankDeclaration() IBlankDeclarationContext
	AttributeDeclaration() IAttributeDeclarationContext

	// IsDeclarationContext differentiates from other interfaces.
	IsDeclarationContext()
}

type DeclarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclarationContext() *DeclarationContext {
	var p = new(DeclarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_declaration
	return p
}

func InitEmptyDeclarationContext(p *DeclarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_declaration
}

func (*DeclarationContext) IsDeclarationContext() {}

func NewDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclarationContext {
	var p = new(DeclarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_declaration

	return p
}

func (s *DeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *DeclarationContext) BlockDeclaration() IBlockDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockDeclarationContext)
}

func (s *DeclarationContext) FunctionDefinition() IFunctionDefinitionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunctionDefinitionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunctionDefinitionContext)
}

func (s *DeclarationContext) TemplateDeclaration() ITemplateDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplateDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplateDeclarationContext)
}

func (s *DeclarationContext) ExplicitInstantiation() IExplicitInstantiationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExplicitInstantiationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExplicitInstantiationContext)
}

func (s *DeclarationContext) ExplicitSpecialization() IExplicitSpecializationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExplicitSpecializationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExplicitSpecializationContext)
}

func (s *DeclarationContext) LinkageSpecification() ILinkageSpecificationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILinkageSpecificationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILinkageSpecificationContext)
}

func (s *DeclarationContext) NamespaceDefinition() INamespaceDefinitionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INamespaceDefinitionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INamespaceDefinitionContext)
}

func (s *DeclarationContext) BlankDeclaration() IBlankDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlankDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlankDeclarationContext)
}

func (s *DeclarationContext) AttributeDeclaration() IAttributeDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributeDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributeDeclarationContext)
}

func (s *DeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) Declaration() (localctx IDeclarationContext) {
	localctx = NewDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 122, CPP14ParserRULE_declaration)
	p.SetState(984)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 96, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(975)
			p.BlockDeclaration()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(976)
			p.FunctionDefinition()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(977)
			p.TemplateDeclaration()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(978)
			p.ExplicitInstantiation()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(979)
			p.ExplicitSpecialization()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(980)
			p.LinkageSpecification()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(981)
			p.NamespaceDefinition()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(982)
			p.BlankDeclaration()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(983)
			p.AttributeDeclaration()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBlockDeclarationContext is an interface to support dynamic dispatch.
type IBlockDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SimpleDeclaration() ISimpleDeclarationContext
	AsmDefinition() IAsmDefinitionContext
	NamespaceAliasDefinition() INamespaceAliasDefinitionContext
	UsingDeclaration() IUsingDeclarationContext
	UsingDirective() IUsingDirectiveContext
	StaticAssertDeclaration() IStaticAssertDeclarationContext
	AliasDeclaration() IAliasDeclarationContext
	OpaqueEnumDeclaration() IOpaqueEnumDeclarationContext

	// IsBlockDeclarationContext differentiates from other interfaces.
	IsBlockDeclarationContext()
}

type BlockDeclarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBlockDeclarationContext() *BlockDeclarationContext {
	var p = new(BlockDeclarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_blockDeclaration
	return p
}

func InitEmptyBlockDeclarationContext(p *BlockDeclarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_blockDeclaration
}

func (*BlockDeclarationContext) IsBlockDeclarationContext() {}

func NewBlockDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BlockDeclarationContext {
	var p = new(BlockDeclarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_blockDeclaration

	return p
}

func (s *BlockDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *BlockDeclarationContext) SimpleDeclaration() ISimpleDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISimpleDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISimpleDeclarationContext)
}

func (s *BlockDeclarationContext) AsmDefinition() IAsmDefinitionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAsmDefinitionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAsmDefinitionContext)
}

func (s *BlockDeclarationContext) NamespaceAliasDefinition() INamespaceAliasDefinitionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INamespaceAliasDefinitionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INamespaceAliasDefinitionContext)
}

func (s *BlockDeclarationContext) UsingDeclaration() IUsingDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUsingDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUsingDeclarationContext)
}

func (s *BlockDeclarationContext) UsingDirective() IUsingDirectiveContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUsingDirectiveContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUsingDirectiveContext)
}

func (s *BlockDeclarationContext) StaticAssertDeclaration() IStaticAssertDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStaticAssertDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStaticAssertDeclarationContext)
}

func (s *BlockDeclarationContext) AliasDeclaration() IAliasDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAliasDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAliasDeclarationContext)
}

func (s *BlockDeclarationContext) OpaqueEnumDeclaration() IOpaqueEnumDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOpaqueEnumDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOpaqueEnumDeclarationContext)
}

func (s *BlockDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BlockDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BlockDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitBlockDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) BlockDeclaration() (localctx IBlockDeclarationContext) {
	localctx = NewBlockDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 124, CPP14ParserRULE_blockDeclaration)
	p.SetState(994)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 97, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(986)
			p.SimpleDeclaration()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(987)
			p.AsmDefinition()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(988)
			p.NamespaceAliasDefinition()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(989)
			p.UsingDeclaration()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(990)
			p.UsingDirective()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(991)
			p.StaticAssertDeclaration()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(992)
			p.AliasDeclaration()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(993)
			p.OpaqueEnumDeclaration()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAliasDeclarationContext is an interface to support dynamic dispatch.
type IAliasDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Using() antlr.TerminalNode
	Identifier() antlr.TerminalNode
	Assign() antlr.TerminalNode
	TheTypeId() ITheTypeIdContext
	Semi() antlr.TerminalNode
	AttributeSpecifierSeq() IAttributeSpecifierSeqContext

	// IsAliasDeclarationContext differentiates from other interfaces.
	IsAliasDeclarationContext()
}

type AliasDeclarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAliasDeclarationContext() *AliasDeclarationContext {
	var p = new(AliasDeclarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_aliasDeclaration
	return p
}

func InitEmptyAliasDeclarationContext(p *AliasDeclarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_aliasDeclaration
}

func (*AliasDeclarationContext) IsAliasDeclarationContext() {}

func NewAliasDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AliasDeclarationContext {
	var p = new(AliasDeclarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_aliasDeclaration

	return p
}

func (s *AliasDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *AliasDeclarationContext) Using() antlr.TerminalNode {
	return s.GetToken(CPP14ParserUsing, 0)
}

func (s *AliasDeclarationContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *AliasDeclarationContext) Assign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAssign, 0)
}

func (s *AliasDeclarationContext) TheTypeId() ITheTypeIdContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITheTypeIdContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITheTypeIdContext)
}

func (s *AliasDeclarationContext) Semi() antlr.TerminalNode {
	return s.GetToken(CPP14ParserSemi, 0)
}

func (s *AliasDeclarationContext) AttributeSpecifierSeq() IAttributeSpecifierSeqContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributeSpecifierSeqContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributeSpecifierSeqContext)
}

func (s *AliasDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AliasDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AliasDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitAliasDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) AliasDeclaration() (localctx IAliasDeclarationContext) {
	localctx = NewAliasDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 126, CPP14ParserRULE_aliasDeclaration)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(996)
		p.Match(CPP14ParserUsing)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(997)
		p.Match(CPP14ParserIdentifier)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(999)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserAlignas || _la == CPP14ParserLeftBracket {
		{
			p.SetState(998)
			p.AttributeSpecifierSeq()
		}

	}
	{
		p.SetState(1001)
		p.Match(CPP14ParserAssign)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1002)
		p.TheTypeId()
	}
	{
		p.SetState(1003)
		p.Match(CPP14ParserSemi)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISimpleDeclarationContext is an interface to support dynamic dispatch.
type ISimpleDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Semi() antlr.TerminalNode
	DeclSpecifierSeq() IDeclSpecifierSeqContext
	InitDeclaratorList() IInitDeclaratorListContext
	AttributeSpecifierSeq() IAttributeSpecifierSeqContext

	// IsSimpleDeclarationContext differentiates from other interfaces.
	IsSimpleDeclarationContext()
}

type SimpleDeclarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySimpleDeclarationContext() *SimpleDeclarationContext {
	var p = new(SimpleDeclarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_simpleDeclaration
	return p
}

func InitEmptySimpleDeclarationContext(p *SimpleDeclarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_simpleDeclaration
}

func (*SimpleDeclarationContext) IsSimpleDeclarationContext() {}

func NewSimpleDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SimpleDeclarationContext {
	var p = new(SimpleDeclarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_simpleDeclaration

	return p
}

func (s *SimpleDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *SimpleDeclarationContext) Semi() antlr.TerminalNode {
	return s.GetToken(CPP14ParserSemi, 0)
}

func (s *SimpleDeclarationContext) DeclSpecifierSeq() IDeclSpecifierSeqContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDeclSpecifierSeqContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDeclSpecifierSeqContext)
}

func (s *SimpleDeclarationContext) InitDeclaratorList() IInitDeclaratorListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInitDeclaratorListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInitDeclaratorListContext)
}

func (s *SimpleDeclarationContext) AttributeSpecifierSeq() IAttributeSpecifierSeqContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributeSpecifierSeqContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributeSpecifierSeqContext)
}

func (s *SimpleDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SimpleDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SimpleDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitSimpleDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) SimpleDeclaration() (localctx ISimpleDeclarationContext) {
	localctx = NewSimpleDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 128, CPP14ParserRULE_simpleDeclaration)
	var _la int

	p.SetState(1019)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserAuto, CPP14ParserBool, CPP14ParserChar, CPP14ParserChar16, CPP14ParserChar32, CPP14ParserClass, CPP14ParserConst, CPP14ParserConstexpr, CPP14ParserDecltype, CPP14ParserDouble, CPP14ParserEnum, CPP14ParserExplicit, CPP14ParserExtern, CPP14ParserFloat, CPP14ParserFriend, CPP14ParserInline, CPP14ParserInt, CPP14ParserLong, CPP14ParserMutable, CPP14ParserOperator, CPP14ParserRegister, CPP14ParserShort, CPP14ParserSigned, CPP14ParserStatic, CPP14ParserStruct, CPP14ParserThread_local, CPP14ParserTypedef, CPP14ParserTypename_, CPP14ParserUnion, CPP14ParserUnsigned, CPP14ParserVirtual, CPP14ParserVoid, CPP14ParserVolatile, CPP14ParserWchar, CPP14ParserLeftParen, CPP14ParserStar, CPP14ParserAnd, CPP14ParserTilde, CPP14ParserAndAnd, CPP14ParserDoublecolon, CPP14ParserSemi, CPP14ParserEllipsis, CPP14ParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(1006)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 99, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1005)
				p.DeclSpecifierSeq()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(1009)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == CPP14ParserDecltype || _la == CPP14ParserOperator || ((int64((_la-85)) & ^0x3f) == 0 && ((int64(1)<<(_la-85))&215512868999425) != 0) {
			{
				p.SetState(1008)
				p.InitDeclaratorList()
			}

		}
		{
			p.SetState(1011)
			p.Match(CPP14ParserSemi)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case CPP14ParserAlignas, CPP14ParserLeftBracket:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1012)
			p.AttributeSpecifierSeq()
		}
		p.SetState(1014)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 101, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1013)
				p.DeclSpecifierSeq()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		{
			p.SetState(1016)
			p.InitDeclaratorList()
		}
		{
			p.SetState(1017)
			p.Match(CPP14ParserSemi)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStaticAssertDeclarationContext is an interface to support dynamic dispatch.
type IStaticAssertDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Static_assert() antlr.TerminalNode
	LeftParen() antlr.TerminalNode
	ConstantExpression() IConstantExpressionContext
	Comma() antlr.TerminalNode
	StringLiteral() antlr.TerminalNode
	RightParen() antlr.TerminalNode
	Semi() antlr.TerminalNode

	// IsStaticAssertDeclarationContext differentiates from other interfaces.
	IsStaticAssertDeclarationContext()
}

type StaticAssertDeclarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStaticAssertDeclarationContext() *StaticAssertDeclarationContext {
	var p = new(StaticAssertDeclarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_staticAssertDeclaration
	return p
}

func InitEmptyStaticAssertDeclarationContext(p *StaticAssertDeclarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_staticAssertDeclaration
}

func (*StaticAssertDeclarationContext) IsStaticAssertDeclarationContext() {}

func NewStaticAssertDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StaticAssertDeclarationContext {
	var p = new(StaticAssertDeclarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_staticAssertDeclaration

	return p
}

func (s *StaticAssertDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *StaticAssertDeclarationContext) Static_assert() antlr.TerminalNode {
	return s.GetToken(CPP14ParserStatic_assert, 0)
}

func (s *StaticAssertDeclarationContext) LeftParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, 0)
}

func (s *StaticAssertDeclarationContext) ConstantExpression() IConstantExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConstantExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConstantExpressionContext)
}

func (s *StaticAssertDeclarationContext) Comma() antlr.TerminalNode {
	return s.GetToken(CPP14ParserComma, 0)
}

func (s *StaticAssertDeclarationContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(CPP14ParserStringLiteral, 0)
}

func (s *StaticAssertDeclarationContext) RightParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, 0)
}

func (s *StaticAssertDeclarationContext) Semi() antlr.TerminalNode {
	return s.GetToken(CPP14ParserSemi, 0)
}

func (s *StaticAssertDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StaticAssertDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StaticAssertDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitStaticAssertDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) StaticAssertDeclaration() (localctx IStaticAssertDeclarationContext) {
	localctx = NewStaticAssertDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 130, CPP14ParserRULE_staticAssertDeclaration)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1021)
		p.Match(CPP14ParserStatic_assert)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1022)
		p.Match(CPP14ParserLeftParen)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1023)
		p.ConstantExpression()
	}
	{
		p.SetState(1024)
		p.Match(CPP14ParserComma)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1025)
		p.Match(CPP14ParserStringLiteral)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1026)
		p.Match(CPP14ParserRightParen)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1027)
		p.Match(CPP14ParserSemi)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBlankDeclarationContext is an interface to support dynamic dispatch.
type IBlankDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Semi() antlr.TerminalNode

	// IsBlankDeclarationContext differentiates from other interfaces.
	IsBlankDeclarationContext()
}

type BlankDeclarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBlankDeclarationContext() *BlankDeclarationContext {
	var p = new(BlankDeclarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_blankDeclaration
	return p
}

func InitEmptyBlankDeclarationContext(p *BlankDeclarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_blankDeclaration
}

func (*BlankDeclarationContext) IsBlankDeclarationContext() {}

func NewBlankDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BlankDeclarationContext {
	var p = new(BlankDeclarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_blankDeclaration

	return p
}

func (s *BlankDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *BlankDeclarationContext) Semi() antlr.TerminalNode {
	return s.GetToken(CPP14ParserSemi, 0)
}

func (s *BlankDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BlankDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BlankDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitBlankDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) BlankDeclaration() (localctx IBlankDeclarationContext) {
	localctx = NewBlankDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 132, CPP14ParserRULE_blankDeclaration)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1029)
		p.Match(CPP14ParserSemi)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAttributeDeclarationContext is an interface to support dynamic dispatch.
type IAttributeDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AttributeSpecifierSeq() IAttributeSpecifierSeqContext
	Semi() antlr.TerminalNode

	// IsAttributeDeclarationContext differentiates from other interfaces.
	IsAttributeDeclarationContext()
}

type AttributeDeclarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAttributeDeclarationContext() *AttributeDeclarationContext {
	var p = new(AttributeDeclarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_attributeDeclaration
	return p
}

func InitEmptyAttributeDeclarationContext(p *AttributeDeclarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_attributeDeclaration
}

func (*AttributeDeclarationContext) IsAttributeDeclarationContext() {}

func NewAttributeDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AttributeDeclarationContext {
	var p = new(AttributeDeclarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_attributeDeclaration

	return p
}

func (s *AttributeDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *AttributeDeclarationContext) AttributeSpecifierSeq() IAttributeSpecifierSeqContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributeSpecifierSeqContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributeSpecifierSeqContext)
}

func (s *AttributeDeclarationContext) Semi() antlr.TerminalNode {
	return s.GetToken(CPP14ParserSemi, 0)
}

func (s *AttributeDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AttributeDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AttributeDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitAttributeDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) AttributeDeclaration() (localctx IAttributeDeclarationContext) {
	localctx = NewAttributeDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 134, CPP14ParserRULE_attributeDeclaration)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1031)
		p.AttributeSpecifierSeq()
	}
	{
		p.SetState(1032)
		p.Match(CPP14ParserSemi)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDeclSpecifierContext is an interface to support dynamic dispatch.
type IDeclSpecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	StorageClassSpecifier() IStorageClassSpecifierContext
	TypeSpecifier() ITypeSpecifierContext
	FunctionSpecifier() IFunctionSpecifierContext
	Friend() antlr.TerminalNode
	Typedef() antlr.TerminalNode
	Constexpr() antlr.TerminalNode

	// IsDeclSpecifierContext differentiates from other interfaces.
	IsDeclSpecifierContext()
}

type DeclSpecifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclSpecifierContext() *DeclSpecifierContext {
	var p = new(DeclSpecifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_declSpecifier
	return p
}

func InitEmptyDeclSpecifierContext(p *DeclSpecifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_declSpecifier
}

func (*DeclSpecifierContext) IsDeclSpecifierContext() {}

func NewDeclSpecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclSpecifierContext {
	var p = new(DeclSpecifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_declSpecifier

	return p
}

func (s *DeclSpecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *DeclSpecifierContext) StorageClassSpecifier() IStorageClassSpecifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStorageClassSpecifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStorageClassSpecifierContext)
}

func (s *DeclSpecifierContext) TypeSpecifier() ITypeSpecifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeSpecifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeSpecifierContext)
}

func (s *DeclSpecifierContext) FunctionSpecifier() IFunctionSpecifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunctionSpecifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunctionSpecifierContext)
}

func (s *DeclSpecifierContext) Friend() antlr.TerminalNode {
	return s.GetToken(CPP14ParserFriend, 0)
}

func (s *DeclSpecifierContext) Typedef() antlr.TerminalNode {
	return s.GetToken(CPP14ParserTypedef, 0)
}

func (s *DeclSpecifierContext) Constexpr() antlr.TerminalNode {
	return s.GetToken(CPP14ParserConstexpr, 0)
}

func (s *DeclSpecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclSpecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeclSpecifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitDeclSpecifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) DeclSpecifier() (localctx IDeclSpecifierContext) {
	localctx = NewDeclSpecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 136, CPP14ParserRULE_declSpecifier)
	p.SetState(1040)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserExtern, CPP14ParserMutable, CPP14ParserRegister, CPP14ParserStatic, CPP14ParserThread_local:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1034)
			p.StorageClassSpecifier()
		}

	case CPP14ParserAuto, CPP14ParserBool, CPP14ParserChar, CPP14ParserChar16, CPP14ParserChar32, CPP14ParserClass, CPP14ParserConst, CPP14ParserDecltype, CPP14ParserDouble, CPP14ParserEnum, CPP14ParserFloat, CPP14ParserInt, CPP14ParserLong, CPP14ParserShort, CPP14ParserSigned, CPP14ParserStruct, CPP14ParserTypename_, CPP14ParserUnion, CPP14ParserUnsigned, CPP14ParserVoid, CPP14ParserVolatile, CPP14ParserWchar, CPP14ParserDoublecolon, CPP14ParserIdentifier:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1035)
			p.TypeSpecifier()
		}

	case CPP14ParserExplicit, CPP14ParserInline, CPP14ParserVirtual:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1036)
			p.FunctionSpecifier()
		}

	case CPP14ParserFriend:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1037)
			p.Match(CPP14ParserFriend)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case CPP14ParserTypedef:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1038)
			p.Match(CPP14ParserTypedef)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case CPP14ParserConstexpr:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1039)
			p.Match(CPP14ParserConstexpr)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDeclSpecifierSeqContext is an interface to support dynamic dispatch.
type IDeclSpecifierSeqContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllDeclSpecifier() []IDeclSpecifierContext
	DeclSpecifier(i int) IDeclSpecifierContext
	AttributeSpecifierSeq() IAttributeSpecifierSeqContext

	// IsDeclSpecifierSeqContext differentiates from other interfaces.
	IsDeclSpecifierSeqContext()
}

type DeclSpecifierSeqContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclSpecifierSeqContext() *DeclSpecifierSeqContext {
	var p = new(DeclSpecifierSeqContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_declSpecifierSeq
	return p
}

func InitEmptyDeclSpecifierSeqContext(p *DeclSpecifierSeqContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_declSpecifierSeq
}

func (*DeclSpecifierSeqContext) IsDeclSpecifierSeqContext() {}

func NewDeclSpecifierSeqContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclSpecifierSeqContext {
	var p = new(DeclSpecifierSeqContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_declSpecifierSeq

	return p
}

func (s *DeclSpecifierSeqContext) GetParser() antlr.Parser { return s.parser }

func (s *DeclSpecifierSeqContext) AllDeclSpecifier() []IDeclSpecifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDeclSpecifierContext); ok {
			len++
		}
	}

	tst := make([]IDeclSpecifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDeclSpecifierContext); ok {
			tst[i] = t.(IDeclSpecifierContext)
			i++
		}
	}

	return tst
}

func (s *DeclSpecifierSeqContext) DeclSpecifier(i int) IDeclSpecifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDeclSpecifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDeclSpecifierContext)
}

func (s *DeclSpecifierSeqContext) AttributeSpecifierSeq() IAttributeSpecifierSeqContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributeSpecifierSeqContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributeSpecifierSeqContext)
}

func (s *DeclSpecifierSeqContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclSpecifierSeqContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeclSpecifierSeqContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitDeclSpecifierSeq(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) DeclSpecifierSeq() (localctx IDeclSpecifierSeqContext) {
	localctx = NewDeclSpecifierSeqContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 138, CPP14ParserRULE_declSpecifierSeq)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1043)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = 1 + 1
	for ok := true; ok; ok = _alt != 1 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1 + 1:
			{
				p.SetState(1042)
				p.DeclSpecifier()
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}

		p.SetState(1045)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 104, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(1048)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 105, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1047)
			p.AttributeSpecifierSeq()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStorageClassSpecifierContext is an interface to support dynamic dispatch.
type IStorageClassSpecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Register() antlr.TerminalNode
	Static() antlr.TerminalNode
	Thread_local() antlr.TerminalNode
	Extern() antlr.TerminalNode
	Mutable() antlr.TerminalNode

	// IsStorageClassSpecifierContext differentiates from other interfaces.
	IsStorageClassSpecifierContext()
}

type StorageClassSpecifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStorageClassSpecifierContext() *StorageClassSpecifierContext {
	var p = new(StorageClassSpecifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_storageClassSpecifier
	return p
}

func InitEmptyStorageClassSpecifierContext(p *StorageClassSpecifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_storageClassSpecifier
}

func (*StorageClassSpecifierContext) IsStorageClassSpecifierContext() {}

func NewStorageClassSpecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StorageClassSpecifierContext {
	var p = new(StorageClassSpecifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_storageClassSpecifier

	return p
}

func (s *StorageClassSpecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *StorageClassSpecifierContext) Register() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRegister, 0)
}

func (s *StorageClassSpecifierContext) Static() antlr.TerminalNode {
	return s.GetToken(CPP14ParserStatic, 0)
}

func (s *StorageClassSpecifierContext) Thread_local() antlr.TerminalNode {
	return s.GetToken(CPP14ParserThread_local, 0)
}

func (s *StorageClassSpecifierContext) Extern() antlr.TerminalNode {
	return s.GetToken(CPP14ParserExtern, 0)
}

func (s *StorageClassSpecifierContext) Mutable() antlr.TerminalNode {
	return s.GetToken(CPP14ParserMutable, 0)
}

func (s *StorageClassSpecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StorageClassSpecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StorageClassSpecifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitStorageClassSpecifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) StorageClassSpecifier() (localctx IStorageClassSpecifierContext) {
	localctx = NewStorageClassSpecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 140, CPP14ParserRULE_storageClassSpecifier)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1050)
		_la = p.GetTokenStream().LA(1)

		if !((int64((_la-36)) & ^0x3f) == 0 && ((int64(1)<<(_la-36))&17316186113) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFunctionSpecifierContext is an interface to support dynamic dispatch.
type IFunctionSpecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Inline() antlr.TerminalNode
	Virtual() antlr.TerminalNode
	Explicit() antlr.TerminalNode

	// IsFunctionSpecifierContext differentiates from other interfaces.
	IsFunctionSpecifierContext()
}

type FunctionSpecifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionSpecifierContext() *FunctionSpecifierContext {
	var p = new(FunctionSpecifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_functionSpecifier
	return p
}

func InitEmptyFunctionSpecifierContext(p *FunctionSpecifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_functionSpecifier
}

func (*FunctionSpecifierContext) IsFunctionSpecifierContext() {}

func NewFunctionSpecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionSpecifierContext {
	var p = new(FunctionSpecifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_functionSpecifier

	return p
}

func (s *FunctionSpecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionSpecifierContext) Inline() antlr.TerminalNode {
	return s.GetToken(CPP14ParserInline, 0)
}

func (s *FunctionSpecifierContext) Virtual() antlr.TerminalNode {
	return s.GetToken(CPP14ParserVirtual, 0)
}

func (s *FunctionSpecifierContext) Explicit() antlr.TerminalNode {
	return s.GetToken(CPP14ParserExplicit, 0)
}

func (s *FunctionSpecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionSpecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionSpecifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitFunctionSpecifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) FunctionSpecifier() (localctx IFunctionSpecifierContext) {
	localctx = NewFunctionSpecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 142, CPP14ParserRULE_functionSpecifier)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1052)
		_la = p.GetTokenStream().LA(1)

		if !((int64((_la-34)) & ^0x3f) == 0 && ((int64(1)<<(_la-34))&70368744178689) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITypedefNameContext is an interface to support dynamic dispatch.
type ITypedefNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() antlr.TerminalNode

	// IsTypedefNameContext differentiates from other interfaces.
	IsTypedefNameContext()
}

type TypedefNameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypedefNameContext() *TypedefNameContext {
	var p = new(TypedefNameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_typedefName
	return p
}

func InitEmptyTypedefNameContext(p *TypedefNameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_typedefName
}

func (*TypedefNameContext) IsTypedefNameContext() {}

func NewTypedefNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypedefNameContext {
	var p = new(TypedefNameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_typedefName

	return p
}

func (s *TypedefNameContext) GetParser() antlr.Parser { return s.parser }

func (s *TypedefNameContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *TypedefNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypedefNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypedefNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitTypedefName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) TypedefName() (localctx ITypedefNameContext) {
	localctx = NewTypedefNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 144, CPP14ParserRULE_typedefName)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1054)
		p.Match(CPP14ParserIdentifier)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITypeSpecifierContext is an interface to support dynamic dispatch.
type ITypeSpecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	TrailingTypeSpecifier() ITrailingTypeSpecifierContext
	ClassSpecifier() IClassSpecifierContext
	EnumSpecifier() IEnumSpecifierContext

	// IsTypeSpecifierContext differentiates from other interfaces.
	IsTypeSpecifierContext()
}

type TypeSpecifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeSpecifierContext() *TypeSpecifierContext {
	var p = new(TypeSpecifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_typeSpecifier
	return p
}

func InitEmptyTypeSpecifierContext(p *TypeSpecifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_typeSpecifier
}

func (*TypeSpecifierContext) IsTypeSpecifierContext() {}

func NewTypeSpecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeSpecifierContext {
	var p = new(TypeSpecifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_typeSpecifier

	return p
}

func (s *TypeSpecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeSpecifierContext) TrailingTypeSpecifier() ITrailingTypeSpecifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITrailingTypeSpecifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITrailingTypeSpecifierContext)
}

func (s *TypeSpecifierContext) ClassSpecifier() IClassSpecifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClassSpecifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClassSpecifierContext)
}

func (s *TypeSpecifierContext) EnumSpecifier() IEnumSpecifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEnumSpecifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEnumSpecifierContext)
}

func (s *TypeSpecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeSpecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeSpecifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitTypeSpecifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) TypeSpecifier() (localctx ITypeSpecifierContext) {
	localctx = NewTypeSpecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 146, CPP14ParserRULE_typeSpecifier)
	p.SetState(1059)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 106, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1056)
			p.TrailingTypeSpecifier()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1057)
			p.ClassSpecifier()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1058)
			p.EnumSpecifier()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITrailingTypeSpecifierContext is an interface to support dynamic dispatch.
type ITrailingTypeSpecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SimpleTypeSpecifier() ISimpleTypeSpecifierContext
	ElaboratedTypeSpecifier() IElaboratedTypeSpecifierContext
	TypeNameSpecifier() ITypeNameSpecifierContext
	CvQualifier() ICvQualifierContext

	// IsTrailingTypeSpecifierContext differentiates from other interfaces.
	IsTrailingTypeSpecifierContext()
}

type TrailingTypeSpecifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTrailingTypeSpecifierContext() *TrailingTypeSpecifierContext {
	var p = new(TrailingTypeSpecifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_trailingTypeSpecifier
	return p
}

func InitEmptyTrailingTypeSpecifierContext(p *TrailingTypeSpecifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_trailingTypeSpecifier
}

func (*TrailingTypeSpecifierContext) IsTrailingTypeSpecifierContext() {}

func NewTrailingTypeSpecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TrailingTypeSpecifierContext {
	var p = new(TrailingTypeSpecifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_trailingTypeSpecifier

	return p
}

func (s *TrailingTypeSpecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *TrailingTypeSpecifierContext) SimpleTypeSpecifier() ISimpleTypeSpecifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISimpleTypeSpecifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISimpleTypeSpecifierContext)
}

func (s *TrailingTypeSpecifierContext) ElaboratedTypeSpecifier() IElaboratedTypeSpecifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IElaboratedTypeSpecifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IElaboratedTypeSpecifierContext)
}

func (s *TrailingTypeSpecifierContext) TypeNameSpecifier() ITypeNameSpecifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeNameSpecifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeNameSpecifierContext)
}

func (s *TrailingTypeSpecifierContext) CvQualifier() ICvQualifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICvQualifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICvQualifierContext)
}

func (s *TrailingTypeSpecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TrailingTypeSpecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TrailingTypeSpecifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitTrailingTypeSpecifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) TrailingTypeSpecifier() (localctx ITrailingTypeSpecifierContext) {
	localctx = NewTrailingTypeSpecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 148, CPP14ParserRULE_trailingTypeSpecifier)
	p.SetState(1065)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserAuto, CPP14ParserBool, CPP14ParserChar, CPP14ParserChar16, CPP14ParserChar32, CPP14ParserDecltype, CPP14ParserDouble, CPP14ParserFloat, CPP14ParserInt, CPP14ParserLong, CPP14ParserShort, CPP14ParserSigned, CPP14ParserUnsigned, CPP14ParserVoid, CPP14ParserWchar, CPP14ParserDoublecolon, CPP14ParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1061)
			p.SimpleTypeSpecifier()
		}

	case CPP14ParserClass, CPP14ParserEnum, CPP14ParserStruct:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1062)
			p.ElaboratedTypeSpecifier()
		}

	case CPP14ParserTypename_:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1063)
			p.TypeNameSpecifier()
		}

	case CPP14ParserConst, CPP14ParserVolatile:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1064)
			p.CvQualifier()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITypeSpecifierSeqContext is an interface to support dynamic dispatch.
type ITypeSpecifierSeqContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllTypeSpecifier() []ITypeSpecifierContext
	TypeSpecifier(i int) ITypeSpecifierContext
	AttributeSpecifierSeq() IAttributeSpecifierSeqContext

	// IsTypeSpecifierSeqContext differentiates from other interfaces.
	IsTypeSpecifierSeqContext()
}

type TypeSpecifierSeqContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeSpecifierSeqContext() *TypeSpecifierSeqContext {
	var p = new(TypeSpecifierSeqContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_typeSpecifierSeq
	return p
}

func InitEmptyTypeSpecifierSeqContext(p *TypeSpecifierSeqContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_typeSpecifierSeq
}

func (*TypeSpecifierSeqContext) IsTypeSpecifierSeqContext() {}

func NewTypeSpecifierSeqContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeSpecifierSeqContext {
	var p = new(TypeSpecifierSeqContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_typeSpecifierSeq

	return p
}

func (s *TypeSpecifierSeqContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeSpecifierSeqContext) AllTypeSpecifier() []ITypeSpecifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITypeSpecifierContext); ok {
			len++
		}
	}

	tst := make([]ITypeSpecifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITypeSpecifierContext); ok {
			tst[i] = t.(ITypeSpecifierContext)
			i++
		}
	}

	return tst
}

func (s *TypeSpecifierSeqContext) TypeSpecifier(i int) ITypeSpecifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeSpecifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeSpecifierContext)
}

func (s *TypeSpecifierSeqContext) AttributeSpecifierSeq() IAttributeSpecifierSeqContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributeSpecifierSeqContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributeSpecifierSeqContext)
}

func (s *TypeSpecifierSeqContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeSpecifierSeqContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeSpecifierSeqContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitTypeSpecifierSeq(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) TypeSpecifierSeq() (localctx ITypeSpecifierSeqContext) {
	localctx = NewTypeSpecifierSeqContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 150, CPP14ParserRULE_typeSpecifierSeq)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1068)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(1067)
				p.TypeSpecifier()
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}

		p.SetState(1070)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 108, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(1073)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 109, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1072)
			p.AttributeSpecifierSeq()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITrailingTypeSpecifierSeqContext is an interface to support dynamic dispatch.
type ITrailingTypeSpecifierSeqContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllTrailingTypeSpecifier() []ITrailingTypeSpecifierContext
	TrailingTypeSpecifier(i int) ITrailingTypeSpecifierContext
	AttributeSpecifierSeq() IAttributeSpecifierSeqContext

	// IsTrailingTypeSpecifierSeqContext differentiates from other interfaces.
	IsTrailingTypeSpecifierSeqContext()
}

type TrailingTypeSpecifierSeqContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTrailingTypeSpecifierSeqContext() *TrailingTypeSpecifierSeqContext {
	var p = new(TrailingTypeSpecifierSeqContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_trailingTypeSpecifierSeq
	return p
}

func InitEmptyTrailingTypeSpecifierSeqContext(p *TrailingTypeSpecifierSeqContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_trailingTypeSpecifierSeq
}

func (*TrailingTypeSpecifierSeqContext) IsTrailingTypeSpecifierSeqContext() {}

func NewTrailingTypeSpecifierSeqContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TrailingTypeSpecifierSeqContext {
	var p = new(TrailingTypeSpecifierSeqContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_trailingTypeSpecifierSeq

	return p
}

func (s *TrailingTypeSpecifierSeqContext) GetParser() antlr.Parser { return s.parser }

func (s *TrailingTypeSpecifierSeqContext) AllTrailingTypeSpecifier() []ITrailingTypeSpecifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITrailingTypeSpecifierContext); ok {
			len++
		}
	}

	tst := make([]ITrailingTypeSpecifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITrailingTypeSpecifierContext); ok {
			tst[i] = t.(ITrailingTypeSpecifierContext)
			i++
		}
	}

	return tst
}

func (s *TrailingTypeSpecifierSeqContext) TrailingTypeSpecifier(i int) ITrailingTypeSpecifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITrailingTypeSpecifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITrailingTypeSpecifierContext)
}

func (s *TrailingTypeSpecifierSeqContext) AttributeSpecifierSeq() IAttributeSpecifierSeqContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributeSpecifierSeqContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributeSpecifierSeqContext)
}

func (s *TrailingTypeSpecifierSeqContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TrailingTypeSpecifierSeqContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TrailingTypeSpecifierSeqContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitTrailingTypeSpecifierSeq(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) TrailingTypeSpecifierSeq() (localctx ITrailingTypeSpecifierSeqContext) {
	localctx = NewTrailingTypeSpecifierSeqContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 152, CPP14ParserRULE_trailingTypeSpecifierSeq)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1076)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(1075)
				p.TrailingTypeSpecifier()
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}

		p.SetState(1078)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 110, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(1081)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 111, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1080)
			p.AttributeSpecifierSeq()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISimpleTypeLengthModifierContext is an interface to support dynamic dispatch.
type ISimpleTypeLengthModifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Short() antlr.TerminalNode
	Long() antlr.TerminalNode

	// IsSimpleTypeLengthModifierContext differentiates from other interfaces.
	IsSimpleTypeLengthModifierContext()
}

type SimpleTypeLengthModifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySimpleTypeLengthModifierContext() *SimpleTypeLengthModifierContext {
	var p = new(SimpleTypeLengthModifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_simpleTypeLengthModifier
	return p
}

func InitEmptySimpleTypeLengthModifierContext(p *SimpleTypeLengthModifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_simpleTypeLengthModifier
}

func (*SimpleTypeLengthModifierContext) IsSimpleTypeLengthModifierContext() {}

func NewSimpleTypeLengthModifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SimpleTypeLengthModifierContext {
	var p = new(SimpleTypeLengthModifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_simpleTypeLengthModifier

	return p
}

func (s *SimpleTypeLengthModifierContext) GetParser() antlr.Parser { return s.parser }

func (s *SimpleTypeLengthModifierContext) Short() antlr.TerminalNode {
	return s.GetToken(CPP14ParserShort, 0)
}

func (s *SimpleTypeLengthModifierContext) Long() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLong, 0)
}

func (s *SimpleTypeLengthModifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SimpleTypeLengthModifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SimpleTypeLengthModifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitSimpleTypeLengthModifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) SimpleTypeLengthModifier() (localctx ISimpleTypeLengthModifierContext) {
	localctx = NewSimpleTypeLengthModifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 154, CPP14ParserRULE_simpleTypeLengthModifier)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1083)
		_la = p.GetTokenStream().LA(1)

		if !(_la == CPP14ParserLong || _la == CPP14ParserShort) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISimpleTypeSignednessModifierContext is an interface to support dynamic dispatch.
type ISimpleTypeSignednessModifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Unsigned() antlr.TerminalNode
	Signed() antlr.TerminalNode

	// IsSimpleTypeSignednessModifierContext differentiates from other interfaces.
	IsSimpleTypeSignednessModifierContext()
}

type SimpleTypeSignednessModifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySimpleTypeSignednessModifierContext() *SimpleTypeSignednessModifierContext {
	var p = new(SimpleTypeSignednessModifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_simpleTypeSignednessModifier
	return p
}

func InitEmptySimpleTypeSignednessModifierContext(p *SimpleTypeSignednessModifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_simpleTypeSignednessModifier
}

func (*SimpleTypeSignednessModifierContext) IsSimpleTypeSignednessModifierContext() {}

func NewSimpleTypeSignednessModifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SimpleTypeSignednessModifierContext {
	var p = new(SimpleTypeSignednessModifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_simpleTypeSignednessModifier

	return p
}

func (s *SimpleTypeSignednessModifierContext) GetParser() antlr.Parser { return s.parser }

func (s *SimpleTypeSignednessModifierContext) Unsigned() antlr.TerminalNode {
	return s.GetToken(CPP14ParserUnsigned, 0)
}

func (s *SimpleTypeSignednessModifierContext) Signed() antlr.TerminalNode {
	return s.GetToken(CPP14ParserSigned, 0)
}

func (s *SimpleTypeSignednessModifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SimpleTypeSignednessModifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SimpleTypeSignednessModifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitSimpleTypeSignednessModifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) SimpleTypeSignednessModifier() (localctx ISimpleTypeSignednessModifierContext) {
	localctx = NewSimpleTypeSignednessModifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 156, CPP14ParserRULE_simpleTypeSignednessModifier)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1085)
		_la = p.GetTokenStream().LA(1)

		if !(_la == CPP14ParserSigned || _la == CPP14ParserUnsigned) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISimpleTypeSpecifierContext is an interface to support dynamic dispatch.
type ISimpleTypeSpecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	TheTypeName() ITheTypeNameContext
	NestedNameSpecifier() INestedNameSpecifierContext
	Template() antlr.TerminalNode
	SimpleTemplateId() ISimpleTemplateIdContext
	SimpleTypeSignednessModifier() ISimpleTypeSignednessModifierContext
	AllSimpleTypeLengthModifier() []ISimpleTypeLengthModifierContext
	SimpleTypeLengthModifier(i int) ISimpleTypeLengthModifierContext
	Char() antlr.TerminalNode
	Char16() antlr.TerminalNode
	Char32() antlr.TerminalNode
	Wchar() antlr.TerminalNode
	Bool() antlr.TerminalNode
	Int() antlr.TerminalNode
	Float() antlr.TerminalNode
	Double() antlr.TerminalNode
	Void() antlr.TerminalNode
	Auto() antlr.TerminalNode
	DecltypeSpecifier() IDecltypeSpecifierContext

	// IsSimpleTypeSpecifierContext differentiates from other interfaces.
	IsSimpleTypeSpecifierContext()
}

type SimpleTypeSpecifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySimpleTypeSpecifierContext() *SimpleTypeSpecifierContext {
	var p = new(SimpleTypeSpecifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_simpleTypeSpecifier
	return p
}

func InitEmptySimpleTypeSpecifierContext(p *SimpleTypeSpecifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_simpleTypeSpecifier
}

func (*SimpleTypeSpecifierContext) IsSimpleTypeSpecifierContext() {}

func NewSimpleTypeSpecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SimpleTypeSpecifierContext {
	var p = new(SimpleTypeSpecifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_simpleTypeSpecifier

	return p
}

func (s *SimpleTypeSpecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *SimpleTypeSpecifierContext) TheTypeName() ITheTypeNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITheTypeNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITheTypeNameContext)
}

func (s *SimpleTypeSpecifierContext) NestedNameSpecifier() INestedNameSpecifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INestedNameSpecifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INestedNameSpecifierContext)
}

func (s *SimpleTypeSpecifierContext) Template() antlr.TerminalNode {
	return s.GetToken(CPP14ParserTemplate, 0)
}

func (s *SimpleTypeSpecifierContext) SimpleTemplateId() ISimpleTemplateIdContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISimpleTemplateIdContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISimpleTemplateIdContext)
}

func (s *SimpleTypeSpecifierContext) SimpleTypeSignednessModifier() ISimpleTypeSignednessModifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISimpleTypeSignednessModifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISimpleTypeSignednessModifierContext)
}

func (s *SimpleTypeSpecifierContext) AllSimpleTypeLengthModifier() []ISimpleTypeLengthModifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISimpleTypeLengthModifierContext); ok {
			len++
		}
	}

	tst := make([]ISimpleTypeLengthModifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISimpleTypeLengthModifierContext); ok {
			tst[i] = t.(ISimpleTypeLengthModifierContext)
			i++
		}
	}

	return tst
}

func (s *SimpleTypeSpecifierContext) SimpleTypeLengthModifier(i int) ISimpleTypeLengthModifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISimpleTypeLengthModifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISimpleTypeLengthModifierContext)
}

func (s *SimpleTypeSpecifierContext) Char() antlr.TerminalNode {
	return s.GetToken(CPP14ParserChar, 0)
}

func (s *SimpleTypeSpecifierContext) Char16() antlr.TerminalNode {
	return s.GetToken(CPP14ParserChar16, 0)
}

func (s *SimpleTypeSpecifierContext) Char32() antlr.TerminalNode {
	return s.GetToken(CPP14ParserChar32, 0)
}

func (s *SimpleTypeSpecifierContext) Wchar() antlr.TerminalNode {
	return s.GetToken(CPP14ParserWchar, 0)
}

func (s *SimpleTypeSpecifierContext) Bool() antlr.TerminalNode {
	return s.GetToken(CPP14ParserBool, 0)
}

func (s *SimpleTypeSpecifierContext) Int() antlr.TerminalNode {
	return s.GetToken(CPP14ParserInt, 0)
}

func (s *SimpleTypeSpecifierContext) Float() antlr.TerminalNode {
	return s.GetToken(CPP14ParserFloat, 0)
}

func (s *SimpleTypeSpecifierContext) Double() antlr.TerminalNode {
	return s.GetToken(CPP14ParserDouble, 0)
}

func (s *SimpleTypeSpecifierContext) Void() antlr.TerminalNode {
	return s.GetToken(CPP14ParserVoid, 0)
}

func (s *SimpleTypeSpecifierContext) Auto() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAuto, 0)
}

func (s *SimpleTypeSpecifierContext) DecltypeSpecifier() IDecltypeSpecifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDecltypeSpecifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDecltypeSpecifierContext)
}

func (s *SimpleTypeSpecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SimpleTypeSpecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SimpleTypeSpecifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitSimpleTypeSpecifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) SimpleTypeSpecifier() (localctx ISimpleTypeSpecifierContext) {
	localctx = NewSimpleTypeSpecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 158, CPP14ParserRULE_simpleTypeSpecifier)
	var _la int

	var _alt int

	p.SetState(1139)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 122, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(1088)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 112, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1087)
				p.nestedNameSpecifier(0)
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		{
			p.SetState(1090)
			p.TheTypeName()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1091)
			p.nestedNameSpecifier(0)
		}
		{
			p.SetState(1092)
			p.Match(CPP14ParserTemplate)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1093)
			p.SimpleTemplateId()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1095)
			p.SimpleTypeSignednessModifier()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		p.SetState(1097)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == CPP14ParserSigned || _la == CPP14ParserUnsigned {
			{
				p.SetState(1096)
				p.SimpleTypeSignednessModifier()
			}

		}
		p.SetState(1100)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				{
					p.SetState(1099)
					p.SimpleTypeLengthModifier()
				}

			default:
				p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
				goto errorExit
			}

			p.SetState(1102)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 114, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		p.SetState(1105)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == CPP14ParserSigned || _la == CPP14ParserUnsigned {
			{
				p.SetState(1104)
				p.SimpleTypeSignednessModifier()
			}

		}
		{
			p.SetState(1107)
			p.Match(CPP14ParserChar)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		p.SetState(1109)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == CPP14ParserSigned || _la == CPP14ParserUnsigned {
			{
				p.SetState(1108)
				p.SimpleTypeSignednessModifier()
			}

		}
		{
			p.SetState(1111)
			p.Match(CPP14ParserChar16)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		p.SetState(1113)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == CPP14ParserSigned || _la == CPP14ParserUnsigned {
			{
				p.SetState(1112)
				p.SimpleTypeSignednessModifier()
			}

		}
		{
			p.SetState(1115)
			p.Match(CPP14ParserChar32)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		p.SetState(1117)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == CPP14ParserSigned || _la == CPP14ParserUnsigned {
			{
				p.SetState(1116)
				p.SimpleTypeSignednessModifier()
			}

		}
		{
			p.SetState(1119)
			p.Match(CPP14ParserWchar)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(1120)
			p.Match(CPP14ParserBool)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		p.SetState(1122)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == CPP14ParserSigned || _la == CPP14ParserUnsigned {
			{
				p.SetState(1121)
				p.SimpleTypeSignednessModifier()
			}

		}
		p.SetState(1127)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == CPP14ParserLong || _la == CPP14ParserShort {
			{
				p.SetState(1124)
				p.SimpleTypeLengthModifier()
			}

			p.SetState(1129)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1130)
			p.Match(CPP14ParserInt)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(1131)
			p.Match(CPP14ParserFloat)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		p.SetState(1133)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == CPP14ParserLong || _la == CPP14ParserShort {
			{
				p.SetState(1132)
				p.SimpleTypeLengthModifier()
			}

		}
		{
			p.SetState(1135)
			p.Match(CPP14ParserDouble)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(1136)
			p.Match(CPP14ParserVoid)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(1137)
			p.Match(CPP14ParserAuto)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(1138)
			p.DecltypeSpecifier()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITheTypeNameContext is an interface to support dynamic dispatch.
type ITheTypeNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ClassName() IClassNameContext
	EnumName() IEnumNameContext
	TypedefName() ITypedefNameContext
	SimpleTemplateId() ISimpleTemplateIdContext

	// IsTheTypeNameContext differentiates from other interfaces.
	IsTheTypeNameContext()
}

type TheTypeNameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTheTypeNameContext() *TheTypeNameContext {
	var p = new(TheTypeNameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_theTypeName
	return p
}

func InitEmptyTheTypeNameContext(p *TheTypeNameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_theTypeName
}

func (*TheTypeNameContext) IsTheTypeNameContext() {}

func NewTheTypeNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TheTypeNameContext {
	var p = new(TheTypeNameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_theTypeName

	return p
}

func (s *TheTypeNameContext) GetParser() antlr.Parser { return s.parser }

func (s *TheTypeNameContext) ClassName() IClassNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClassNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClassNameContext)
}

func (s *TheTypeNameContext) EnumName() IEnumNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEnumNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEnumNameContext)
}

func (s *TheTypeNameContext) TypedefName() ITypedefNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypedefNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypedefNameContext)
}

func (s *TheTypeNameContext) SimpleTemplateId() ISimpleTemplateIdContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISimpleTemplateIdContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISimpleTemplateIdContext)
}

func (s *TheTypeNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TheTypeNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TheTypeNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitTheTypeName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) TheTypeName() (localctx ITheTypeNameContext) {
	localctx = NewTheTypeNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 160, CPP14ParserRULE_theTypeName)
	p.SetState(1145)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 123, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1141)
			p.ClassName()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1142)
			p.EnumName()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1143)
			p.TypedefName()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1144)
			p.SimpleTemplateId()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDecltypeSpecifierContext is an interface to support dynamic dispatch.
type IDecltypeSpecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Decltype() antlr.TerminalNode
	LeftParen() antlr.TerminalNode
	RightParen() antlr.TerminalNode
	Expression() IExpressionContext
	Auto() antlr.TerminalNode

	// IsDecltypeSpecifierContext differentiates from other interfaces.
	IsDecltypeSpecifierContext()
}

type DecltypeSpecifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDecltypeSpecifierContext() *DecltypeSpecifierContext {
	var p = new(DecltypeSpecifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_decltypeSpecifier
	return p
}

func InitEmptyDecltypeSpecifierContext(p *DecltypeSpecifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_decltypeSpecifier
}

func (*DecltypeSpecifierContext) IsDecltypeSpecifierContext() {}

func NewDecltypeSpecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DecltypeSpecifierContext {
	var p = new(DecltypeSpecifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_decltypeSpecifier

	return p
}

func (s *DecltypeSpecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *DecltypeSpecifierContext) Decltype() antlr.TerminalNode {
	return s.GetToken(CPP14ParserDecltype, 0)
}

func (s *DecltypeSpecifierContext) LeftParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, 0)
}

func (s *DecltypeSpecifierContext) RightParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, 0)
}

func (s *DecltypeSpecifierContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *DecltypeSpecifierContext) Auto() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAuto, 0)
}

func (s *DecltypeSpecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DecltypeSpecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DecltypeSpecifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitDecltypeSpecifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) DecltypeSpecifier() (localctx IDecltypeSpecifierContext) {
	localctx = NewDecltypeSpecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 162, CPP14ParserRULE_decltypeSpecifier)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1147)
		p.Match(CPP14ParserDecltype)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1148)
		p.Match(CPP14ParserLeftParen)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1151)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 124, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1149)
			p.Expression()
		}

	case 2:
		{
			p.SetState(1150)
			p.Match(CPP14ParserAuto)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	{
		p.SetState(1153)
		p.Match(CPP14ParserRightParen)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IElaboratedTypeSpecifierContext is an interface to support dynamic dispatch.
type IElaboratedTypeSpecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ClassKey() IClassKeyContext
	Identifier() antlr.TerminalNode
	SimpleTemplateId() ISimpleTemplateIdContext
	NestedNameSpecifier() INestedNameSpecifierContext
	AttributeSpecifierSeq() IAttributeSpecifierSeqContext
	Template() antlr.TerminalNode
	Enum() antlr.TerminalNode

	// IsElaboratedTypeSpecifierContext differentiates from other interfaces.
	IsElaboratedTypeSpecifierContext()
}

type ElaboratedTypeSpecifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyElaboratedTypeSpecifierContext() *ElaboratedTypeSpecifierContext {
	var p = new(ElaboratedTypeSpecifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_elaboratedTypeSpecifier
	return p
}

func InitEmptyElaboratedTypeSpecifierContext(p *ElaboratedTypeSpecifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_elaboratedTypeSpecifier
}

func (*ElaboratedTypeSpecifierContext) IsElaboratedTypeSpecifierContext() {}

func NewElaboratedTypeSpecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ElaboratedTypeSpecifierContext {
	var p = new(ElaboratedTypeSpecifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_elaboratedTypeSpecifier

	return p
}

func (s *ElaboratedTypeSpecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *ElaboratedTypeSpecifierContext) ClassKey() IClassKeyContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClassKeyContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClassKeyContext)
}

func (s *ElaboratedTypeSpecifierContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *ElaboratedTypeSpecifierContext) SimpleTemplateId() ISimpleTemplateIdContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISimpleTemplateIdContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISimpleTemplateIdContext)
}

func (s *ElaboratedTypeSpecifierContext) NestedNameSpecifier() INestedNameSpecifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INestedNameSpecifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INestedNameSpecifierContext)
}

func (s *ElaboratedTypeSpecifierContext) AttributeSpecifierSeq() IAttributeSpecifierSeqContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributeSpecifierSeqContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributeSpecifierSeqContext)
}

func (s *ElaboratedTypeSpecifierContext) Template() antlr.TerminalNode {
	return s.GetToken(CPP14ParserTemplate, 0)
}

func (s *ElaboratedTypeSpecifierContext) Enum() antlr.TerminalNode {
	return s.GetToken(CPP14ParserEnum, 0)
}

func (s *ElaboratedTypeSpecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ElaboratedTypeSpecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ElaboratedTypeSpecifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitElaboratedTypeSpecifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) ElaboratedTypeSpecifier() (localctx IElaboratedTypeSpecifierContext) {
	localctx = NewElaboratedTypeSpecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 164, CPP14ParserRULE_elaboratedTypeSpecifier)
	var _la int

	p.SetState(1177)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserClass, CPP14ParserStruct:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1155)
			p.ClassKey()
		}
		p.SetState(1170)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 128, p.GetParserRuleContext()) {
		case 1:
			p.SetState(1157)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == CPP14ParserAlignas || _la == CPP14ParserLeftBracket {
				{
					p.SetState(1156)
					p.AttributeSpecifierSeq()
				}

			}
			p.SetState(1160)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 126, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(1159)
					p.nestedNameSpecifier(0)
				}

			} else if p.HasError() { // JIM
				goto errorExit
			}
			{
				p.SetState(1162)
				p.Match(CPP14ParserIdentifier)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		case 2:
			{
				p.SetState(1163)
				p.SimpleTemplateId()
			}

		case 3:
			{
				p.SetState(1164)
				p.nestedNameSpecifier(0)
			}
			p.SetState(1166)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == CPP14ParserTemplate {
				{
					p.SetState(1165)
					p.Match(CPP14ParserTemplate)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			{
				p.SetState(1168)
				p.SimpleTemplateId()
			}

		case antlr.ATNInvalidAltNumber:
			goto errorExit
		}

	case CPP14ParserEnum:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1172)
			p.Match(CPP14ParserEnum)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1174)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 129, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1173)
				p.nestedNameSpecifier(0)
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		{
			p.SetState(1176)
			p.Match(CPP14ParserIdentifier)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IEnumNameContext is an interface to support dynamic dispatch.
type IEnumNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() antlr.TerminalNode

	// IsEnumNameContext differentiates from other interfaces.
	IsEnumNameContext()
}

type EnumNameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumNameContext() *EnumNameContext {
	var p = new(EnumNameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_enumName
	return p
}

func InitEmptyEnumNameContext(p *EnumNameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_enumName
}

func (*EnumNameContext) IsEnumNameContext() {}

func NewEnumNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumNameContext {
	var p = new(EnumNameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_enumName

	return p
}

func (s *EnumNameContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumNameContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *EnumNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitEnumName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) EnumName() (localctx IEnumNameContext) {
	localctx = NewEnumNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 166, CPP14ParserRULE_enumName)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1179)
		p.Match(CPP14ParserIdentifier)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IEnumSpecifierContext is an interface to support dynamic dispatch.
type IEnumSpecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	EnumHead() IEnumHeadContext
	LeftBrace() antlr.TerminalNode
	RightBrace() antlr.TerminalNode
	EnumeratorList() IEnumeratorListContext
	Comma() antlr.TerminalNode

	// IsEnumSpecifierContext differentiates from other interfaces.
	IsEnumSpecifierContext()
}

type EnumSpecifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumSpecifierContext() *EnumSpecifierContext {
	var p = new(EnumSpecifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_enumSpecifier
	return p
}

func InitEmptyEnumSpecifierContext(p *EnumSpecifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_enumSpecifier
}

func (*EnumSpecifierContext) IsEnumSpecifierContext() {}

func NewEnumSpecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumSpecifierContext {
	var p = new(EnumSpecifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_enumSpecifier

	return p
}

func (s *EnumSpecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumSpecifierContext) EnumHead() IEnumHeadContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEnumHeadContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEnumHeadContext)
}

func (s *EnumSpecifierContext) LeftBrace() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftBrace, 0)
}

func (s *EnumSpecifierContext) RightBrace() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightBrace, 0)
}

func (s *EnumSpecifierContext) EnumeratorList() IEnumeratorListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEnumeratorListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEnumeratorListContext)
}

func (s *EnumSpecifierContext) Comma() antlr.TerminalNode {
	return s.GetToken(CPP14ParserComma, 0)
}

func (s *EnumSpecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumSpecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumSpecifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitEnumSpecifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) EnumSpecifier() (localctx IEnumSpecifierContext) {
	localctx = NewEnumSpecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 168, CPP14ParserRULE_enumSpecifier)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1181)
		p.EnumHead()
	}
	{
		p.SetState(1182)
		p.Match(CPP14ParserLeftBrace)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1187)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserIdentifier {
		{
			p.SetState(1183)
			p.EnumeratorList()
		}
		p.SetState(1185)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == CPP14ParserComma {
			{
				p.SetState(1184)
				p.Match(CPP14ParserComma)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}

	}
	{
		p.SetState(1189)
		p.Match(CPP14ParserRightBrace)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IEnumHeadContext is an interface to support dynamic dispatch.
type IEnumHeadContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Enumkey() IEnumkeyContext
	AttributeSpecifierSeq() IAttributeSpecifierSeqContext
	Identifier() antlr.TerminalNode
	Enumbase() IEnumbaseContext
	NestedNameSpecifier() INestedNameSpecifierContext

	// IsEnumHeadContext differentiates from other interfaces.
	IsEnumHeadContext()
}

type EnumHeadContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumHeadContext() *EnumHeadContext {
	var p = new(EnumHeadContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_enumHead
	return p
}

func InitEmptyEnumHeadContext(p *EnumHeadContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_enumHead
}

func (*EnumHeadContext) IsEnumHeadContext() {}

func NewEnumHeadContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumHeadContext {
	var p = new(EnumHeadContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_enumHead

	return p
}

func (s *EnumHeadContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumHeadContext) Enumkey() IEnumkeyContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEnumkeyContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEnumkeyContext)
}

func (s *EnumHeadContext) AttributeSpecifierSeq() IAttributeSpecifierSeqContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributeSpecifierSeqContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributeSpecifierSeqContext)
}

func (s *EnumHeadContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *EnumHeadContext) Enumbase() IEnumbaseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEnumbaseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEnumbaseContext)
}

func (s *EnumHeadContext) NestedNameSpecifier() INestedNameSpecifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INestedNameSpecifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INestedNameSpecifierContext)
}

func (s *EnumHeadContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumHeadContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumHeadContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitEnumHead(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) EnumHead() (localctx IEnumHeadContext) {
	localctx = NewEnumHeadContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 170, CPP14ParserRULE_enumHead)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1191)
		p.Enumkey()
	}
	p.SetState(1193)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserAlignas || _la == CPP14ParserLeftBracket {
		{
			p.SetState(1192)
			p.AttributeSpecifierSeq()
		}

	}
	p.SetState(1199)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserDecltype || _la == CPP14ParserDoublecolon || _la == CPP14ParserIdentifier {
		p.SetState(1196)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 134, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1195)
				p.nestedNameSpecifier(0)
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		{
			p.SetState(1198)
			p.Match(CPP14ParserIdentifier)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(1202)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserColon {
		{
			p.SetState(1201)
			p.Enumbase()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOpaqueEnumDeclarationContext is an interface to support dynamic dispatch.
type IOpaqueEnumDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Enumkey() IEnumkeyContext
	Identifier() antlr.TerminalNode
	Semi() antlr.TerminalNode
	AttributeSpecifierSeq() IAttributeSpecifierSeqContext
	Enumbase() IEnumbaseContext

	// IsOpaqueEnumDeclarationContext differentiates from other interfaces.
	IsOpaqueEnumDeclarationContext()
}

type OpaqueEnumDeclarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpaqueEnumDeclarationContext() *OpaqueEnumDeclarationContext {
	var p = new(OpaqueEnumDeclarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_opaqueEnumDeclaration
	return p
}

func InitEmptyOpaqueEnumDeclarationContext(p *OpaqueEnumDeclarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_opaqueEnumDeclaration
}

func (*OpaqueEnumDeclarationContext) IsOpaqueEnumDeclarationContext() {}

func NewOpaqueEnumDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OpaqueEnumDeclarationContext {
	var p = new(OpaqueEnumDeclarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_opaqueEnumDeclaration

	return p
}

func (s *OpaqueEnumDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *OpaqueEnumDeclarationContext) Enumkey() IEnumkeyContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEnumkeyContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEnumkeyContext)
}

func (s *OpaqueEnumDeclarationContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *OpaqueEnumDeclarationContext) Semi() antlr.TerminalNode {
	return s.GetToken(CPP14ParserSemi, 0)
}

func (s *OpaqueEnumDeclarationContext) AttributeSpecifierSeq() IAttributeSpecifierSeqContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributeSpecifierSeqContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributeSpecifierSeqContext)
}

func (s *OpaqueEnumDeclarationContext) Enumbase() IEnumbaseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEnumbaseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEnumbaseContext)
}

func (s *OpaqueEnumDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OpaqueEnumDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OpaqueEnumDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitOpaqueEnumDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) OpaqueEnumDeclaration() (localctx IOpaqueEnumDeclarationContext) {
	localctx = NewOpaqueEnumDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 172, CPP14ParserRULE_opaqueEnumDeclaration)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1204)
		p.Enumkey()
	}
	p.SetState(1206)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserAlignas || _la == CPP14ParserLeftBracket {
		{
			p.SetState(1205)
			p.AttributeSpecifierSeq()
		}

	}
	{
		p.SetState(1208)
		p.Match(CPP14ParserIdentifier)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1210)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserColon {
		{
			p.SetState(1209)
			p.Enumbase()
		}

	}
	{
		p.SetState(1212)
		p.Match(CPP14ParserSemi)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IEnumkeyContext is an interface to support dynamic dispatch.
type IEnumkeyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Enum() antlr.TerminalNode
	Class() antlr.TerminalNode
	Struct() antlr.TerminalNode

	// IsEnumkeyContext differentiates from other interfaces.
	IsEnumkeyContext()
}

type EnumkeyContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumkeyContext() *EnumkeyContext {
	var p = new(EnumkeyContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_enumkey
	return p
}

func InitEmptyEnumkeyContext(p *EnumkeyContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_enumkey
}

func (*EnumkeyContext) IsEnumkeyContext() {}

func NewEnumkeyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumkeyContext {
	var p = new(EnumkeyContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_enumkey

	return p
}

func (s *EnumkeyContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumkeyContext) Enum() antlr.TerminalNode {
	return s.GetToken(CPP14ParserEnum, 0)
}

func (s *EnumkeyContext) Class() antlr.TerminalNode {
	return s.GetToken(CPP14ParserClass, 0)
}

func (s *EnumkeyContext) Struct() antlr.TerminalNode {
	return s.GetToken(CPP14ParserStruct, 0)
}

func (s *EnumkeyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumkeyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumkeyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitEnumkey(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) Enumkey() (localctx IEnumkeyContext) {
	localctx = NewEnumkeyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 174, CPP14ParserRULE_enumkey)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1214)
		p.Match(CPP14ParserEnum)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1216)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserClass || _la == CPP14ParserStruct {
		{
			p.SetState(1215)
			_la = p.GetTokenStream().LA(1)

			if !(_la == CPP14ParserClass || _la == CPP14ParserStruct) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IEnumbaseContext is an interface to support dynamic dispatch.
type IEnumbaseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Colon() antlr.TerminalNode
	TypeSpecifierSeq() ITypeSpecifierSeqContext

	// IsEnumbaseContext differentiates from other interfaces.
	IsEnumbaseContext()
}

type EnumbaseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumbaseContext() *EnumbaseContext {
	var p = new(EnumbaseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_enumbase
	return p
}

func InitEmptyEnumbaseContext(p *EnumbaseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_enumbase
}

func (*EnumbaseContext) IsEnumbaseContext() {}

func NewEnumbaseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumbaseContext {
	var p = new(EnumbaseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_enumbase

	return p
}

func (s *EnumbaseContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumbaseContext) Colon() antlr.TerminalNode {
	return s.GetToken(CPP14ParserColon, 0)
}

func (s *EnumbaseContext) TypeSpecifierSeq() ITypeSpecifierSeqContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeSpecifierSeqContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeSpecifierSeqContext)
}

func (s *EnumbaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumbaseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumbaseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitEnumbase(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) Enumbase() (localctx IEnumbaseContext) {
	localctx = NewEnumbaseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 176, CPP14ParserRULE_enumbase)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1218)
		p.Match(CPP14ParserColon)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1219)
		p.TypeSpecifierSeq()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IEnumeratorListContext is an interface to support dynamic dispatch.
type IEnumeratorListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllEnumeratorDefinition() []IEnumeratorDefinitionContext
	EnumeratorDefinition(i int) IEnumeratorDefinitionContext
	AllComma() []antlr.TerminalNode
	Comma(i int) antlr.TerminalNode

	// IsEnumeratorListContext differentiates from other interfaces.
	IsEnumeratorListContext()
}

type EnumeratorListContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumeratorListContext() *EnumeratorListContext {
	var p = new(EnumeratorListContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_enumeratorList
	return p
}

func InitEmptyEnumeratorListContext(p *EnumeratorListContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_enumeratorList
}

func (*EnumeratorListContext) IsEnumeratorListContext() {}

func NewEnumeratorListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumeratorListContext {
	var p = new(EnumeratorListContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_enumeratorList

	return p
}

func (s *EnumeratorListContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumeratorListContext) AllEnumeratorDefinition() []IEnumeratorDefinitionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IEnumeratorDefinitionContext); ok {
			len++
		}
	}

	tst := make([]IEnumeratorDefinitionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IEnumeratorDefinitionContext); ok {
			tst[i] = t.(IEnumeratorDefinitionContext)
			i++
		}
	}

	return tst
}

func (s *EnumeratorListContext) EnumeratorDefinition(i int) IEnumeratorDefinitionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEnumeratorDefinitionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEnumeratorDefinitionContext)
}

func (s *EnumeratorListContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserComma)
}

func (s *EnumeratorListContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserComma, i)
}

func (s *EnumeratorListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumeratorListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumeratorListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitEnumeratorList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) EnumeratorList() (localctx IEnumeratorListContext) {
	localctx = NewEnumeratorListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 178, CPP14ParserRULE_enumeratorList)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1221)
		p.EnumeratorDefinition()
	}
	p.SetState(1226)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 140, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1222)
				p.Match(CPP14ParserComma)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1223)
				p.EnumeratorDefinition()
			}

		}
		p.SetState(1228)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 140, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IEnumeratorDefinitionContext is an interface to support dynamic dispatch.
type IEnumeratorDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Enumerator() IEnumeratorContext
	Assign() antlr.TerminalNode
	ConstantExpression() IConstantExpressionContext

	// IsEnumeratorDefinitionContext differentiates from other interfaces.
	IsEnumeratorDefinitionContext()
}

type EnumeratorDefinitionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumeratorDefinitionContext() *EnumeratorDefinitionContext {
	var p = new(EnumeratorDefinitionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_enumeratorDefinition
	return p
}

func InitEmptyEnumeratorDefinitionContext(p *EnumeratorDefinitionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_enumeratorDefinition
}

func (*EnumeratorDefinitionContext) IsEnumeratorDefinitionContext() {}

func NewEnumeratorDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumeratorDefinitionContext {
	var p = new(EnumeratorDefinitionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_enumeratorDefinition

	return p
}

func (s *EnumeratorDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumeratorDefinitionContext) Enumerator() IEnumeratorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEnumeratorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEnumeratorContext)
}

func (s *EnumeratorDefinitionContext) Assign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAssign, 0)
}

func (s *EnumeratorDefinitionContext) ConstantExpression() IConstantExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConstantExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConstantExpressionContext)
}

func (s *EnumeratorDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumeratorDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumeratorDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitEnumeratorDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) EnumeratorDefinition() (localctx IEnumeratorDefinitionContext) {
	localctx = NewEnumeratorDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 180, CPP14ParserRULE_enumeratorDefinition)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1229)
		p.Enumerator()
	}
	p.SetState(1232)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserAssign {
		{
			p.SetState(1230)
			p.Match(CPP14ParserAssign)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1231)
			p.ConstantExpression()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IEnumeratorContext is an interface to support dynamic dispatch.
type IEnumeratorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() antlr.TerminalNode

	// IsEnumeratorContext differentiates from other interfaces.
	IsEnumeratorContext()
}

type EnumeratorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumeratorContext() *EnumeratorContext {
	var p = new(EnumeratorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_enumerator
	return p
}

func InitEmptyEnumeratorContext(p *EnumeratorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_enumerator
}

func (*EnumeratorContext) IsEnumeratorContext() {}

func NewEnumeratorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumeratorContext {
	var p = new(EnumeratorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_enumerator

	return p
}

func (s *EnumeratorContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumeratorContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *EnumeratorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumeratorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumeratorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitEnumerator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) Enumerator() (localctx IEnumeratorContext) {
	localctx = NewEnumeratorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 182, CPP14ParserRULE_enumerator)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1234)
		p.Match(CPP14ParserIdentifier)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INamespaceNameContext is an interface to support dynamic dispatch.
type INamespaceNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	OriginalNamespaceName() IOriginalNamespaceNameContext
	NamespaceAlias() INamespaceAliasContext

	// IsNamespaceNameContext differentiates from other interfaces.
	IsNamespaceNameContext()
}

type NamespaceNameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNamespaceNameContext() *NamespaceNameContext {
	var p = new(NamespaceNameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_namespaceName
	return p
}

func InitEmptyNamespaceNameContext(p *NamespaceNameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_namespaceName
}

func (*NamespaceNameContext) IsNamespaceNameContext() {}

func NewNamespaceNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NamespaceNameContext {
	var p = new(NamespaceNameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_namespaceName

	return p
}

func (s *NamespaceNameContext) GetParser() antlr.Parser { return s.parser }

func (s *NamespaceNameContext) OriginalNamespaceName() IOriginalNamespaceNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOriginalNamespaceNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOriginalNamespaceNameContext)
}

func (s *NamespaceNameContext) NamespaceAlias() INamespaceAliasContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INamespaceAliasContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INamespaceAliasContext)
}

func (s *NamespaceNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NamespaceNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NamespaceNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitNamespaceName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) NamespaceName() (localctx INamespaceNameContext) {
	localctx = NewNamespaceNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 184, CPP14ParserRULE_namespaceName)
	p.SetState(1238)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 142, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1236)
			p.OriginalNamespaceName()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1237)
			p.NamespaceAlias()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOriginalNamespaceNameContext is an interface to support dynamic dispatch.
type IOriginalNamespaceNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() antlr.TerminalNode

	// IsOriginalNamespaceNameContext differentiates from other interfaces.
	IsOriginalNamespaceNameContext()
}

type OriginalNamespaceNameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOriginalNamespaceNameContext() *OriginalNamespaceNameContext {
	var p = new(OriginalNamespaceNameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_originalNamespaceName
	return p
}

func InitEmptyOriginalNamespaceNameContext(p *OriginalNamespaceNameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_originalNamespaceName
}

func (*OriginalNamespaceNameContext) IsOriginalNamespaceNameContext() {}

func NewOriginalNamespaceNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OriginalNamespaceNameContext {
	var p = new(OriginalNamespaceNameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_originalNamespaceName

	return p
}

func (s *OriginalNamespaceNameContext) GetParser() antlr.Parser { return s.parser }

func (s *OriginalNamespaceNameContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *OriginalNamespaceNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OriginalNamespaceNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OriginalNamespaceNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitOriginalNamespaceName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) OriginalNamespaceName() (localctx IOriginalNamespaceNameContext) {
	localctx = NewOriginalNamespaceNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 186, CPP14ParserRULE_originalNamespaceName)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1240)
		p.Match(CPP14ParserIdentifier)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INamespaceDefinitionContext is an interface to support dynamic dispatch.
type INamespaceDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetNamespaceBody returns the namespaceBody rule contexts.
	GetNamespaceBody() IDeclarationseqContext

	// SetNamespaceBody sets the namespaceBody rule contexts.
	SetNamespaceBody(IDeclarationseqContext)

	// Getter signatures
	Namespace() antlr.TerminalNode
	LeftBrace() antlr.TerminalNode
	RightBrace() antlr.TerminalNode
	Inline() antlr.TerminalNode
	Identifier() antlr.TerminalNode
	OriginalNamespaceName() IOriginalNamespaceNameContext
	Declarationseq() IDeclarationseqContext

	// IsNamespaceDefinitionContext differentiates from other interfaces.
	IsNamespaceDefinitionContext()
}

type NamespaceDefinitionContext struct {
	antlr.BaseParserRuleContext
	parser        antlr.Parser
	namespaceBody IDeclarationseqContext
}

func NewEmptyNamespaceDefinitionContext() *NamespaceDefinitionContext {
	var p = new(NamespaceDefinitionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_namespaceDefinition
	return p
}

func InitEmptyNamespaceDefinitionContext(p *NamespaceDefinitionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_namespaceDefinition
}

func (*NamespaceDefinitionContext) IsNamespaceDefinitionContext() {}

func NewNamespaceDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NamespaceDefinitionContext {
	var p = new(NamespaceDefinitionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_namespaceDefinition

	return p
}

func (s *NamespaceDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *NamespaceDefinitionContext) GetNamespaceBody() IDeclarationseqContext {
	return s.namespaceBody
}

func (s *NamespaceDefinitionContext) SetNamespaceBody(v IDeclarationseqContext) { s.namespaceBody = v }

func (s *NamespaceDefinitionContext) Namespace() antlr.TerminalNode {
	return s.GetToken(CPP14ParserNamespace, 0)
}

func (s *NamespaceDefinitionContext) LeftBrace() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftBrace, 0)
}

func (s *NamespaceDefinitionContext) RightBrace() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightBrace, 0)
}

func (s *NamespaceDefinitionContext) Inline() antlr.TerminalNode {
	return s.GetToken(CPP14ParserInline, 0)
}

func (s *NamespaceDefinitionContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *NamespaceDefinitionContext) OriginalNamespaceName() IOriginalNamespaceNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOriginalNamespaceNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOriginalNamespaceNameContext)
}

func (s *NamespaceDefinitionContext) Declarationseq() IDeclarationseqContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDeclarationseqContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDeclarationseqContext)
}

func (s *NamespaceDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NamespaceDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NamespaceDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitNamespaceDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) NamespaceDefinition() (localctx INamespaceDefinitionContext) {
	localctx = NewNamespaceDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 188, CPP14ParserRULE_namespaceDefinition)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1243)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserInline {
		{
			p.SetState(1242)
			p.Match(CPP14ParserInline)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(1245)
		p.Match(CPP14ParserNamespace)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1248)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 144, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1246)
			p.Match(CPP14ParserIdentifier)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	} else if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 144, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(1247)
			p.OriginalNamespaceName()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(1250)
		p.Match(CPP14ParserLeftBrace)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1252)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64((_la-10)) & ^0x3f) == 0 && ((int64(1)<<(_la-10))&1543754443169808157) != 0) || ((int64((_la-74)) & ^0x3f) == 0 && ((int64(1)<<(_la-74))&459384754220313597) != 0) {
		{
			p.SetState(1251)

			var _x = p.Declarationseq()

			localctx.(*NamespaceDefinitionContext).namespaceBody = _x
		}

	}
	{
		p.SetState(1254)
		p.Match(CPP14ParserRightBrace)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INamespaceAliasContext is an interface to support dynamic dispatch.
type INamespaceAliasContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() antlr.TerminalNode

	// IsNamespaceAliasContext differentiates from other interfaces.
	IsNamespaceAliasContext()
}

type NamespaceAliasContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNamespaceAliasContext() *NamespaceAliasContext {
	var p = new(NamespaceAliasContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_namespaceAlias
	return p
}

func InitEmptyNamespaceAliasContext(p *NamespaceAliasContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_namespaceAlias
}

func (*NamespaceAliasContext) IsNamespaceAliasContext() {}

func NewNamespaceAliasContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NamespaceAliasContext {
	var p = new(NamespaceAliasContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_namespaceAlias

	return p
}

func (s *NamespaceAliasContext) GetParser() antlr.Parser { return s.parser }

func (s *NamespaceAliasContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *NamespaceAliasContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NamespaceAliasContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NamespaceAliasContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitNamespaceAlias(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) NamespaceAlias() (localctx INamespaceAliasContext) {
	localctx = NewNamespaceAliasContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 190, CPP14ParserRULE_namespaceAlias)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1256)
		p.Match(CPP14ParserIdentifier)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INamespaceAliasDefinitionContext is an interface to support dynamic dispatch.
type INamespaceAliasDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Namespace() antlr.TerminalNode
	Identifier() antlr.TerminalNode
	Assign() antlr.TerminalNode
	Qualifiednamespacespecifier() IQualifiednamespacespecifierContext
	Semi() antlr.TerminalNode

	// IsNamespaceAliasDefinitionContext differentiates from other interfaces.
	IsNamespaceAliasDefinitionContext()
}

type NamespaceAliasDefinitionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNamespaceAliasDefinitionContext() *NamespaceAliasDefinitionContext {
	var p = new(NamespaceAliasDefinitionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_namespaceAliasDefinition
	return p
}

func InitEmptyNamespaceAliasDefinitionContext(p *NamespaceAliasDefinitionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_namespaceAliasDefinition
}

func (*NamespaceAliasDefinitionContext) IsNamespaceAliasDefinitionContext() {}

func NewNamespaceAliasDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NamespaceAliasDefinitionContext {
	var p = new(NamespaceAliasDefinitionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_namespaceAliasDefinition

	return p
}

func (s *NamespaceAliasDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *NamespaceAliasDefinitionContext) Namespace() antlr.TerminalNode {
	return s.GetToken(CPP14ParserNamespace, 0)
}

func (s *NamespaceAliasDefinitionContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *NamespaceAliasDefinitionContext) Assign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAssign, 0)
}

func (s *NamespaceAliasDefinitionContext) Qualifiednamespacespecifier() IQualifiednamespacespecifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQualifiednamespacespecifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQualifiednamespacespecifierContext)
}

func (s *NamespaceAliasDefinitionContext) Semi() antlr.TerminalNode {
	return s.GetToken(CPP14ParserSemi, 0)
}

func (s *NamespaceAliasDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NamespaceAliasDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NamespaceAliasDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitNamespaceAliasDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) NamespaceAliasDefinition() (localctx INamespaceAliasDefinitionContext) {
	localctx = NewNamespaceAliasDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 192, CPP14ParserRULE_namespaceAliasDefinition)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1258)
		p.Match(CPP14ParserNamespace)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1259)
		p.Match(CPP14ParserIdentifier)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1260)
		p.Match(CPP14ParserAssign)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1261)
		p.Qualifiednamespacespecifier()
	}
	{
		p.SetState(1262)
		p.Match(CPP14ParserSemi)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IQualifiednamespacespecifierContext is an interface to support dynamic dispatch.
type IQualifiednamespacespecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	NamespaceName() INamespaceNameContext
	NestedNameSpecifier() INestedNameSpecifierContext

	// IsQualifiednamespacespecifierContext differentiates from other interfaces.
	IsQualifiednamespacespecifierContext()
}

type QualifiednamespacespecifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQualifiednamespacespecifierContext() *QualifiednamespacespecifierContext {
	var p = new(QualifiednamespacespecifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_qualifiednamespacespecifier
	return p
}

func InitEmptyQualifiednamespacespecifierContext(p *QualifiednamespacespecifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_qualifiednamespacespecifier
}

func (*QualifiednamespacespecifierContext) IsQualifiednamespacespecifierContext() {}

func NewQualifiednamespacespecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *QualifiednamespacespecifierContext {
	var p = new(QualifiednamespacespecifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_qualifiednamespacespecifier

	return p
}

func (s *QualifiednamespacespecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *QualifiednamespacespecifierContext) NamespaceName() INamespaceNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INamespaceNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INamespaceNameContext)
}

func (s *QualifiednamespacespecifierContext) NestedNameSpecifier() INestedNameSpecifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INestedNameSpecifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INestedNameSpecifierContext)
}

func (s *QualifiednamespacespecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QualifiednamespacespecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *QualifiednamespacespecifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitQualifiednamespacespecifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) Qualifiednamespacespecifier() (localctx IQualifiednamespacespecifierContext) {
	localctx = NewQualifiednamespacespecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 194, CPP14ParserRULE_qualifiednamespacespecifier)
	p.EnterOuterAlt(localctx, 1)
	p.SetState(1265)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 146, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1264)
			p.nestedNameSpecifier(0)
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(1267)
		p.NamespaceName()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUsingDeclarationContext is an interface to support dynamic dispatch.
type IUsingDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Using() antlr.TerminalNode
	UnqualifiedId() IUnqualifiedIdContext
	Semi() antlr.TerminalNode
	Doublecolon() antlr.TerminalNode
	NestedNameSpecifier() INestedNameSpecifierContext
	Typename_() antlr.TerminalNode

	// IsUsingDeclarationContext differentiates from other interfaces.
	IsUsingDeclarationContext()
}

type UsingDeclarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUsingDeclarationContext() *UsingDeclarationContext {
	var p = new(UsingDeclarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_usingDeclaration
	return p
}

func InitEmptyUsingDeclarationContext(p *UsingDeclarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_usingDeclaration
}

func (*UsingDeclarationContext) IsUsingDeclarationContext() {}

func NewUsingDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UsingDeclarationContext {
	var p = new(UsingDeclarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_usingDeclaration

	return p
}

func (s *UsingDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *UsingDeclarationContext) Using() antlr.TerminalNode {
	return s.GetToken(CPP14ParserUsing, 0)
}

func (s *UsingDeclarationContext) UnqualifiedId() IUnqualifiedIdContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnqualifiedIdContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnqualifiedIdContext)
}

func (s *UsingDeclarationContext) Semi() antlr.TerminalNode {
	return s.GetToken(CPP14ParserSemi, 0)
}

func (s *UsingDeclarationContext) Doublecolon() antlr.TerminalNode {
	return s.GetToken(CPP14ParserDoublecolon, 0)
}

func (s *UsingDeclarationContext) NestedNameSpecifier() INestedNameSpecifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INestedNameSpecifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INestedNameSpecifierContext)
}

func (s *UsingDeclarationContext) Typename_() antlr.TerminalNode {
	return s.GetToken(CPP14ParserTypename_, 0)
}

func (s *UsingDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UsingDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UsingDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitUsingDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) UsingDeclaration() (localctx IUsingDeclarationContext) {
	localctx = NewUsingDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 196, CPP14ParserRULE_usingDeclaration)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1269)
		p.Match(CPP14ParserUsing)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1275)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 148, p.GetParserRuleContext()) {
	case 1:
		p.SetState(1271)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == CPP14ParserTypename_ {
			{
				p.SetState(1270)
				p.Match(CPP14ParserTypename_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(1273)
			p.nestedNameSpecifier(0)
		}

	case 2:
		{
			p.SetState(1274)
			p.Match(CPP14ParserDoublecolon)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	{
		p.SetState(1277)
		p.UnqualifiedId()
	}
	{
		p.SetState(1278)
		p.Match(CPP14ParserSemi)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUsingDirectiveContext is an interface to support dynamic dispatch.
type IUsingDirectiveContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Using() antlr.TerminalNode
	Namespace() antlr.TerminalNode
	NamespaceName() INamespaceNameContext
	Semi() antlr.TerminalNode
	AttributeSpecifierSeq() IAttributeSpecifierSeqContext
	NestedNameSpecifier() INestedNameSpecifierContext

	// IsUsingDirectiveContext differentiates from other interfaces.
	IsUsingDirectiveContext()
}

type UsingDirectiveContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUsingDirectiveContext() *UsingDirectiveContext {
	var p = new(UsingDirectiveContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_usingDirective
	return p
}

func InitEmptyUsingDirectiveContext(p *UsingDirectiveContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_usingDirective
}

func (*UsingDirectiveContext) IsUsingDirectiveContext() {}

func NewUsingDirectiveContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UsingDirectiveContext {
	var p = new(UsingDirectiveContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_usingDirective

	return p
}

func (s *UsingDirectiveContext) GetParser() antlr.Parser { return s.parser }

func (s *UsingDirectiveContext) Using() antlr.TerminalNode {
	return s.GetToken(CPP14ParserUsing, 0)
}

func (s *UsingDirectiveContext) Namespace() antlr.TerminalNode {
	return s.GetToken(CPP14ParserNamespace, 0)
}

func (s *UsingDirectiveContext) NamespaceName() INamespaceNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INamespaceNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INamespaceNameContext)
}

func (s *UsingDirectiveContext) Semi() antlr.TerminalNode {
	return s.GetToken(CPP14ParserSemi, 0)
}

func (s *UsingDirectiveContext) AttributeSpecifierSeq() IAttributeSpecifierSeqContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributeSpecifierSeqContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributeSpecifierSeqContext)
}

func (s *UsingDirectiveContext) NestedNameSpecifier() INestedNameSpecifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INestedNameSpecifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INestedNameSpecifierContext)
}

func (s *UsingDirectiveContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UsingDirectiveContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UsingDirectiveContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitUsingDirective(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) UsingDirective() (localctx IUsingDirectiveContext) {
	localctx = NewUsingDirectiveContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 198, CPP14ParserRULE_usingDirective)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1281)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserAlignas || _la == CPP14ParserLeftBracket {
		{
			p.SetState(1280)
			p.AttributeSpecifierSeq()
		}

	}
	{
		p.SetState(1283)
		p.Match(CPP14ParserUsing)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1284)
		p.Match(CPP14ParserNamespace)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1286)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 150, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1285)
			p.nestedNameSpecifier(0)
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(1288)
		p.NamespaceName()
	}
	{
		p.SetState(1289)
		p.Match(CPP14ParserSemi)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAsmDefinitionContext is an interface to support dynamic dispatch.
type IAsmDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Asm() antlr.TerminalNode
	LeftParen() antlr.TerminalNode
	StringLiteral() antlr.TerminalNode
	RightParen() antlr.TerminalNode
	Semi() antlr.TerminalNode

	// IsAsmDefinitionContext differentiates from other interfaces.
	IsAsmDefinitionContext()
}

type AsmDefinitionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAsmDefinitionContext() *AsmDefinitionContext {
	var p = new(AsmDefinitionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_asmDefinition
	return p
}

func InitEmptyAsmDefinitionContext(p *AsmDefinitionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_asmDefinition
}

func (*AsmDefinitionContext) IsAsmDefinitionContext() {}

func NewAsmDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AsmDefinitionContext {
	var p = new(AsmDefinitionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_asmDefinition

	return p
}

func (s *AsmDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *AsmDefinitionContext) Asm() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAsm, 0)
}

func (s *AsmDefinitionContext) LeftParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, 0)
}

func (s *AsmDefinitionContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(CPP14ParserStringLiteral, 0)
}

func (s *AsmDefinitionContext) RightParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, 0)
}

func (s *AsmDefinitionContext) Semi() antlr.TerminalNode {
	return s.GetToken(CPP14ParserSemi, 0)
}

func (s *AsmDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AsmDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AsmDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitAsmDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) AsmDefinition() (localctx IAsmDefinitionContext) {
	localctx = NewAsmDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 200, CPP14ParserRULE_asmDefinition)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1291)
		p.Match(CPP14ParserAsm)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1292)
		p.Match(CPP14ParserLeftParen)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1293)
		p.Match(CPP14ParserStringLiteral)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1294)
		p.Match(CPP14ParserRightParen)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1295)
		p.Match(CPP14ParserSemi)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILinkageSpecificationContext is an interface to support dynamic dispatch.
type ILinkageSpecificationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Extern() antlr.TerminalNode
	StringLiteral() antlr.TerminalNode
	LeftBrace() antlr.TerminalNode
	RightBrace() antlr.TerminalNode
	Declaration() IDeclarationContext
	Declarationseq() IDeclarationseqContext

	// IsLinkageSpecificationContext differentiates from other interfaces.
	IsLinkageSpecificationContext()
}

type LinkageSpecificationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLinkageSpecificationContext() *LinkageSpecificationContext {
	var p = new(LinkageSpecificationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_linkageSpecification
	return p
}

func InitEmptyLinkageSpecificationContext(p *LinkageSpecificationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_linkageSpecification
}

func (*LinkageSpecificationContext) IsLinkageSpecificationContext() {}

func NewLinkageSpecificationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LinkageSpecificationContext {
	var p = new(LinkageSpecificationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_linkageSpecification

	return p
}

func (s *LinkageSpecificationContext) GetParser() antlr.Parser { return s.parser }

func (s *LinkageSpecificationContext) Extern() antlr.TerminalNode {
	return s.GetToken(CPP14ParserExtern, 0)
}

func (s *LinkageSpecificationContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(CPP14ParserStringLiteral, 0)
}

func (s *LinkageSpecificationContext) LeftBrace() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftBrace, 0)
}

func (s *LinkageSpecificationContext) RightBrace() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightBrace, 0)
}

func (s *LinkageSpecificationContext) Declaration() IDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDeclarationContext)
}

func (s *LinkageSpecificationContext) Declarationseq() IDeclarationseqContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDeclarationseqContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDeclarationseqContext)
}

func (s *LinkageSpecificationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LinkageSpecificationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LinkageSpecificationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitLinkageSpecification(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) LinkageSpecification() (localctx ILinkageSpecificationContext) {
	localctx = NewLinkageSpecificationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 202, CPP14ParserRULE_linkageSpecification)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1297)
		p.Match(CPP14ParserExtern)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1298)
		p.Match(CPP14ParserStringLiteral)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1305)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserLeftBrace:
		{
			p.SetState(1299)
			p.Match(CPP14ParserLeftBrace)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1301)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64((_la-10)) & ^0x3f) == 0 && ((int64(1)<<(_la-10))&1543754443169808157) != 0) || ((int64((_la-74)) & ^0x3f) == 0 && ((int64(1)<<(_la-74))&459384754220313597) != 0) {
			{
				p.SetState(1300)
				p.Declarationseq()
			}

		}
		{
			p.SetState(1303)
			p.Match(CPP14ParserRightBrace)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case CPP14ParserAlignas, CPP14ParserAsm, CPP14ParserAuto, CPP14ParserBool, CPP14ParserChar, CPP14ParserChar16, CPP14ParserChar32, CPP14ParserClass, CPP14ParserConst, CPP14ParserConstexpr, CPP14ParserDecltype, CPP14ParserDouble, CPP14ParserEnum, CPP14ParserExplicit, CPP14ParserExtern, CPP14ParserFloat, CPP14ParserFriend, CPP14ParserInline, CPP14ParserInt, CPP14ParserLong, CPP14ParserMutable, CPP14ParserNamespace, CPP14ParserOperator, CPP14ParserRegister, CPP14ParserShort, CPP14ParserSigned, CPP14ParserStatic, CPP14ParserStatic_assert, CPP14ParserStruct, CPP14ParserTemplate, CPP14ParserThread_local, CPP14ParserTypedef, CPP14ParserTypename_, CPP14ParserUnion, CPP14ParserUnsigned, CPP14ParserUsing, CPP14ParserVirtual, CPP14ParserVoid, CPP14ParserVolatile, CPP14ParserWchar, CPP14ParserLeftParen, CPP14ParserLeftBracket, CPP14ParserStar, CPP14ParserAnd, CPP14ParserTilde, CPP14ParserAndAnd, CPP14ParserDoublecolon, CPP14ParserSemi, CPP14ParserEllipsis, CPP14ParserIdentifier:
		{
			p.SetState(1304)
			p.Declaration()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAttributeSpecifierSeqContext is an interface to support dynamic dispatch.
type IAttributeSpecifierSeqContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllAttributeSpecifier() []IAttributeSpecifierContext
	AttributeSpecifier(i int) IAttributeSpecifierContext

	// IsAttributeSpecifierSeqContext differentiates from other interfaces.
	IsAttributeSpecifierSeqContext()
}

type AttributeSpecifierSeqContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAttributeSpecifierSeqContext() *AttributeSpecifierSeqContext {
	var p = new(AttributeSpecifierSeqContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_attributeSpecifierSeq
	return p
}

func InitEmptyAttributeSpecifierSeqContext(p *AttributeSpecifierSeqContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_attributeSpecifierSeq
}

func (*AttributeSpecifierSeqContext) IsAttributeSpecifierSeqContext() {}

func NewAttributeSpecifierSeqContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AttributeSpecifierSeqContext {
	var p = new(AttributeSpecifierSeqContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_attributeSpecifierSeq

	return p
}

func (s *AttributeSpecifierSeqContext) GetParser() antlr.Parser { return s.parser }

func (s *AttributeSpecifierSeqContext) AllAttributeSpecifier() []IAttributeSpecifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAttributeSpecifierContext); ok {
			len++
		}
	}

	tst := make([]IAttributeSpecifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAttributeSpecifierContext); ok {
			tst[i] = t.(IAttributeSpecifierContext)
			i++
		}
	}

	return tst
}

func (s *AttributeSpecifierSeqContext) AttributeSpecifier(i int) IAttributeSpecifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributeSpecifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributeSpecifierContext)
}

func (s *AttributeSpecifierSeqContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AttributeSpecifierSeqContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AttributeSpecifierSeqContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitAttributeSpecifierSeq(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) AttributeSpecifierSeq() (localctx IAttributeSpecifierSeqContext) {
	localctx = NewAttributeSpecifierSeqContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 204, CPP14ParserRULE_attributeSpecifierSeq)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1308)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(1307)
				p.AttributeSpecifier()
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}

		p.SetState(1310)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 153, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAttributeSpecifierContext is an interface to support dynamic dispatch.
type IAttributeSpecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllLeftBracket() []antlr.TerminalNode
	LeftBracket(i int) antlr.TerminalNode
	AllRightBracket() []antlr.TerminalNode
	RightBracket(i int) antlr.TerminalNode
	AttributeList() IAttributeListContext
	Alignmentspecifier() IAlignmentspecifierContext

	// IsAttributeSpecifierContext differentiates from other interfaces.
	IsAttributeSpecifierContext()
}

type AttributeSpecifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAttributeSpecifierContext() *AttributeSpecifierContext {
	var p = new(AttributeSpecifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_attributeSpecifier
	return p
}

func InitEmptyAttributeSpecifierContext(p *AttributeSpecifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_attributeSpecifier
}

func (*AttributeSpecifierContext) IsAttributeSpecifierContext() {}

func NewAttributeSpecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AttributeSpecifierContext {
	var p = new(AttributeSpecifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_attributeSpecifier

	return p
}

func (s *AttributeSpecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *AttributeSpecifierContext) AllLeftBracket() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserLeftBracket)
}

func (s *AttributeSpecifierContext) LeftBracket(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftBracket, i)
}

func (s *AttributeSpecifierContext) AllRightBracket() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserRightBracket)
}

func (s *AttributeSpecifierContext) RightBracket(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightBracket, i)
}

func (s *AttributeSpecifierContext) AttributeList() IAttributeListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributeListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributeListContext)
}

func (s *AttributeSpecifierContext) Alignmentspecifier() IAlignmentspecifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlignmentspecifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlignmentspecifierContext)
}

func (s *AttributeSpecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AttributeSpecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AttributeSpecifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitAttributeSpecifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) AttributeSpecifier() (localctx IAttributeSpecifierContext) {
	localctx = NewAttributeSpecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 206, CPP14ParserRULE_attributeSpecifier)
	var _la int

	p.SetState(1320)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserLeftBracket:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1312)
			p.Match(CPP14ParserLeftBracket)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1313)
			p.Match(CPP14ParserLeftBracket)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1315)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == CPP14ParserIdentifier {
			{
				p.SetState(1314)
				p.AttributeList()
			}

		}
		{
			p.SetState(1317)
			p.Match(CPP14ParserRightBracket)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1318)
			p.Match(CPP14ParserRightBracket)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case CPP14ParserAlignas:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1319)
			p.Alignmentspecifier()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAlignmentspecifierContext is an interface to support dynamic dispatch.
type IAlignmentspecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Alignas() antlr.TerminalNode
	LeftParen() antlr.TerminalNode
	RightParen() antlr.TerminalNode
	TheTypeId() ITheTypeIdContext
	ConstantExpression() IConstantExpressionContext
	Ellipsis() antlr.TerminalNode

	// IsAlignmentspecifierContext differentiates from other interfaces.
	IsAlignmentspecifierContext()
}

type AlignmentspecifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlignmentspecifierContext() *AlignmentspecifierContext {
	var p = new(AlignmentspecifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_alignmentspecifier
	return p
}

func InitEmptyAlignmentspecifierContext(p *AlignmentspecifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_alignmentspecifier
}

func (*AlignmentspecifierContext) IsAlignmentspecifierContext() {}

func NewAlignmentspecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlignmentspecifierContext {
	var p = new(AlignmentspecifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_alignmentspecifier

	return p
}

func (s *AlignmentspecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *AlignmentspecifierContext) Alignas() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAlignas, 0)
}

func (s *AlignmentspecifierContext) LeftParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, 0)
}

func (s *AlignmentspecifierContext) RightParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, 0)
}

func (s *AlignmentspecifierContext) TheTypeId() ITheTypeIdContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITheTypeIdContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITheTypeIdContext)
}

func (s *AlignmentspecifierContext) ConstantExpression() IConstantExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConstantExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConstantExpressionContext)
}

func (s *AlignmentspecifierContext) Ellipsis() antlr.TerminalNode {
	return s.GetToken(CPP14ParserEllipsis, 0)
}

func (s *AlignmentspecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlignmentspecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlignmentspecifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitAlignmentspecifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) Alignmentspecifier() (localctx IAlignmentspecifierContext) {
	localctx = NewAlignmentspecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 208, CPP14ParserRULE_alignmentspecifier)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1322)
		p.Match(CPP14ParserAlignas)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1323)
		p.Match(CPP14ParserLeftParen)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1326)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 156, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1324)
			p.TheTypeId()
		}

	case 2:
		{
			p.SetState(1325)
			p.ConstantExpression()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	p.SetState(1329)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserEllipsis {
		{
			p.SetState(1328)
			p.Match(CPP14ParserEllipsis)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(1331)
		p.Match(CPP14ParserRightParen)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAttributeListContext is an interface to support dynamic dispatch.
type IAttributeListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllAttribute() []IAttributeContext
	Attribute(i int) IAttributeContext
	AllComma() []antlr.TerminalNode
	Comma(i int) antlr.TerminalNode
	Ellipsis() antlr.TerminalNode

	// IsAttributeListContext differentiates from other interfaces.
	IsAttributeListContext()
}

type AttributeListContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAttributeListContext() *AttributeListContext {
	var p = new(AttributeListContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_attributeList
	return p
}

func InitEmptyAttributeListContext(p *AttributeListContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_attributeList
}

func (*AttributeListContext) IsAttributeListContext() {}

func NewAttributeListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AttributeListContext {
	var p = new(AttributeListContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_attributeList

	return p
}

func (s *AttributeListContext) GetParser() antlr.Parser { return s.parser }

func (s *AttributeListContext) AllAttribute() []IAttributeContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAttributeContext); ok {
			len++
		}
	}

	tst := make([]IAttributeContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAttributeContext); ok {
			tst[i] = t.(IAttributeContext)
			i++
		}
	}

	return tst
}

func (s *AttributeListContext) Attribute(i int) IAttributeContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributeContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributeContext)
}

func (s *AttributeListContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserComma)
}

func (s *AttributeListContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserComma, i)
}

func (s *AttributeListContext) Ellipsis() antlr.TerminalNode {
	return s.GetToken(CPP14ParserEllipsis, 0)
}

func (s *AttributeListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AttributeListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AttributeListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitAttributeList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) AttributeList() (localctx IAttributeListContext) {
	localctx = NewAttributeListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 210, CPP14ParserRULE_attributeList)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1333)
		p.Attribute()
	}
	p.SetState(1338)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == CPP14ParserComma {
		{
			p.SetState(1334)
			p.Match(CPP14ParserComma)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1335)
			p.Attribute()
		}

		p.SetState(1340)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(1342)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserEllipsis {
		{
			p.SetState(1341)
			p.Match(CPP14ParserEllipsis)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAttributeContext is an interface to support dynamic dispatch.
type IAttributeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() antlr.TerminalNode
	AttributeNamespace() IAttributeNamespaceContext
	Doublecolon() antlr.TerminalNode
	AttributeArgumentClause() IAttributeArgumentClauseContext

	// IsAttributeContext differentiates from other interfaces.
	IsAttributeContext()
}

type AttributeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAttributeContext() *AttributeContext {
	var p = new(AttributeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_attribute
	return p
}

func InitEmptyAttributeContext(p *AttributeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_attribute
}

func (*AttributeContext) IsAttributeContext() {}

func NewAttributeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AttributeContext {
	var p = new(AttributeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_attribute

	return p
}

func (s *AttributeContext) GetParser() antlr.Parser { return s.parser }

func (s *AttributeContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *AttributeContext) AttributeNamespace() IAttributeNamespaceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributeNamespaceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributeNamespaceContext)
}

func (s *AttributeContext) Doublecolon() antlr.TerminalNode {
	return s.GetToken(CPP14ParserDoublecolon, 0)
}

func (s *AttributeContext) AttributeArgumentClause() IAttributeArgumentClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributeArgumentClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributeArgumentClauseContext)
}

func (s *AttributeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AttributeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AttributeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitAttribute(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) Attribute() (localctx IAttributeContext) {
	localctx = NewAttributeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 212, CPP14ParserRULE_attribute)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1347)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 160, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1344)
			p.AttributeNamespace()
		}
		{
			p.SetState(1345)
			p.Match(CPP14ParserDoublecolon)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(1349)
		p.Match(CPP14ParserIdentifier)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1351)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserLeftParen {
		{
			p.SetState(1350)
			p.AttributeArgumentClause()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAttributeNamespaceContext is an interface to support dynamic dispatch.
type IAttributeNamespaceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() antlr.TerminalNode

	// IsAttributeNamespaceContext differentiates from other interfaces.
	IsAttributeNamespaceContext()
}

type AttributeNamespaceContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAttributeNamespaceContext() *AttributeNamespaceContext {
	var p = new(AttributeNamespaceContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_attributeNamespace
	return p
}

func InitEmptyAttributeNamespaceContext(p *AttributeNamespaceContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_attributeNamespace
}

func (*AttributeNamespaceContext) IsAttributeNamespaceContext() {}

func NewAttributeNamespaceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AttributeNamespaceContext {
	var p = new(AttributeNamespaceContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_attributeNamespace

	return p
}

func (s *AttributeNamespaceContext) GetParser() antlr.Parser { return s.parser }

func (s *AttributeNamespaceContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *AttributeNamespaceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AttributeNamespaceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AttributeNamespaceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitAttributeNamespace(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) AttributeNamespace() (localctx IAttributeNamespaceContext) {
	localctx = NewAttributeNamespaceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 214, CPP14ParserRULE_attributeNamespace)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1353)
		p.Match(CPP14ParserIdentifier)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAttributeArgumentClauseContext is an interface to support dynamic dispatch.
type IAttributeArgumentClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LeftParen() antlr.TerminalNode
	RightParen() antlr.TerminalNode
	BalancedTokenSeq() IBalancedTokenSeqContext

	// IsAttributeArgumentClauseContext differentiates from other interfaces.
	IsAttributeArgumentClauseContext()
}

type AttributeArgumentClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAttributeArgumentClauseContext() *AttributeArgumentClauseContext {
	var p = new(AttributeArgumentClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_attributeArgumentClause
	return p
}

func InitEmptyAttributeArgumentClauseContext(p *AttributeArgumentClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_attributeArgumentClause
}

func (*AttributeArgumentClauseContext) IsAttributeArgumentClauseContext() {}

func NewAttributeArgumentClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AttributeArgumentClauseContext {
	var p = new(AttributeArgumentClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_attributeArgumentClause

	return p
}

func (s *AttributeArgumentClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *AttributeArgumentClauseContext) LeftParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, 0)
}

func (s *AttributeArgumentClauseContext) RightParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, 0)
}

func (s *AttributeArgumentClauseContext) BalancedTokenSeq() IBalancedTokenSeqContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBalancedTokenSeqContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBalancedTokenSeqContext)
}

func (s *AttributeArgumentClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AttributeArgumentClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AttributeArgumentClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitAttributeArgumentClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) AttributeArgumentClause() (localctx IAttributeArgumentClauseContext) {
	localctx = NewAttributeArgumentClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 216, CPP14ParserRULE_attributeArgumentClause)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1355)
		p.Match(CPP14ParserLeftParen)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1357)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-2) != 0) || ((int64((_la-64)) & ^0x3f) == 0 && ((int64(1)<<(_la-64))&-88080385) != 0) || ((int64((_la-128)) & ^0x3f) == 0 && ((int64(1)<<(_la-128))&262143) != 0) {
		{
			p.SetState(1356)
			p.BalancedTokenSeq()
		}

	}
	{
		p.SetState(1359)
		p.Match(CPP14ParserRightParen)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBalancedTokenSeqContext is an interface to support dynamic dispatch.
type IBalancedTokenSeqContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllBalancedtoken() []IBalancedtokenContext
	Balancedtoken(i int) IBalancedtokenContext

	// IsBalancedTokenSeqContext differentiates from other interfaces.
	IsBalancedTokenSeqContext()
}

type BalancedTokenSeqContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBalancedTokenSeqContext() *BalancedTokenSeqContext {
	var p = new(BalancedTokenSeqContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_balancedTokenSeq
	return p
}

func InitEmptyBalancedTokenSeqContext(p *BalancedTokenSeqContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_balancedTokenSeq
}

func (*BalancedTokenSeqContext) IsBalancedTokenSeqContext() {}

func NewBalancedTokenSeqContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BalancedTokenSeqContext {
	var p = new(BalancedTokenSeqContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_balancedTokenSeq

	return p
}

func (s *BalancedTokenSeqContext) GetParser() antlr.Parser { return s.parser }

func (s *BalancedTokenSeqContext) AllBalancedtoken() []IBalancedtokenContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IBalancedtokenContext); ok {
			len++
		}
	}

	tst := make([]IBalancedtokenContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IBalancedtokenContext); ok {
			tst[i] = t.(IBalancedtokenContext)
			i++
		}
	}

	return tst
}

func (s *BalancedTokenSeqContext) Balancedtoken(i int) IBalancedtokenContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBalancedtokenContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBalancedtokenContext)
}

func (s *BalancedTokenSeqContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BalancedTokenSeqContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BalancedTokenSeqContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitBalancedTokenSeq(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) BalancedTokenSeq() (localctx IBalancedTokenSeqContext) {
	localctx = NewBalancedTokenSeqContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 218, CPP14ParserRULE_balancedTokenSeq)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1362)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-2) != 0) || ((int64((_la-64)) & ^0x3f) == 0 && ((int64(1)<<(_la-64))&-88080385) != 0) || ((int64((_la-128)) & ^0x3f) == 0 && ((int64(1)<<(_la-128))&262143) != 0) {
		{
			p.SetState(1361)
			p.Balancedtoken()
		}

		p.SetState(1364)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBalancedtokenContext is an interface to support dynamic dispatch.
type IBalancedtokenContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllLeftParen() []antlr.TerminalNode
	LeftParen(i int) antlr.TerminalNode
	BalancedTokenSeq() IBalancedTokenSeqContext
	AllRightParen() []antlr.TerminalNode
	RightParen(i int) antlr.TerminalNode
	AllLeftBracket() []antlr.TerminalNode
	LeftBracket(i int) antlr.TerminalNode
	AllRightBracket() []antlr.TerminalNode
	RightBracket(i int) antlr.TerminalNode
	AllLeftBrace() []antlr.TerminalNode
	LeftBrace(i int) antlr.TerminalNode
	AllRightBrace() []antlr.TerminalNode
	RightBrace(i int) antlr.TerminalNode

	// IsBalancedtokenContext differentiates from other interfaces.
	IsBalancedtokenContext()
}

type BalancedtokenContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBalancedtokenContext() *BalancedtokenContext {
	var p = new(BalancedtokenContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_balancedtoken
	return p
}

func InitEmptyBalancedtokenContext(p *BalancedtokenContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_balancedtoken
}

func (*BalancedtokenContext) IsBalancedtokenContext() {}

func NewBalancedtokenContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BalancedtokenContext {
	var p = new(BalancedtokenContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_balancedtoken

	return p
}

func (s *BalancedtokenContext) GetParser() antlr.Parser { return s.parser }

func (s *BalancedtokenContext) AllLeftParen() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserLeftParen)
}

func (s *BalancedtokenContext) LeftParen(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, i)
}

func (s *BalancedtokenContext) BalancedTokenSeq() IBalancedTokenSeqContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBalancedTokenSeqContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBalancedTokenSeqContext)
}

func (s *BalancedtokenContext) AllRightParen() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserRightParen)
}

func (s *BalancedtokenContext) RightParen(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, i)
}

func (s *BalancedtokenContext) AllLeftBracket() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserLeftBracket)
}

func (s *BalancedtokenContext) LeftBracket(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftBracket, i)
}

func (s *BalancedtokenContext) AllRightBracket() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserRightBracket)
}

func (s *BalancedtokenContext) RightBracket(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightBracket, i)
}

func (s *BalancedtokenContext) AllLeftBrace() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserLeftBrace)
}

func (s *BalancedtokenContext) LeftBrace(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftBrace, i)
}

func (s *BalancedtokenContext) AllRightBrace() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserRightBrace)
}

func (s *BalancedtokenContext) RightBrace(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightBrace, i)
}

func (s *BalancedtokenContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BalancedtokenContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BalancedtokenContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitBalancedtoken(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) Balancedtoken() (localctx IBalancedtokenContext) {
	localctx = NewBalancedtokenContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 220, CPP14ParserRULE_balancedtoken)
	var _la int

	var _alt int

	p.SetState(1383)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserLeftParen:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1366)
			p.Match(CPP14ParserLeftParen)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1367)
			p.BalancedTokenSeq()
		}
		{
			p.SetState(1368)
			p.Match(CPP14ParserRightParen)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case CPP14ParserLeftBracket:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1370)
			p.Match(CPP14ParserLeftBracket)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1371)
			p.BalancedTokenSeq()
		}
		{
			p.SetState(1372)
			p.Match(CPP14ParserRightBracket)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case CPP14ParserLeftBrace:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1374)
			p.Match(CPP14ParserLeftBrace)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1375)
			p.BalancedTokenSeq()
		}
		{
			p.SetState(1376)
			p.Match(CPP14ParserRightBrace)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case CPP14ParserIntegerLiteral, CPP14ParserCharacterLiteral, CPP14ParserFloatingLiteral, CPP14ParserStringLiteral, CPP14ParserBooleanLiteral, CPP14ParserPointerLiteral, CPP14ParserUserDefinedLiteral, CPP14ParserMultiLineMacro, CPP14ParserDirective, CPP14ParserAlignas, CPP14ParserAlignof, CPP14ParserAsm, CPP14ParserAuto, CPP14ParserBool, CPP14ParserBreak, CPP14ParserCase, CPP14ParserCatch, CPP14ParserChar, CPP14ParserChar16, CPP14ParserChar32, CPP14ParserClass, CPP14ParserConst, CPP14ParserConstexpr, CPP14ParserConst_cast, CPP14ParserContinue, CPP14ParserDecltype, CPP14ParserDefault, CPP14ParserDelete, CPP14ParserDo, CPP14ParserDouble, CPP14ParserDynamic_cast, CPP14ParserElse, CPP14ParserEnum, CPP14ParserExplicit, CPP14ParserExport, CPP14ParserExtern, CPP14ParserFalse_, CPP14ParserFinal, CPP14ParserFloat, CPP14ParserFor, CPP14ParserFriend, CPP14ParserGoto, CPP14ParserIf, CPP14ParserInline, CPP14ParserInt, CPP14ParserLong, CPP14ParserMutable, CPP14ParserNamespace, CPP14ParserNew, CPP14ParserNoexcept, CPP14ParserNullptr, CPP14ParserOperator, CPP14ParserOverride, CPP14ParserPrivate, CPP14ParserProtected, CPP14ParserPublic, CPP14ParserRegister, CPP14ParserReinterpret_cast, CPP14ParserReturn, CPP14ParserShort, CPP14ParserSigned, CPP14ParserSizeof, CPP14ParserStatic, CPP14ParserStatic_assert, CPP14ParserStatic_cast, CPP14ParserStruct, CPP14ParserSwitch, CPP14ParserTemplate, CPP14ParserThis, CPP14ParserThread_local, CPP14ParserThrow, CPP14ParserTrue_, CPP14ParserTry, CPP14ParserTypedef, CPP14ParserTypeid_, CPP14ParserTypename_, CPP14ParserUnion, CPP14ParserUnsigned, CPP14ParserUsing, CPP14ParserVirtual, CPP14ParserVoid, CPP14ParserVolatile, CPP14ParserWchar, CPP14ParserWhile, CPP14ParserPlus, CPP14ParserMinus, CPP14ParserStar, CPP14ParserDiv, CPP14ParserMod, CPP14ParserCaret, CPP14ParserAnd, CPP14ParserOr, CPP14ParserTilde, CPP14ParserNot, CPP14ParserAssign, CPP14ParserLess, CPP14ParserGreater, CPP14ParserPlusAssign, CPP14ParserMinusAssign, CPP14ParserStarAssign, CPP14ParserDivAssign, CPP14ParserModAssign, CPP14ParserXorAssign, CPP14ParserAndAssign, CPP14ParserOrAssign, CPP14ParserLeftShiftAssign, CPP14ParserRightShiftAssign, CPP14ParserEqual, CPP14ParserNotEqual, CPP14ParserLessEqual, CPP14ParserGreaterEqual, CPP14ParserAndAnd, CPP14ParserOrOr, CPP14ParserPlusPlus, CPP14ParserMinusMinus, CPP14ParserComma, CPP14ParserArrowStar, CPP14ParserArrow, CPP14ParserQuestion, CPP14ParserColon, CPP14ParserDoublecolon, CPP14ParserSemi, CPP14ParserDot, CPP14ParserDotStar, CPP14ParserEllipsis, CPP14ParserIdentifier, CPP14ParserDecimalLiteral, CPP14ParserOctalLiteral, CPP14ParserHexadecimalLiteral, CPP14ParserBinaryLiteral, CPP14ParserIntegersuffix, CPP14ParserUserDefinedIntegerLiteral, CPP14ParserUserDefinedFloatingLiteral, CPP14ParserUserDefinedStringLiteral, CPP14ParserUserDefinedCharacterLiteral, CPP14ParserWhitespace, CPP14ParserNewline, CPP14ParserBlockComment, CPP14ParserLineComment:
		p.EnterOuterAlt(localctx, 4)
		p.SetState(1379)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				{
					p.SetState(1378)
					_la = p.GetTokenStream().LA(1)

					if _la <= 0 || ((int64((_la-85)) & ^0x3f) == 0 && ((int64(1)<<(_la-85))&63) != 0) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}

			default:
				p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
				goto errorExit
			}

			p.SetState(1381)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 164, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IInitDeclaratorListContext is an interface to support dynamic dispatch.
type IInitDeclaratorListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllInitDeclarator() []IInitDeclaratorContext
	InitDeclarator(i int) IInitDeclaratorContext
	AllComma() []antlr.TerminalNode
	Comma(i int) antlr.TerminalNode

	// IsInitDeclaratorListContext differentiates from other interfaces.
	IsInitDeclaratorListContext()
}

type InitDeclaratorListContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInitDeclaratorListContext() *InitDeclaratorListContext {
	var p = new(InitDeclaratorListContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_initDeclaratorList
	return p
}

func InitEmptyInitDeclaratorListContext(p *InitDeclaratorListContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_initDeclaratorList
}

func (*InitDeclaratorListContext) IsInitDeclaratorListContext() {}

func NewInitDeclaratorListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InitDeclaratorListContext {
	var p = new(InitDeclaratorListContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_initDeclaratorList

	return p
}

func (s *InitDeclaratorListContext) GetParser() antlr.Parser { return s.parser }

func (s *InitDeclaratorListContext) AllInitDeclarator() []IInitDeclaratorContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IInitDeclaratorContext); ok {
			len++
		}
	}

	tst := make([]IInitDeclaratorContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IInitDeclaratorContext); ok {
			tst[i] = t.(IInitDeclaratorContext)
			i++
		}
	}

	return tst
}

func (s *InitDeclaratorListContext) InitDeclarator(i int) IInitDeclaratorContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInitDeclaratorContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInitDeclaratorContext)
}

func (s *InitDeclaratorListContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserComma)
}

func (s *InitDeclaratorListContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserComma, i)
}

func (s *InitDeclaratorListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InitDeclaratorListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InitDeclaratorListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitInitDeclaratorList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) InitDeclaratorList() (localctx IInitDeclaratorListContext) {
	localctx = NewInitDeclaratorListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 222, CPP14ParserRULE_initDeclaratorList)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1385)
		p.InitDeclarator()
	}
	p.SetState(1390)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == CPP14ParserComma {
		{
			p.SetState(1386)
			p.Match(CPP14ParserComma)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1387)
			p.InitDeclarator()
		}

		p.SetState(1392)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IInitDeclaratorContext is an interface to support dynamic dispatch.
type IInitDeclaratorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Declarator() IDeclaratorContext
	Initializer() IInitializerContext

	// IsInitDeclaratorContext differentiates from other interfaces.
	IsInitDeclaratorContext()
}

type InitDeclaratorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInitDeclaratorContext() *InitDeclaratorContext {
	var p = new(InitDeclaratorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_initDeclarator
	return p
}

func InitEmptyInitDeclaratorContext(p *InitDeclaratorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_initDeclarator
}

func (*InitDeclaratorContext) IsInitDeclaratorContext() {}

func NewInitDeclaratorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InitDeclaratorContext {
	var p = new(InitDeclaratorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_initDeclarator

	return p
}

func (s *InitDeclaratorContext) GetParser() antlr.Parser { return s.parser }

func (s *InitDeclaratorContext) Declarator() IDeclaratorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDeclaratorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDeclaratorContext)
}

func (s *InitDeclaratorContext) Initializer() IInitializerContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInitializerContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInitializerContext)
}

func (s *InitDeclaratorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InitDeclaratorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InitDeclaratorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitInitDeclarator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) InitDeclarator() (localctx IInitDeclaratorContext) {
	localctx = NewInitDeclaratorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 224, CPP14ParserRULE_initDeclarator)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1393)
		p.Declarator()
	}
	p.SetState(1395)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if (int64((_la-85)) & ^0x3f) == 0 && ((int64(1)<<(_la-85))&65553) != 0 {
		{
			p.SetState(1394)
			p.Initializer()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDeclaratorContext is an interface to support dynamic dispatch.
type IDeclaratorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	PointerDeclarator() IPointerDeclaratorContext
	NoPointerDeclarator() INoPointerDeclaratorContext
	ParametersAndQualifiers() IParametersAndQualifiersContext
	TrailingReturnType() ITrailingReturnTypeContext

	// IsDeclaratorContext differentiates from other interfaces.
	IsDeclaratorContext()
}

type DeclaratorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclaratorContext() *DeclaratorContext {
	var p = new(DeclaratorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_declarator
	return p
}

func InitEmptyDeclaratorContext(p *DeclaratorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_declarator
}

func (*DeclaratorContext) IsDeclaratorContext() {}

func NewDeclaratorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclaratorContext {
	var p = new(DeclaratorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_declarator

	return p
}

func (s *DeclaratorContext) GetParser() antlr.Parser { return s.parser }

func (s *DeclaratorContext) PointerDeclarator() IPointerDeclaratorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPointerDeclaratorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPointerDeclaratorContext)
}

func (s *DeclaratorContext) NoPointerDeclarator() INoPointerDeclaratorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INoPointerDeclaratorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INoPointerDeclaratorContext)
}

func (s *DeclaratorContext) ParametersAndQualifiers() IParametersAndQualifiersContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParametersAndQualifiersContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParametersAndQualifiersContext)
}

func (s *DeclaratorContext) TrailingReturnType() ITrailingReturnTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITrailingReturnTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITrailingReturnTypeContext)
}

func (s *DeclaratorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclaratorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeclaratorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitDeclarator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) Declarator() (localctx IDeclaratorContext) {
	localctx = NewDeclaratorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 226, CPP14ParserRULE_declarator)
	p.SetState(1402)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 168, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1397)
			p.PointerDeclarator()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1398)
			p.noPointerDeclarator(0)
		}
		{
			p.SetState(1399)
			p.ParametersAndQualifiers()
		}
		{
			p.SetState(1400)
			p.TrailingReturnType()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPointerDeclaratorContext is an interface to support dynamic dispatch.
type IPointerDeclaratorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	NoPointerDeclarator() INoPointerDeclaratorContext
	AllPointerOperator() []IPointerOperatorContext
	PointerOperator(i int) IPointerOperatorContext
	AllConst() []antlr.TerminalNode
	Const(i int) antlr.TerminalNode

	// IsPointerDeclaratorContext differentiates from other interfaces.
	IsPointerDeclaratorContext()
}

type PointerDeclaratorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPointerDeclaratorContext() *PointerDeclaratorContext {
	var p = new(PointerDeclaratorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_pointerDeclarator
	return p
}

func InitEmptyPointerDeclaratorContext(p *PointerDeclaratorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_pointerDeclarator
}

func (*PointerDeclaratorContext) IsPointerDeclaratorContext() {}

func NewPointerDeclaratorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PointerDeclaratorContext {
	var p = new(PointerDeclaratorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_pointerDeclarator

	return p
}

func (s *PointerDeclaratorContext) GetParser() antlr.Parser { return s.parser }

func (s *PointerDeclaratorContext) NoPointerDeclarator() INoPointerDeclaratorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INoPointerDeclaratorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INoPointerDeclaratorContext)
}

func (s *PointerDeclaratorContext) AllPointerOperator() []IPointerOperatorContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IPointerOperatorContext); ok {
			len++
		}
	}

	tst := make([]IPointerOperatorContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IPointerOperatorContext); ok {
			tst[i] = t.(IPointerOperatorContext)
			i++
		}
	}

	return tst
}

func (s *PointerDeclaratorContext) PointerOperator(i int) IPointerOperatorContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPointerOperatorContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPointerOperatorContext)
}

func (s *PointerDeclaratorContext) AllConst() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserConst)
}

func (s *PointerDeclaratorContext) Const(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserConst, i)
}

func (s *PointerDeclaratorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PointerDeclaratorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PointerDeclaratorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitPointerDeclarator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) PointerDeclarator() (localctx IPointerDeclaratorContext) {
	localctx = NewPointerDeclaratorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 228, CPP14ParserRULE_pointerDeclarator)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1410)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 170, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1404)
				p.PointerOperator()
			}
			p.SetState(1406)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == CPP14ParserConst {
				{
					p.SetState(1405)
					p.Match(CPP14ParserConst)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}

		}
		p.SetState(1412)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 170, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	{
		p.SetState(1413)
		p.noPointerDeclarator(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INoPointerDeclaratorContext is an interface to support dynamic dispatch.
type INoPointerDeclaratorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Declaratorid() IDeclaratoridContext
	AttributeSpecifierSeq() IAttributeSpecifierSeqContext
	LeftParen() antlr.TerminalNode
	PointerDeclarator() IPointerDeclaratorContext
	RightParen() antlr.TerminalNode
	NoPointerDeclarator() INoPointerDeclaratorContext
	ParametersAndQualifiers() IParametersAndQualifiersContext
	LeftBracket() antlr.TerminalNode
	RightBracket() antlr.TerminalNode
	ConstantExpression() IConstantExpressionContext

	// IsNoPointerDeclaratorContext differentiates from other interfaces.
	IsNoPointerDeclaratorContext()
}

type NoPointerDeclaratorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNoPointerDeclaratorContext() *NoPointerDeclaratorContext {
	var p = new(NoPointerDeclaratorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_noPointerDeclarator
	return p
}

func InitEmptyNoPointerDeclaratorContext(p *NoPointerDeclaratorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_noPointerDeclarator
}

func (*NoPointerDeclaratorContext) IsNoPointerDeclaratorContext() {}

func NewNoPointerDeclaratorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NoPointerDeclaratorContext {
	var p = new(NoPointerDeclaratorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_noPointerDeclarator

	return p
}

func (s *NoPointerDeclaratorContext) GetParser() antlr.Parser { return s.parser }

func (s *NoPointerDeclaratorContext) Declaratorid() IDeclaratoridContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDeclaratoridContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDeclaratoridContext)
}

func (s *NoPointerDeclaratorContext) AttributeSpecifierSeq() IAttributeSpecifierSeqContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributeSpecifierSeqContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributeSpecifierSeqContext)
}

func (s *NoPointerDeclaratorContext) LeftParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, 0)
}

func (s *NoPointerDeclaratorContext) PointerDeclarator() IPointerDeclaratorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPointerDeclaratorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPointerDeclaratorContext)
}

func (s *NoPointerDeclaratorContext) RightParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, 0)
}

func (s *NoPointerDeclaratorContext) NoPointerDeclarator() INoPointerDeclaratorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INoPointerDeclaratorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INoPointerDeclaratorContext)
}

func (s *NoPointerDeclaratorContext) ParametersAndQualifiers() IParametersAndQualifiersContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParametersAndQualifiersContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParametersAndQualifiersContext)
}

func (s *NoPointerDeclaratorContext) LeftBracket() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftBracket, 0)
}

func (s *NoPointerDeclaratorContext) RightBracket() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightBracket, 0)
}

func (s *NoPointerDeclaratorContext) ConstantExpression() IConstantExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConstantExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConstantExpressionContext)
}

func (s *NoPointerDeclaratorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NoPointerDeclaratorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NoPointerDeclaratorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitNoPointerDeclarator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) NoPointerDeclarator() (localctx INoPointerDeclaratorContext) {
	return p.noPointerDeclarator(0)
}

func (p *CPP14Parser) noPointerDeclarator(_p int) (localctx INoPointerDeclaratorContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewNoPointerDeclaratorContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx INoPointerDeclaratorContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 230
	p.EnterRecursionRule(localctx, 230, CPP14ParserRULE_noPointerDeclarator, _p)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1424)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserDecltype, CPP14ParserOperator, CPP14ParserTilde, CPP14ParserDoublecolon, CPP14ParserEllipsis, CPP14ParserIdentifier:
		{
			p.SetState(1416)
			p.Declaratorid()
		}
		p.SetState(1418)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 171, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1417)
				p.AttributeSpecifierSeq()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case CPP14ParserLeftParen:
		{
			p.SetState(1420)
			p.Match(CPP14ParserLeftParen)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1421)
			p.PointerDeclarator()
		}
		{
			p.SetState(1422)
			p.Match(CPP14ParserRightParen)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1440)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 176, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewNoPointerDeclaratorContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, CPP14ParserRULE_noPointerDeclarator)
			p.SetState(1426)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				goto errorExit
			}
			p.SetState(1436)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetTokenStream().LA(1) {
			case CPP14ParserLeftParen:
				{
					p.SetState(1427)
					p.ParametersAndQualifiers()
				}

			case CPP14ParserLeftBracket:
				{
					p.SetState(1428)
					p.Match(CPP14ParserLeftBracket)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				p.SetState(1430)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)

				if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&8364979464334764286) != 0) || ((int64((_la-65)) & ^0x3f) == 0 && ((int64(1)<<(_la-65))&4719772474384133137) != 0) || _la == CPP14ParserIdentifier {
					{
						p.SetState(1429)
						p.ConstantExpression()
					}

				}
				{
					p.SetState(1432)
					p.Match(CPP14ParserRightBracket)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				p.SetState(1434)
				p.GetErrorHandler().Sync(p)

				if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 174, p.GetParserRuleContext()) == 1 {
					{
						p.SetState(1433)
						p.AttributeSpecifierSeq()
					}

				} else if p.HasError() { // JIM
					goto errorExit
				}

			default:
				p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
				goto errorExit
			}

		}
		p.SetState(1442)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 176, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IParametersAndQualifiersContext is an interface to support dynamic dispatch.
type IParametersAndQualifiersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LeftParen() antlr.TerminalNode
	RightParen() antlr.TerminalNode
	ParameterDeclarationClause() IParameterDeclarationClauseContext
	Cvqualifierseq() ICvqualifierseqContext
	Refqualifier() IRefqualifierContext
	ExceptionSpecification() IExceptionSpecificationContext
	AttributeSpecifierSeq() IAttributeSpecifierSeqContext

	// IsParametersAndQualifiersContext differentiates from other interfaces.
	IsParametersAndQualifiersContext()
}

type ParametersAndQualifiersContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParametersAndQualifiersContext() *ParametersAndQualifiersContext {
	var p = new(ParametersAndQualifiersContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_parametersAndQualifiers
	return p
}

func InitEmptyParametersAndQualifiersContext(p *ParametersAndQualifiersContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_parametersAndQualifiers
}

func (*ParametersAndQualifiersContext) IsParametersAndQualifiersContext() {}

func NewParametersAndQualifiersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParametersAndQualifiersContext {
	var p = new(ParametersAndQualifiersContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_parametersAndQualifiers

	return p
}

func (s *ParametersAndQualifiersContext) GetParser() antlr.Parser { return s.parser }

func (s *ParametersAndQualifiersContext) LeftParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, 0)
}

func (s *ParametersAndQualifiersContext) RightParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, 0)
}

func (s *ParametersAndQualifiersContext) ParameterDeclarationClause() IParameterDeclarationClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParameterDeclarationClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParameterDeclarationClauseContext)
}

func (s *ParametersAndQualifiersContext) Cvqualifierseq() ICvqualifierseqContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICvqualifierseqContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICvqualifierseqContext)
}

func (s *ParametersAndQualifiersContext) Refqualifier() IRefqualifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRefqualifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRefqualifierContext)
}

func (s *ParametersAndQualifiersContext) ExceptionSpecification() IExceptionSpecificationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExceptionSpecificationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExceptionSpecificationContext)
}

func (s *ParametersAndQualifiersContext) AttributeSpecifierSeq() IAttributeSpecifierSeqContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributeSpecifierSeqContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributeSpecifierSeqContext)
}

func (s *ParametersAndQualifiersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParametersAndQualifiersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ParametersAndQualifiersContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitParametersAndQualifiers(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) ParametersAndQualifiers() (localctx IParametersAndQualifiersContext) {
	localctx = NewParametersAndQualifiersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 232, CPP14ParserRULE_parametersAndQualifiers)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1443)
		p.Match(CPP14ParserLeftParen)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1445)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64((_la-10)) & ^0x3f) == 0 && ((int64(1)<<(_la-10))&1237504995584196377) != 0) || ((int64((_la-74)) & ^0x3f) == 0 && ((int64(1)<<(_la-74))&297237575406461917) != 0) {
		{
			p.SetState(1444)
			p.ParameterDeclarationClause()
		}

	}
	{
		p.SetState(1447)
		p.Match(CPP14ParserRightParen)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1449)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 178, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1448)
			p.Cvqualifierseq()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(1452)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 179, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1451)
			p.Refqualifier()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(1455)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 180, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1454)
			p.ExceptionSpecification()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(1458)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 181, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1457)
			p.AttributeSpecifierSeq()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITrailingReturnTypeContext is an interface to support dynamic dispatch.
type ITrailingReturnTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Arrow() antlr.TerminalNode
	TrailingTypeSpecifierSeq() ITrailingTypeSpecifierSeqContext
	AbstractDeclarator() IAbstractDeclaratorContext

	// IsTrailingReturnTypeContext differentiates from other interfaces.
	IsTrailingReturnTypeContext()
}

type TrailingReturnTypeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTrailingReturnTypeContext() *TrailingReturnTypeContext {
	var p = new(TrailingReturnTypeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_trailingReturnType
	return p
}

func InitEmptyTrailingReturnTypeContext(p *TrailingReturnTypeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_trailingReturnType
}

func (*TrailingReturnTypeContext) IsTrailingReturnTypeContext() {}

func NewTrailingReturnTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TrailingReturnTypeContext {
	var p = new(TrailingReturnTypeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_trailingReturnType

	return p
}

func (s *TrailingReturnTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *TrailingReturnTypeContext) Arrow() antlr.TerminalNode {
	return s.GetToken(CPP14ParserArrow, 0)
}

func (s *TrailingReturnTypeContext) TrailingTypeSpecifierSeq() ITrailingTypeSpecifierSeqContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITrailingTypeSpecifierSeqContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITrailingTypeSpecifierSeqContext)
}

func (s *TrailingReturnTypeContext) AbstractDeclarator() IAbstractDeclaratorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAbstractDeclaratorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAbstractDeclaratorContext)
}

func (s *TrailingReturnTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TrailingReturnTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TrailingReturnTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitTrailingReturnType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) TrailingReturnType() (localctx ITrailingReturnTypeContext) {
	localctx = NewTrailingReturnTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 234, CPP14ParserRULE_trailingReturnType)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1460)
		p.Match(CPP14ParserArrow)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1461)
		p.TrailingTypeSpecifierSeq()
	}
	p.SetState(1463)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 182, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1462)
			p.AbstractDeclarator()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPointerOperatorContext is an interface to support dynamic dispatch.
type IPointerOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	And() antlr.TerminalNode
	AndAnd() antlr.TerminalNode
	AttributeSpecifierSeq() IAttributeSpecifierSeqContext
	Star() antlr.TerminalNode
	NestedNameSpecifier() INestedNameSpecifierContext
	Cvqualifierseq() ICvqualifierseqContext

	// IsPointerOperatorContext differentiates from other interfaces.
	IsPointerOperatorContext()
}

type PointerOperatorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPointerOperatorContext() *PointerOperatorContext {
	var p = new(PointerOperatorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_pointerOperator
	return p
}

func InitEmptyPointerOperatorContext(p *PointerOperatorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_pointerOperator
}

func (*PointerOperatorContext) IsPointerOperatorContext() {}

func NewPointerOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PointerOperatorContext {
	var p = new(PointerOperatorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_pointerOperator

	return p
}

func (s *PointerOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *PointerOperatorContext) And() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAnd, 0)
}

func (s *PointerOperatorContext) AndAnd() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAndAnd, 0)
}

func (s *PointerOperatorContext) AttributeSpecifierSeq() IAttributeSpecifierSeqContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributeSpecifierSeqContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributeSpecifierSeqContext)
}

func (s *PointerOperatorContext) Star() antlr.TerminalNode {
	return s.GetToken(CPP14ParserStar, 0)
}

func (s *PointerOperatorContext) NestedNameSpecifier() INestedNameSpecifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INestedNameSpecifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INestedNameSpecifierContext)
}

func (s *PointerOperatorContext) Cvqualifierseq() ICvqualifierseqContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICvqualifierseqContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICvqualifierseqContext)
}

func (s *PointerOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PointerOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PointerOperatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitPointerOperator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) PointerOperator() (localctx IPointerOperatorContext) {
	localctx = NewPointerOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 236, CPP14ParserRULE_pointerOperator)
	var _la int

	p.SetState(1479)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserAnd, CPP14ParserAndAnd:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1465)
			_la = p.GetTokenStream().LA(1)

			if !(_la == CPP14ParserAnd || _la == CPP14ParserAndAnd) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(1467)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 183, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1466)
				p.AttributeSpecifierSeq()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case CPP14ParserDecltype, CPP14ParserStar, CPP14ParserDoublecolon, CPP14ParserIdentifier:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(1470)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == CPP14ParserDecltype || _la == CPP14ParserDoublecolon || _la == CPP14ParserIdentifier {
			{
				p.SetState(1469)
				p.nestedNameSpecifier(0)
			}

		}
		{
			p.SetState(1472)
			p.Match(CPP14ParserStar)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1474)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 185, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1473)
				p.AttributeSpecifierSeq()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(1477)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 186, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1476)
				p.Cvqualifierseq()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICvqualifierseqContext is an interface to support dynamic dispatch.
type ICvqualifierseqContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllCvQualifier() []ICvQualifierContext
	CvQualifier(i int) ICvQualifierContext

	// IsCvqualifierseqContext differentiates from other interfaces.
	IsCvqualifierseqContext()
}

type CvqualifierseqContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCvqualifierseqContext() *CvqualifierseqContext {
	var p = new(CvqualifierseqContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_cvqualifierseq
	return p
}

func InitEmptyCvqualifierseqContext(p *CvqualifierseqContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_cvqualifierseq
}

func (*CvqualifierseqContext) IsCvqualifierseqContext() {}

func NewCvqualifierseqContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CvqualifierseqContext {
	var p = new(CvqualifierseqContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_cvqualifierseq

	return p
}

func (s *CvqualifierseqContext) GetParser() antlr.Parser { return s.parser }

func (s *CvqualifierseqContext) AllCvQualifier() []ICvQualifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ICvQualifierContext); ok {
			len++
		}
	}

	tst := make([]ICvQualifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ICvQualifierContext); ok {
			tst[i] = t.(ICvQualifierContext)
			i++
		}
	}

	return tst
}

func (s *CvqualifierseqContext) CvQualifier(i int) ICvQualifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICvQualifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICvQualifierContext)
}

func (s *CvqualifierseqContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CvqualifierseqContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CvqualifierseqContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitCvqualifierseq(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) Cvqualifierseq() (localctx ICvqualifierseqContext) {
	localctx = NewCvqualifierseqContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 238, CPP14ParserRULE_cvqualifierseq)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1482)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(1481)
				p.CvQualifier()
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}

		p.SetState(1484)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 188, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICvQualifierContext is an interface to support dynamic dispatch.
type ICvQualifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Const() antlr.TerminalNode
	Volatile() antlr.TerminalNode

	// IsCvQualifierContext differentiates from other interfaces.
	IsCvQualifierContext()
}

type CvQualifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCvQualifierContext() *CvQualifierContext {
	var p = new(CvQualifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_cvQualifier
	return p
}

func InitEmptyCvQualifierContext(p *CvQualifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_cvQualifier
}

func (*CvQualifierContext) IsCvQualifierContext() {}

func NewCvQualifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CvQualifierContext {
	var p = new(CvQualifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_cvQualifier

	return p
}

func (s *CvQualifierContext) GetParser() antlr.Parser { return s.parser }

func (s *CvQualifierContext) Const() antlr.TerminalNode {
	return s.GetToken(CPP14ParserConst, 0)
}

func (s *CvQualifierContext) Volatile() antlr.TerminalNode {
	return s.GetToken(CPP14ParserVolatile, 0)
}

func (s *CvQualifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CvQualifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CvQualifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitCvQualifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) CvQualifier() (localctx ICvQualifierContext) {
	localctx = NewCvQualifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 240, CPP14ParserRULE_cvQualifier)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1486)
		_la = p.GetTokenStream().LA(1)

		if !(_la == CPP14ParserConst || _la == CPP14ParserVolatile) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IRefqualifierContext is an interface to support dynamic dispatch.
type IRefqualifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	And() antlr.TerminalNode
	AndAnd() antlr.TerminalNode

	// IsRefqualifierContext differentiates from other interfaces.
	IsRefqualifierContext()
}

type RefqualifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRefqualifierContext() *RefqualifierContext {
	var p = new(RefqualifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_refqualifier
	return p
}

func InitEmptyRefqualifierContext(p *RefqualifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_refqualifier
}

func (*RefqualifierContext) IsRefqualifierContext() {}

func NewRefqualifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RefqualifierContext {
	var p = new(RefqualifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_refqualifier

	return p
}

func (s *RefqualifierContext) GetParser() antlr.Parser { return s.parser }

func (s *RefqualifierContext) And() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAnd, 0)
}

func (s *RefqualifierContext) AndAnd() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAndAnd, 0)
}

func (s *RefqualifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RefqualifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RefqualifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitRefqualifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) Refqualifier() (localctx IRefqualifierContext) {
	localctx = NewRefqualifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 242, CPP14ParserRULE_refqualifier)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1488)
		_la = p.GetTokenStream().LA(1)

		if !(_la == CPP14ParserAnd || _la == CPP14ParserAndAnd) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDeclaratoridContext is an interface to support dynamic dispatch.
type IDeclaratoridContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IdExpression() IIdExpressionContext
	Ellipsis() antlr.TerminalNode

	// IsDeclaratoridContext differentiates from other interfaces.
	IsDeclaratoridContext()
}

type DeclaratoridContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclaratoridContext() *DeclaratoridContext {
	var p = new(DeclaratoridContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_declaratorid
	return p
}

func InitEmptyDeclaratoridContext(p *DeclaratoridContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_declaratorid
}

func (*DeclaratoridContext) IsDeclaratoridContext() {}

func NewDeclaratoridContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclaratoridContext {
	var p = new(DeclaratoridContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_declaratorid

	return p
}

func (s *DeclaratoridContext) GetParser() antlr.Parser { return s.parser }

func (s *DeclaratoridContext) IdExpression() IIdExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdExpressionContext)
}

func (s *DeclaratoridContext) Ellipsis() antlr.TerminalNode {
	return s.GetToken(CPP14ParserEllipsis, 0)
}

func (s *DeclaratoridContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclaratoridContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeclaratoridContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitDeclaratorid(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) Declaratorid() (localctx IDeclaratoridContext) {
	localctx = NewDeclaratoridContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 244, CPP14ParserRULE_declaratorid)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1491)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserEllipsis {
		{
			p.SetState(1490)
			p.Match(CPP14ParserEllipsis)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(1493)
		p.IdExpression()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITheTypeIdContext is an interface to support dynamic dispatch.
type ITheTypeIdContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	TypeSpecifierSeq() ITypeSpecifierSeqContext
	AbstractDeclarator() IAbstractDeclaratorContext

	// IsTheTypeIdContext differentiates from other interfaces.
	IsTheTypeIdContext()
}

type TheTypeIdContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTheTypeIdContext() *TheTypeIdContext {
	var p = new(TheTypeIdContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_theTypeId
	return p
}

func InitEmptyTheTypeIdContext(p *TheTypeIdContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_theTypeId
}

func (*TheTypeIdContext) IsTheTypeIdContext() {}

func NewTheTypeIdContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TheTypeIdContext {
	var p = new(TheTypeIdContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_theTypeId

	return p
}

func (s *TheTypeIdContext) GetParser() antlr.Parser { return s.parser }

func (s *TheTypeIdContext) TypeSpecifierSeq() ITypeSpecifierSeqContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeSpecifierSeqContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeSpecifierSeqContext)
}

func (s *TheTypeIdContext) AbstractDeclarator() IAbstractDeclaratorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAbstractDeclaratorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAbstractDeclaratorContext)
}

func (s *TheTypeIdContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TheTypeIdContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TheTypeIdContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitTheTypeId(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) TheTypeId() (localctx ITheTypeIdContext) {
	localctx = NewTheTypeIdContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 246, CPP14ParserRULE_theTypeId)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1495)
		p.TypeSpecifierSeq()
	}
	p.SetState(1497)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 190, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1496)
			p.AbstractDeclarator()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAbstractDeclaratorContext is an interface to support dynamic dispatch.
type IAbstractDeclaratorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	PointerAbstractDeclarator() IPointerAbstractDeclaratorContext
	ParametersAndQualifiers() IParametersAndQualifiersContext
	TrailingReturnType() ITrailingReturnTypeContext
	NoPointerAbstractDeclarator() INoPointerAbstractDeclaratorContext
	AbstractPackDeclarator() IAbstractPackDeclaratorContext

	// IsAbstractDeclaratorContext differentiates from other interfaces.
	IsAbstractDeclaratorContext()
}

type AbstractDeclaratorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAbstractDeclaratorContext() *AbstractDeclaratorContext {
	var p = new(AbstractDeclaratorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_abstractDeclarator
	return p
}

func InitEmptyAbstractDeclaratorContext(p *AbstractDeclaratorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_abstractDeclarator
}

func (*AbstractDeclaratorContext) IsAbstractDeclaratorContext() {}

func NewAbstractDeclaratorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AbstractDeclaratorContext {
	var p = new(AbstractDeclaratorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_abstractDeclarator

	return p
}

func (s *AbstractDeclaratorContext) GetParser() antlr.Parser { return s.parser }

func (s *AbstractDeclaratorContext) PointerAbstractDeclarator() IPointerAbstractDeclaratorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPointerAbstractDeclaratorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPointerAbstractDeclaratorContext)
}

func (s *AbstractDeclaratorContext) ParametersAndQualifiers() IParametersAndQualifiersContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParametersAndQualifiersContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParametersAndQualifiersContext)
}

func (s *AbstractDeclaratorContext) TrailingReturnType() ITrailingReturnTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITrailingReturnTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITrailingReturnTypeContext)
}

func (s *AbstractDeclaratorContext) NoPointerAbstractDeclarator() INoPointerAbstractDeclaratorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INoPointerAbstractDeclaratorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INoPointerAbstractDeclaratorContext)
}

func (s *AbstractDeclaratorContext) AbstractPackDeclarator() IAbstractPackDeclaratorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAbstractPackDeclaratorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAbstractPackDeclaratorContext)
}

func (s *AbstractDeclaratorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AbstractDeclaratorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AbstractDeclaratorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitAbstractDeclarator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) AbstractDeclarator() (localctx IAbstractDeclaratorContext) {
	localctx = NewAbstractDeclaratorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 248, CPP14ParserRULE_abstractDeclarator)
	p.SetState(1507)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 192, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1499)
			p.PointerAbstractDeclarator()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(1501)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 191, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1500)
				p.noPointerAbstractDeclarator(0)
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		{
			p.SetState(1503)
			p.ParametersAndQualifiers()
		}
		{
			p.SetState(1504)
			p.TrailingReturnType()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1506)
			p.AbstractPackDeclarator()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPointerAbstractDeclaratorContext is an interface to support dynamic dispatch.
type IPointerAbstractDeclaratorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	NoPointerAbstractDeclarator() INoPointerAbstractDeclaratorContext
	AllPointerOperator() []IPointerOperatorContext
	PointerOperator(i int) IPointerOperatorContext

	// IsPointerAbstractDeclaratorContext differentiates from other interfaces.
	IsPointerAbstractDeclaratorContext()
}

type PointerAbstractDeclaratorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPointerAbstractDeclaratorContext() *PointerAbstractDeclaratorContext {
	var p = new(PointerAbstractDeclaratorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_pointerAbstractDeclarator
	return p
}

func InitEmptyPointerAbstractDeclaratorContext(p *PointerAbstractDeclaratorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_pointerAbstractDeclarator
}

func (*PointerAbstractDeclaratorContext) IsPointerAbstractDeclaratorContext() {}

func NewPointerAbstractDeclaratorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PointerAbstractDeclaratorContext {
	var p = new(PointerAbstractDeclaratorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_pointerAbstractDeclarator

	return p
}

func (s *PointerAbstractDeclaratorContext) GetParser() antlr.Parser { return s.parser }

func (s *PointerAbstractDeclaratorContext) NoPointerAbstractDeclarator() INoPointerAbstractDeclaratorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INoPointerAbstractDeclaratorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INoPointerAbstractDeclaratorContext)
}

func (s *PointerAbstractDeclaratorContext) AllPointerOperator() []IPointerOperatorContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IPointerOperatorContext); ok {
			len++
		}
	}

	tst := make([]IPointerOperatorContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IPointerOperatorContext); ok {
			tst[i] = t.(IPointerOperatorContext)
			i++
		}
	}

	return tst
}

func (s *PointerAbstractDeclaratorContext) PointerOperator(i int) IPointerOperatorContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPointerOperatorContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPointerOperatorContext)
}

func (s *PointerAbstractDeclaratorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PointerAbstractDeclaratorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PointerAbstractDeclaratorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitPointerAbstractDeclarator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) PointerAbstractDeclarator() (localctx IPointerAbstractDeclaratorContext) {
	localctx = NewPointerAbstractDeclaratorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 250, CPP14ParserRULE_pointerAbstractDeclarator)
	var _la int

	p.SetState(1518)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserLeftParen, CPP14ParserLeftBracket:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1509)
			p.noPointerAbstractDeclarator(0)
		}

	case CPP14ParserDecltype, CPP14ParserStar, CPP14ParserAnd, CPP14ParserAndAnd, CPP14ParserDoublecolon, CPP14ParserIdentifier:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(1511)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == CPP14ParserDecltype || ((int64((_la-93)) & ^0x3f) == 0 && ((int64(1)<<(_la-93))&566969237521) != 0) {
			{
				p.SetState(1510)
				p.PointerOperator()
			}

			p.SetState(1513)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(1516)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 194, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1515)
				p.noPointerAbstractDeclarator(0)
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INoPointerAbstractDeclaratorContext is an interface to support dynamic dispatch.
type INoPointerAbstractDeclaratorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ParametersAndQualifiers() IParametersAndQualifiersContext
	LeftBracket() antlr.TerminalNode
	RightBracket() antlr.TerminalNode
	ConstantExpression() IConstantExpressionContext
	AttributeSpecifierSeq() IAttributeSpecifierSeqContext
	LeftParen() antlr.TerminalNode
	PointerAbstractDeclarator() IPointerAbstractDeclaratorContext
	RightParen() antlr.TerminalNode
	AllNoPointerAbstractDeclarator() []INoPointerAbstractDeclaratorContext
	NoPointerAbstractDeclarator(i int) INoPointerAbstractDeclaratorContext

	// IsNoPointerAbstractDeclaratorContext differentiates from other interfaces.
	IsNoPointerAbstractDeclaratorContext()
}

type NoPointerAbstractDeclaratorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNoPointerAbstractDeclaratorContext() *NoPointerAbstractDeclaratorContext {
	var p = new(NoPointerAbstractDeclaratorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_noPointerAbstractDeclarator
	return p
}

func InitEmptyNoPointerAbstractDeclaratorContext(p *NoPointerAbstractDeclaratorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_noPointerAbstractDeclarator
}

func (*NoPointerAbstractDeclaratorContext) IsNoPointerAbstractDeclaratorContext() {}

func NewNoPointerAbstractDeclaratorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NoPointerAbstractDeclaratorContext {
	var p = new(NoPointerAbstractDeclaratorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_noPointerAbstractDeclarator

	return p
}

func (s *NoPointerAbstractDeclaratorContext) GetParser() antlr.Parser { return s.parser }

func (s *NoPointerAbstractDeclaratorContext) ParametersAndQualifiers() IParametersAndQualifiersContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParametersAndQualifiersContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParametersAndQualifiersContext)
}

func (s *NoPointerAbstractDeclaratorContext) LeftBracket() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftBracket, 0)
}

func (s *NoPointerAbstractDeclaratorContext) RightBracket() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightBracket, 0)
}

func (s *NoPointerAbstractDeclaratorContext) ConstantExpression() IConstantExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConstantExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConstantExpressionContext)
}

func (s *NoPointerAbstractDeclaratorContext) AttributeSpecifierSeq() IAttributeSpecifierSeqContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributeSpecifierSeqContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributeSpecifierSeqContext)
}

func (s *NoPointerAbstractDeclaratorContext) LeftParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, 0)
}

func (s *NoPointerAbstractDeclaratorContext) PointerAbstractDeclarator() IPointerAbstractDeclaratorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPointerAbstractDeclaratorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPointerAbstractDeclaratorContext)
}

func (s *NoPointerAbstractDeclaratorContext) RightParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, 0)
}

func (s *NoPointerAbstractDeclaratorContext) AllNoPointerAbstractDeclarator() []INoPointerAbstractDeclaratorContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INoPointerAbstractDeclaratorContext); ok {
			len++
		}
	}

	tst := make([]INoPointerAbstractDeclaratorContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INoPointerAbstractDeclaratorContext); ok {
			tst[i] = t.(INoPointerAbstractDeclaratorContext)
			i++
		}
	}

	return tst
}

func (s *NoPointerAbstractDeclaratorContext) NoPointerAbstractDeclarator(i int) INoPointerAbstractDeclaratorContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INoPointerAbstractDeclaratorContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INoPointerAbstractDeclaratorContext)
}

func (s *NoPointerAbstractDeclaratorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NoPointerAbstractDeclaratorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NoPointerAbstractDeclaratorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitNoPointerAbstractDeclarator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) NoPointerAbstractDeclarator() (localctx INoPointerAbstractDeclaratorContext) {
	return p.noPointerAbstractDeclarator(0)
}

func (p *CPP14Parser) noPointerAbstractDeclarator(_p int) (localctx INoPointerAbstractDeclaratorContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewNoPointerAbstractDeclaratorContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx INoPointerAbstractDeclaratorContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 252
	p.EnterRecursionRule(localctx, 252, CPP14ParserRULE_noPointerAbstractDeclarator, _p)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1534)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 198, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1521)
			p.ParametersAndQualifiers()
		}

	case 2:
		{
			p.SetState(1522)
			p.Match(CPP14ParserLeftBracket)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1524)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&8364979464334764286) != 0) || ((int64((_la-65)) & ^0x3f) == 0 && ((int64(1)<<(_la-65))&4719772474384133137) != 0) || _la == CPP14ParserIdentifier {
			{
				p.SetState(1523)
				p.ConstantExpression()
			}

		}
		{
			p.SetState(1526)
			p.Match(CPP14ParserRightBracket)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1528)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 197, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1527)
				p.AttributeSpecifierSeq()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 3:
		{
			p.SetState(1530)
			p.Match(CPP14ParserLeftParen)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1531)
			p.PointerAbstractDeclarator()
		}
		{
			p.SetState(1532)
			p.Match(CPP14ParserRightParen)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1551)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 202, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewNoPointerAbstractDeclaratorContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, CPP14ParserRULE_noPointerAbstractDeclarator)
			p.SetState(1536)

			if !(p.Precpred(p.GetParserRuleContext(), 4)) {
				p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
				goto errorExit
			}
			p.SetState(1547)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 201, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(1537)
					p.ParametersAndQualifiers()
				}

			case 2:
				{
					p.SetState(1538)
					p.noPointerAbstractDeclarator(0)
				}
				{
					p.SetState(1539)
					p.Match(CPP14ParserLeftBracket)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				p.SetState(1541)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)

				if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&8364979464334764286) != 0) || ((int64((_la-65)) & ^0x3f) == 0 && ((int64(1)<<(_la-65))&4719772474384133137) != 0) || _la == CPP14ParserIdentifier {
					{
						p.SetState(1540)
						p.ConstantExpression()
					}

				}
				{
					p.SetState(1543)
					p.Match(CPP14ParserRightBracket)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				p.SetState(1545)
				p.GetErrorHandler().Sync(p)

				if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 200, p.GetParserRuleContext()) == 1 {
					{
						p.SetState(1544)
						p.AttributeSpecifierSeq()
					}

				} else if p.HasError() { // JIM
					goto errorExit
				}

			case antlr.ATNInvalidAltNumber:
				goto errorExit
			}

		}
		p.SetState(1553)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 202, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAbstractPackDeclaratorContext is an interface to support dynamic dispatch.
type IAbstractPackDeclaratorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	NoPointerAbstractPackDeclarator() INoPointerAbstractPackDeclaratorContext
	AllPointerOperator() []IPointerOperatorContext
	PointerOperator(i int) IPointerOperatorContext

	// IsAbstractPackDeclaratorContext differentiates from other interfaces.
	IsAbstractPackDeclaratorContext()
}

type AbstractPackDeclaratorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAbstractPackDeclaratorContext() *AbstractPackDeclaratorContext {
	var p = new(AbstractPackDeclaratorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_abstractPackDeclarator
	return p
}

func InitEmptyAbstractPackDeclaratorContext(p *AbstractPackDeclaratorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_abstractPackDeclarator
}

func (*AbstractPackDeclaratorContext) IsAbstractPackDeclaratorContext() {}

func NewAbstractPackDeclaratorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AbstractPackDeclaratorContext {
	var p = new(AbstractPackDeclaratorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_abstractPackDeclarator

	return p
}

func (s *AbstractPackDeclaratorContext) GetParser() antlr.Parser { return s.parser }

func (s *AbstractPackDeclaratorContext) NoPointerAbstractPackDeclarator() INoPointerAbstractPackDeclaratorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INoPointerAbstractPackDeclaratorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INoPointerAbstractPackDeclaratorContext)
}

func (s *AbstractPackDeclaratorContext) AllPointerOperator() []IPointerOperatorContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IPointerOperatorContext); ok {
			len++
		}
	}

	tst := make([]IPointerOperatorContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IPointerOperatorContext); ok {
			tst[i] = t.(IPointerOperatorContext)
			i++
		}
	}

	return tst
}

func (s *AbstractPackDeclaratorContext) PointerOperator(i int) IPointerOperatorContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPointerOperatorContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPointerOperatorContext)
}

func (s *AbstractPackDeclaratorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AbstractPackDeclaratorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AbstractPackDeclaratorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitAbstractPackDeclarator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) AbstractPackDeclarator() (localctx IAbstractPackDeclaratorContext) {
	localctx = NewAbstractPackDeclaratorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 254, CPP14ParserRULE_abstractPackDeclarator)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1557)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == CPP14ParserDecltype || ((int64((_la-93)) & ^0x3f) == 0 && ((int64(1)<<(_la-93))&566969237521) != 0) {
		{
			p.SetState(1554)
			p.PointerOperator()
		}

		p.SetState(1559)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1560)
		p.noPointerAbstractPackDeclarator(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INoPointerAbstractPackDeclaratorContext is an interface to support dynamic dispatch.
type INoPointerAbstractPackDeclaratorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Ellipsis() antlr.TerminalNode
	NoPointerAbstractPackDeclarator() INoPointerAbstractPackDeclaratorContext
	ParametersAndQualifiers() IParametersAndQualifiersContext
	LeftBracket() antlr.TerminalNode
	RightBracket() antlr.TerminalNode
	ConstantExpression() IConstantExpressionContext
	AttributeSpecifierSeq() IAttributeSpecifierSeqContext

	// IsNoPointerAbstractPackDeclaratorContext differentiates from other interfaces.
	IsNoPointerAbstractPackDeclaratorContext()
}

type NoPointerAbstractPackDeclaratorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNoPointerAbstractPackDeclaratorContext() *NoPointerAbstractPackDeclaratorContext {
	var p = new(NoPointerAbstractPackDeclaratorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_noPointerAbstractPackDeclarator
	return p
}

func InitEmptyNoPointerAbstractPackDeclaratorContext(p *NoPointerAbstractPackDeclaratorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_noPointerAbstractPackDeclarator
}

func (*NoPointerAbstractPackDeclaratorContext) IsNoPointerAbstractPackDeclaratorContext() {}

func NewNoPointerAbstractPackDeclaratorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NoPointerAbstractPackDeclaratorContext {
	var p = new(NoPointerAbstractPackDeclaratorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_noPointerAbstractPackDeclarator

	return p
}

func (s *NoPointerAbstractPackDeclaratorContext) GetParser() antlr.Parser { return s.parser }

func (s *NoPointerAbstractPackDeclaratorContext) Ellipsis() antlr.TerminalNode {
	return s.GetToken(CPP14ParserEllipsis, 0)
}

func (s *NoPointerAbstractPackDeclaratorContext) NoPointerAbstractPackDeclarator() INoPointerAbstractPackDeclaratorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INoPointerAbstractPackDeclaratorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INoPointerAbstractPackDeclaratorContext)
}

func (s *NoPointerAbstractPackDeclaratorContext) ParametersAndQualifiers() IParametersAndQualifiersContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParametersAndQualifiersContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParametersAndQualifiersContext)
}

func (s *NoPointerAbstractPackDeclaratorContext) LeftBracket() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftBracket, 0)
}

func (s *NoPointerAbstractPackDeclaratorContext) RightBracket() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightBracket, 0)
}

func (s *NoPointerAbstractPackDeclaratorContext) ConstantExpression() IConstantExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConstantExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConstantExpressionContext)
}

func (s *NoPointerAbstractPackDeclaratorContext) AttributeSpecifierSeq() IAttributeSpecifierSeqContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributeSpecifierSeqContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributeSpecifierSeqContext)
}

func (s *NoPointerAbstractPackDeclaratorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NoPointerAbstractPackDeclaratorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NoPointerAbstractPackDeclaratorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitNoPointerAbstractPackDeclarator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) NoPointerAbstractPackDeclarator() (localctx INoPointerAbstractPackDeclaratorContext) {
	return p.noPointerAbstractPackDeclarator(0)
}

func (p *CPP14Parser) noPointerAbstractPackDeclarator(_p int) (localctx INoPointerAbstractPackDeclaratorContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewNoPointerAbstractPackDeclaratorContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx INoPointerAbstractPackDeclaratorContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 256
	p.EnterRecursionRule(localctx, 256, CPP14ParserRULE_noPointerAbstractPackDeclarator, _p)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1563)
		p.Match(CPP14ParserEllipsis)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1579)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 207, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewNoPointerAbstractPackDeclaratorContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, CPP14ParserRULE_noPointerAbstractPackDeclarator)
			p.SetState(1565)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				goto errorExit
			}
			p.SetState(1575)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetTokenStream().LA(1) {
			case CPP14ParserLeftParen:
				{
					p.SetState(1566)
					p.ParametersAndQualifiers()
				}

			case CPP14ParserLeftBracket:
				{
					p.SetState(1567)
					p.Match(CPP14ParserLeftBracket)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				p.SetState(1569)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)

				if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&8364979464334764286) != 0) || ((int64((_la-65)) & ^0x3f) == 0 && ((int64(1)<<(_la-65))&4719772474384133137) != 0) || _la == CPP14ParserIdentifier {
					{
						p.SetState(1568)
						p.ConstantExpression()
					}

				}
				{
					p.SetState(1571)
					p.Match(CPP14ParserRightBracket)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				p.SetState(1573)
				p.GetErrorHandler().Sync(p)

				if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 205, p.GetParserRuleContext()) == 1 {
					{
						p.SetState(1572)
						p.AttributeSpecifierSeq()
					}

				} else if p.HasError() { // JIM
					goto errorExit
				}

			default:
				p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
				goto errorExit
			}

		}
		p.SetState(1581)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 207, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IParameterDeclarationClauseContext is an interface to support dynamic dispatch.
type IParameterDeclarationClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ParameterDeclarationList() IParameterDeclarationListContext
	Ellipsis() antlr.TerminalNode
	Comma() antlr.TerminalNode

	// IsParameterDeclarationClauseContext differentiates from other interfaces.
	IsParameterDeclarationClauseContext()
}

type ParameterDeclarationClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParameterDeclarationClauseContext() *ParameterDeclarationClauseContext {
	var p = new(ParameterDeclarationClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_parameterDeclarationClause
	return p
}

func InitEmptyParameterDeclarationClauseContext(p *ParameterDeclarationClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_parameterDeclarationClause
}

func (*ParameterDeclarationClauseContext) IsParameterDeclarationClauseContext() {}

func NewParameterDeclarationClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParameterDeclarationClauseContext {
	var p = new(ParameterDeclarationClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_parameterDeclarationClause

	return p
}

func (s *ParameterDeclarationClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *ParameterDeclarationClauseContext) ParameterDeclarationList() IParameterDeclarationListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParameterDeclarationListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParameterDeclarationListContext)
}

func (s *ParameterDeclarationClauseContext) Ellipsis() antlr.TerminalNode {
	return s.GetToken(CPP14ParserEllipsis, 0)
}

func (s *ParameterDeclarationClauseContext) Comma() antlr.TerminalNode {
	return s.GetToken(CPP14ParserComma, 0)
}

func (s *ParameterDeclarationClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParameterDeclarationClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ParameterDeclarationClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitParameterDeclarationClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) ParameterDeclarationClause() (localctx IParameterDeclarationClauseContext) {
	localctx = NewParameterDeclarationClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 258, CPP14ParserRULE_parameterDeclarationClause)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1582)
		p.ParameterDeclarationList()
	}
	p.SetState(1587)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserComma || _la == CPP14ParserEllipsis {
		p.SetState(1584)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == CPP14ParserComma {
			{
				p.SetState(1583)
				p.Match(CPP14ParserComma)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(1586)
			p.Match(CPP14ParserEllipsis)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IParameterDeclarationListContext is an interface to support dynamic dispatch.
type IParameterDeclarationListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllParameterDeclaration() []IParameterDeclarationContext
	ParameterDeclaration(i int) IParameterDeclarationContext
	AllComma() []antlr.TerminalNode
	Comma(i int) antlr.TerminalNode

	// IsParameterDeclarationListContext differentiates from other interfaces.
	IsParameterDeclarationListContext()
}

type ParameterDeclarationListContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParameterDeclarationListContext() *ParameterDeclarationListContext {
	var p = new(ParameterDeclarationListContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_parameterDeclarationList
	return p
}

func InitEmptyParameterDeclarationListContext(p *ParameterDeclarationListContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_parameterDeclarationList
}

func (*ParameterDeclarationListContext) IsParameterDeclarationListContext() {}

func NewParameterDeclarationListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParameterDeclarationListContext {
	var p = new(ParameterDeclarationListContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_parameterDeclarationList

	return p
}

func (s *ParameterDeclarationListContext) GetParser() antlr.Parser { return s.parser }

func (s *ParameterDeclarationListContext) AllParameterDeclaration() []IParameterDeclarationContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IParameterDeclarationContext); ok {
			len++
		}
	}

	tst := make([]IParameterDeclarationContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IParameterDeclarationContext); ok {
			tst[i] = t.(IParameterDeclarationContext)
			i++
		}
	}

	return tst
}

func (s *ParameterDeclarationListContext) ParameterDeclaration(i int) IParameterDeclarationContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParameterDeclarationContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParameterDeclarationContext)
}

func (s *ParameterDeclarationListContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserComma)
}

func (s *ParameterDeclarationListContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserComma, i)
}

func (s *ParameterDeclarationListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParameterDeclarationListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ParameterDeclarationListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitParameterDeclarationList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) ParameterDeclarationList() (localctx IParameterDeclarationListContext) {
	localctx = NewParameterDeclarationListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 260, CPP14ParserRULE_parameterDeclarationList)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1589)
		p.ParameterDeclaration()
	}
	p.SetState(1594)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 210, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1590)
				p.Match(CPP14ParserComma)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1591)
				p.ParameterDeclaration()
			}

		}
		p.SetState(1596)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 210, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IParameterDeclarationContext is an interface to support dynamic dispatch.
type IParameterDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DeclSpecifierSeq() IDeclSpecifierSeqContext
	AttributeSpecifierSeq() IAttributeSpecifierSeqContext
	Declarator() IDeclaratorContext
	Assign() antlr.TerminalNode
	InitializerClause() IInitializerClauseContext
	AbstractDeclarator() IAbstractDeclaratorContext

	// IsParameterDeclarationContext differentiates from other interfaces.
	IsParameterDeclarationContext()
}

type ParameterDeclarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParameterDeclarationContext() *ParameterDeclarationContext {
	var p = new(ParameterDeclarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_parameterDeclaration
	return p
}

func InitEmptyParameterDeclarationContext(p *ParameterDeclarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_parameterDeclaration
}

func (*ParameterDeclarationContext) IsParameterDeclarationContext() {}

func NewParameterDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParameterDeclarationContext {
	var p = new(ParameterDeclarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_parameterDeclaration

	return p
}

func (s *ParameterDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *ParameterDeclarationContext) DeclSpecifierSeq() IDeclSpecifierSeqContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDeclSpecifierSeqContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDeclSpecifierSeqContext)
}

func (s *ParameterDeclarationContext) AttributeSpecifierSeq() IAttributeSpecifierSeqContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributeSpecifierSeqContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributeSpecifierSeqContext)
}

func (s *ParameterDeclarationContext) Declarator() IDeclaratorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDeclaratorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDeclaratorContext)
}

func (s *ParameterDeclarationContext) Assign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAssign, 0)
}

func (s *ParameterDeclarationContext) InitializerClause() IInitializerClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInitializerClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInitializerClauseContext)
}

func (s *ParameterDeclarationContext) AbstractDeclarator() IAbstractDeclaratorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAbstractDeclaratorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAbstractDeclaratorContext)
}

func (s *ParameterDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParameterDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ParameterDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitParameterDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) ParameterDeclaration() (localctx IParameterDeclarationContext) {
	localctx = NewParameterDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 262, CPP14ParserRULE_parameterDeclaration)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1598)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserAlignas || _la == CPP14ParserLeftBracket {
		{
			p.SetState(1597)
			p.AttributeSpecifierSeq()
		}

	}
	{
		p.SetState(1600)
		p.DeclSpecifierSeq()
	}

	p.SetState(1605)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 213, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1601)
			p.Declarator()
		}

	case 2:
		p.SetState(1603)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 212, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1602)
				p.AbstractDeclarator()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	p.SetState(1609)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserAssign {
		{
			p.SetState(1607)
			p.Match(CPP14ParserAssign)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1608)
			p.InitializerClause()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFunctionDefinitionContext is an interface to support dynamic dispatch.
type IFunctionDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Declarator() IDeclaratorContext
	FunctionBody() IFunctionBodyContext
	AttributeSpecifierSeq() IAttributeSpecifierSeqContext
	DeclSpecifierSeq() IDeclSpecifierSeqContext
	VirtualSpecifierSeq() IVirtualSpecifierSeqContext

	// IsFunctionDefinitionContext differentiates from other interfaces.
	IsFunctionDefinitionContext()
}

type FunctionDefinitionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionDefinitionContext() *FunctionDefinitionContext {
	var p = new(FunctionDefinitionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_functionDefinition
	return p
}

func InitEmptyFunctionDefinitionContext(p *FunctionDefinitionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_functionDefinition
}

func (*FunctionDefinitionContext) IsFunctionDefinitionContext() {}

func NewFunctionDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionDefinitionContext {
	var p = new(FunctionDefinitionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_functionDefinition

	return p
}

func (s *FunctionDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionDefinitionContext) Declarator() IDeclaratorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDeclaratorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDeclaratorContext)
}

func (s *FunctionDefinitionContext) FunctionBody() IFunctionBodyContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunctionBodyContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunctionBodyContext)
}

func (s *FunctionDefinitionContext) AttributeSpecifierSeq() IAttributeSpecifierSeqContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributeSpecifierSeqContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributeSpecifierSeqContext)
}

func (s *FunctionDefinitionContext) DeclSpecifierSeq() IDeclSpecifierSeqContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDeclSpecifierSeqContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDeclSpecifierSeqContext)
}

func (s *FunctionDefinitionContext) VirtualSpecifierSeq() IVirtualSpecifierSeqContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVirtualSpecifierSeqContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVirtualSpecifierSeqContext)
}

func (s *FunctionDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitFunctionDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) FunctionDefinition() (localctx IFunctionDefinitionContext) {
	localctx = NewFunctionDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 264, CPP14ParserRULE_functionDefinition)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1612)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserAlignas || _la == CPP14ParserLeftBracket {
		{
			p.SetState(1611)
			p.AttributeSpecifierSeq()
		}

	}
	p.SetState(1615)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 216, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1614)
			p.DeclSpecifierSeq()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(1617)
		p.Declarator()
	}
	p.SetState(1619)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserFinal || _la == CPP14ParserOverride {
		{
			p.SetState(1618)
			p.VirtualSpecifierSeq()
		}

	}
	{
		p.SetState(1621)
		p.FunctionBody()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFunctionBodyContext is an interface to support dynamic dispatch.
type IFunctionBodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CompoundStatement() ICompoundStatementContext
	ConstructorInitializer() IConstructorInitializerContext
	FunctionTryBlock() IFunctionTryBlockContext
	Assign() antlr.TerminalNode
	Semi() antlr.TerminalNode
	Default() antlr.TerminalNode
	Delete() antlr.TerminalNode

	// IsFunctionBodyContext differentiates from other interfaces.
	IsFunctionBodyContext()
}

type FunctionBodyContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionBodyContext() *FunctionBodyContext {
	var p = new(FunctionBodyContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_functionBody
	return p
}

func InitEmptyFunctionBodyContext(p *FunctionBodyContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_functionBody
}

func (*FunctionBodyContext) IsFunctionBodyContext() {}

func NewFunctionBodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionBodyContext {
	var p = new(FunctionBodyContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_functionBody

	return p
}

func (s *FunctionBodyContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionBodyContext) CompoundStatement() ICompoundStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICompoundStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICompoundStatementContext)
}

func (s *FunctionBodyContext) ConstructorInitializer() IConstructorInitializerContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConstructorInitializerContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConstructorInitializerContext)
}

func (s *FunctionBodyContext) FunctionTryBlock() IFunctionTryBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunctionTryBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunctionTryBlockContext)
}

func (s *FunctionBodyContext) Assign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAssign, 0)
}

func (s *FunctionBodyContext) Semi() antlr.TerminalNode {
	return s.GetToken(CPP14ParserSemi, 0)
}

func (s *FunctionBodyContext) Default() antlr.TerminalNode {
	return s.GetToken(CPP14ParserDefault, 0)
}

func (s *FunctionBodyContext) Delete() antlr.TerminalNode {
	return s.GetToken(CPP14ParserDelete, 0)
}

func (s *FunctionBodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionBodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionBodyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitFunctionBody(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) FunctionBody() (localctx IFunctionBodyContext) {
	localctx = NewFunctionBodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 266, CPP14ParserRULE_functionBody)
	var _la int

	p.SetState(1631)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserLeftBrace, CPP14ParserColon:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(1624)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == CPP14ParserColon {
			{
				p.SetState(1623)
				p.ConstructorInitializer()
			}

		}
		{
			p.SetState(1626)
			p.CompoundStatement()
		}

	case CPP14ParserTry:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1627)
			p.FunctionTryBlock()
		}

	case CPP14ParserAssign:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1628)
			p.Match(CPP14ParserAssign)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1629)
			_la = p.GetTokenStream().LA(1)

			if !(_la == CPP14ParserDefault || _la == CPP14ParserDelete) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(1630)
			p.Match(CPP14ParserSemi)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IInitializerContext is an interface to support dynamic dispatch.
type IInitializerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	BraceOrEqualInitializer() IBraceOrEqualInitializerContext
	LeftParen() antlr.TerminalNode
	ExpressionList() IExpressionListContext
	RightParen() antlr.TerminalNode

	// IsInitializerContext differentiates from other interfaces.
	IsInitializerContext()
}

type InitializerContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInitializerContext() *InitializerContext {
	var p = new(InitializerContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_initializer
	return p
}

func InitEmptyInitializerContext(p *InitializerContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_initializer
}

func (*InitializerContext) IsInitializerContext() {}

func NewInitializerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InitializerContext {
	var p = new(InitializerContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_initializer

	return p
}

func (s *InitializerContext) GetParser() antlr.Parser { return s.parser }

func (s *InitializerContext) BraceOrEqualInitializer() IBraceOrEqualInitializerContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBraceOrEqualInitializerContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBraceOrEqualInitializerContext)
}

func (s *InitializerContext) LeftParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, 0)
}

func (s *InitializerContext) ExpressionList() IExpressionListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *InitializerContext) RightParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, 0)
}

func (s *InitializerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InitializerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InitializerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitInitializer(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) Initializer() (localctx IInitializerContext) {
	localctx = NewInitializerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 268, CPP14ParserRULE_initializer)
	p.SetState(1638)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserLeftBrace, CPP14ParserAssign:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1633)
			p.BraceOrEqualInitializer()
		}

	case CPP14ParserLeftParen:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1634)
			p.Match(CPP14ParserLeftParen)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1635)
			p.ExpressionList()
		}
		{
			p.SetState(1636)
			p.Match(CPP14ParserRightParen)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBraceOrEqualInitializerContext is an interface to support dynamic dispatch.
type IBraceOrEqualInitializerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Assign() antlr.TerminalNode
	InitializerClause() IInitializerClauseContext
	BracedInitList() IBracedInitListContext

	// IsBraceOrEqualInitializerContext differentiates from other interfaces.
	IsBraceOrEqualInitializerContext()
}

type BraceOrEqualInitializerContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBraceOrEqualInitializerContext() *BraceOrEqualInitializerContext {
	var p = new(BraceOrEqualInitializerContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_braceOrEqualInitializer
	return p
}

func InitEmptyBraceOrEqualInitializerContext(p *BraceOrEqualInitializerContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_braceOrEqualInitializer
}

func (*BraceOrEqualInitializerContext) IsBraceOrEqualInitializerContext() {}

func NewBraceOrEqualInitializerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BraceOrEqualInitializerContext {
	var p = new(BraceOrEqualInitializerContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_braceOrEqualInitializer

	return p
}

func (s *BraceOrEqualInitializerContext) GetParser() antlr.Parser { return s.parser }

func (s *BraceOrEqualInitializerContext) Assign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAssign, 0)
}

func (s *BraceOrEqualInitializerContext) InitializerClause() IInitializerClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInitializerClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInitializerClauseContext)
}

func (s *BraceOrEqualInitializerContext) BracedInitList() IBracedInitListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBracedInitListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBracedInitListContext)
}

func (s *BraceOrEqualInitializerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BraceOrEqualInitializerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BraceOrEqualInitializerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitBraceOrEqualInitializer(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) BraceOrEqualInitializer() (localctx IBraceOrEqualInitializerContext) {
	localctx = NewBraceOrEqualInitializerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 270, CPP14ParserRULE_braceOrEqualInitializer)
	p.SetState(1643)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserAssign:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1640)
			p.Match(CPP14ParserAssign)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1641)
			p.InitializerClause()
		}

	case CPP14ParserLeftBrace:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1642)
			p.BracedInitList()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IInitializerClauseContext is an interface to support dynamic dispatch.
type IInitializerClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AssignmentExpression() IAssignmentExpressionContext
	BracedInitList() IBracedInitListContext

	// IsInitializerClauseContext differentiates from other interfaces.
	IsInitializerClauseContext()
}

type InitializerClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInitializerClauseContext() *InitializerClauseContext {
	var p = new(InitializerClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_initializerClause
	return p
}

func InitEmptyInitializerClauseContext(p *InitializerClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_initializerClause
}

func (*InitializerClauseContext) IsInitializerClauseContext() {}

func NewInitializerClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InitializerClauseContext {
	var p = new(InitializerClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_initializerClause

	return p
}

func (s *InitializerClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *InitializerClauseContext) AssignmentExpression() IAssignmentExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAssignmentExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpressionContext)
}

func (s *InitializerClauseContext) BracedInitList() IBracedInitListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBracedInitListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBracedInitListContext)
}

func (s *InitializerClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InitializerClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InitializerClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitInitializerClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) InitializerClause() (localctx IInitializerClauseContext) {
	localctx = NewInitializerClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 272, CPP14ParserRULE_initializerClause)
	p.SetState(1647)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserIntegerLiteral, CPP14ParserCharacterLiteral, CPP14ParserFloatingLiteral, CPP14ParserStringLiteral, CPP14ParserBooleanLiteral, CPP14ParserPointerLiteral, CPP14ParserUserDefinedLiteral, CPP14ParserAlignof, CPP14ParserAuto, CPP14ParserBool, CPP14ParserChar, CPP14ParserChar16, CPP14ParserChar32, CPP14ParserConst_cast, CPP14ParserDecltype, CPP14ParserDelete, CPP14ParserDouble, CPP14ParserDynamic_cast, CPP14ParserFloat, CPP14ParserInt, CPP14ParserLong, CPP14ParserNew, CPP14ParserNoexcept, CPP14ParserOperator, CPP14ParserReinterpret_cast, CPP14ParserShort, CPP14ParserSigned, CPP14ParserSizeof, CPP14ParserStatic_cast, CPP14ParserThis, CPP14ParserThrow, CPP14ParserTypeid_, CPP14ParserTypename_, CPP14ParserUnsigned, CPP14ParserVoid, CPP14ParserWchar, CPP14ParserLeftParen, CPP14ParserLeftBracket, CPP14ParserPlus, CPP14ParserMinus, CPP14ParserStar, CPP14ParserAnd, CPP14ParserOr, CPP14ParserTilde, CPP14ParserNot, CPP14ParserPlusPlus, CPP14ParserMinusMinus, CPP14ParserDoublecolon, CPP14ParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1645)
			p.AssignmentExpression()
		}

	case CPP14ParserLeftBrace:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1646)
			p.BracedInitList()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IInitializerListContext is an interface to support dynamic dispatch.
type IInitializerListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllInitializerClause() []IInitializerClauseContext
	InitializerClause(i int) IInitializerClauseContext
	AllEllipsis() []antlr.TerminalNode
	Ellipsis(i int) antlr.TerminalNode
	AllComma() []antlr.TerminalNode
	Comma(i int) antlr.TerminalNode

	// IsInitializerListContext differentiates from other interfaces.
	IsInitializerListContext()
}

type InitializerListContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInitializerListContext() *InitializerListContext {
	var p = new(InitializerListContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_initializerList
	return p
}

func InitEmptyInitializerListContext(p *InitializerListContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_initializerList
}

func (*InitializerListContext) IsInitializerListContext() {}

func NewInitializerListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InitializerListContext {
	var p = new(InitializerListContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_initializerList

	return p
}

func (s *InitializerListContext) GetParser() antlr.Parser { return s.parser }

func (s *InitializerListContext) AllInitializerClause() []IInitializerClauseContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IInitializerClauseContext); ok {
			len++
		}
	}

	tst := make([]IInitializerClauseContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IInitializerClauseContext); ok {
			tst[i] = t.(IInitializerClauseContext)
			i++
		}
	}

	return tst
}

func (s *InitializerListContext) InitializerClause(i int) IInitializerClauseContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInitializerClauseContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInitializerClauseContext)
}

func (s *InitializerListContext) AllEllipsis() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserEllipsis)
}

func (s *InitializerListContext) Ellipsis(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserEllipsis, i)
}

func (s *InitializerListContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserComma)
}

func (s *InitializerListContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserComma, i)
}

func (s *InitializerListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InitializerListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InitializerListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitInitializerList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) InitializerList() (localctx IInitializerListContext) {
	localctx = NewInitializerListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 274, CPP14ParserRULE_initializerList)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1649)
		p.InitializerClause()
	}
	p.SetState(1651)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserEllipsis {
		{
			p.SetState(1650)
			p.Match(CPP14ParserEllipsis)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(1660)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 225, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1653)
				p.Match(CPP14ParserComma)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1654)
				p.InitializerClause()
			}
			p.SetState(1656)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == CPP14ParserEllipsis {
				{
					p.SetState(1655)
					p.Match(CPP14ParserEllipsis)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}

		}
		p.SetState(1662)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 225, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBracedInitListContext is an interface to support dynamic dispatch.
type IBracedInitListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LeftBrace() antlr.TerminalNode
	RightBrace() antlr.TerminalNode
	InitializerList() IInitializerListContext
	Comma() antlr.TerminalNode

	// IsBracedInitListContext differentiates from other interfaces.
	IsBracedInitListContext()
}

type BracedInitListContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBracedInitListContext() *BracedInitListContext {
	var p = new(BracedInitListContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_bracedInitList
	return p
}

func InitEmptyBracedInitListContext(p *BracedInitListContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_bracedInitList
}

func (*BracedInitListContext) IsBracedInitListContext() {}

func NewBracedInitListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BracedInitListContext {
	var p = new(BracedInitListContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_bracedInitList

	return p
}

func (s *BracedInitListContext) GetParser() antlr.Parser { return s.parser }

func (s *BracedInitListContext) LeftBrace() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftBrace, 0)
}

func (s *BracedInitListContext) RightBrace() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightBrace, 0)
}

func (s *BracedInitListContext) InitializerList() IInitializerListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInitializerListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInitializerListContext)
}

func (s *BracedInitListContext) Comma() antlr.TerminalNode {
	return s.GetToken(CPP14ParserComma, 0)
}

func (s *BracedInitListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BracedInitListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BracedInitListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitBracedInitList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) BracedInitList() (localctx IBracedInitListContext) {
	localctx = NewBracedInitListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 276, CPP14ParserRULE_bracedInitList)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1663)
		p.Match(CPP14ParserLeftBrace)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1668)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&8364979464334764286) != 0) || ((int64((_la-65)) & ^0x3f) == 0 && ((int64(1)<<(_la-65))&4719772474400910417) != 0) || _la == CPP14ParserIdentifier {
		{
			p.SetState(1664)
			p.InitializerList()
		}
		p.SetState(1666)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == CPP14ParserComma {
			{
				p.SetState(1665)
				p.Match(CPP14ParserComma)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}

	}
	{
		p.SetState(1670)
		p.Match(CPP14ParserRightBrace)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IClassNameContext is an interface to support dynamic dispatch.
type IClassNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() antlr.TerminalNode
	SimpleTemplateId() ISimpleTemplateIdContext

	// IsClassNameContext differentiates from other interfaces.
	IsClassNameContext()
}

type ClassNameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassNameContext() *ClassNameContext {
	var p = new(ClassNameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_className
	return p
}

func InitEmptyClassNameContext(p *ClassNameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_className
}

func (*ClassNameContext) IsClassNameContext() {}

func NewClassNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassNameContext {
	var p = new(ClassNameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_className

	return p
}

func (s *ClassNameContext) GetParser() antlr.Parser { return s.parser }

func (s *ClassNameContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *ClassNameContext) SimpleTemplateId() ISimpleTemplateIdContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISimpleTemplateIdContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISimpleTemplateIdContext)
}

func (s *ClassNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClassNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitClassName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) ClassName() (localctx IClassNameContext) {
	localctx = NewClassNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 278, CPP14ParserRULE_className)
	p.SetState(1674)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 228, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1672)
			p.Match(CPP14ParserIdentifier)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1673)
			p.SimpleTemplateId()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IClassSpecifierContext is an interface to support dynamic dispatch.
type IClassSpecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ClassHead() IClassHeadContext
	LeftBrace() antlr.TerminalNode
	RightBrace() antlr.TerminalNode
	MemberSpecification() IMemberSpecificationContext

	// IsClassSpecifierContext differentiates from other interfaces.
	IsClassSpecifierContext()
}

type ClassSpecifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassSpecifierContext() *ClassSpecifierContext {
	var p = new(ClassSpecifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_classSpecifier
	return p
}

func InitEmptyClassSpecifierContext(p *ClassSpecifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_classSpecifier
}

func (*ClassSpecifierContext) IsClassSpecifierContext() {}

func NewClassSpecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassSpecifierContext {
	var p = new(ClassSpecifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_classSpecifier

	return p
}

func (s *ClassSpecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *ClassSpecifierContext) ClassHead() IClassHeadContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClassHeadContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClassHeadContext)
}

func (s *ClassSpecifierContext) LeftBrace() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftBrace, 0)
}

func (s *ClassSpecifierContext) RightBrace() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightBrace, 0)
}

func (s *ClassSpecifierContext) MemberSpecification() IMemberSpecificationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMemberSpecificationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMemberSpecificationContext)
}

func (s *ClassSpecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassSpecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClassSpecifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitClassSpecifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) ClassSpecifier() (localctx IClassSpecifierContext) {
	localctx = NewClassSpecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 280, CPP14ParserRULE_classSpecifier)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1676)
		p.ClassHead()
	}
	{
		p.SetState(1677)
		p.Match(CPP14ParserLeftBrace)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1679)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64((_la-10)) & ^0x3f) == 0 && ((int64(1)<<(_la-10))&1543877313594212121) != 0) || ((int64((_la-74)) & ^0x3f) == 0 && ((int64(1)<<(_la-74))&463888353847684093) != 0) {
		{
			p.SetState(1678)
			p.MemberSpecification()
		}

	}
	{
		p.SetState(1681)
		p.Match(CPP14ParserRightBrace)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IClassHeadContext is an interface to support dynamic dispatch.
type IClassHeadContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ClassKey() IClassKeyContext
	AttributeSpecifierSeq() IAttributeSpecifierSeqContext
	ClassHeadName() IClassHeadNameContext
	BaseClause() IBaseClauseContext
	ClassVirtSpecifier() IClassVirtSpecifierContext
	Union() antlr.TerminalNode

	// IsClassHeadContext differentiates from other interfaces.
	IsClassHeadContext()
}

type ClassHeadContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassHeadContext() *ClassHeadContext {
	var p = new(ClassHeadContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_classHead
	return p
}

func InitEmptyClassHeadContext(p *ClassHeadContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_classHead
}

func (*ClassHeadContext) IsClassHeadContext() {}

func NewClassHeadContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassHeadContext {
	var p = new(ClassHeadContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_classHead

	return p
}

func (s *ClassHeadContext) GetParser() antlr.Parser { return s.parser }

func (s *ClassHeadContext) ClassKey() IClassKeyContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClassKeyContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClassKeyContext)
}

func (s *ClassHeadContext) AttributeSpecifierSeq() IAttributeSpecifierSeqContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributeSpecifierSeqContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributeSpecifierSeqContext)
}

func (s *ClassHeadContext) ClassHeadName() IClassHeadNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClassHeadNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClassHeadNameContext)
}

func (s *ClassHeadContext) BaseClause() IBaseClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBaseClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBaseClauseContext)
}

func (s *ClassHeadContext) ClassVirtSpecifier() IClassVirtSpecifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClassVirtSpecifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClassVirtSpecifierContext)
}

func (s *ClassHeadContext) Union() antlr.TerminalNode {
	return s.GetToken(CPP14ParserUnion, 0)
}

func (s *ClassHeadContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassHeadContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClassHeadContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitClassHead(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) ClassHead() (localctx IClassHeadContext) {
	localctx = NewClassHeadContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 282, CPP14ParserRULE_classHead)
	var _la int

	p.SetState(1706)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserClass, CPP14ParserStruct:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1683)
			p.ClassKey()
		}
		p.SetState(1685)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == CPP14ParserAlignas || _la == CPP14ParserLeftBracket {
			{
				p.SetState(1684)
				p.AttributeSpecifierSeq()
			}

		}
		p.SetState(1691)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == CPP14ParserDecltype || _la == CPP14ParserDoublecolon || _la == CPP14ParserIdentifier {
			{
				p.SetState(1687)
				p.ClassHeadName()
			}
			p.SetState(1689)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == CPP14ParserFinal {
				{
					p.SetState(1688)
					p.ClassVirtSpecifier()
				}

			}

		}
		p.SetState(1694)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == CPP14ParserColon {
			{
				p.SetState(1693)
				p.BaseClause()
			}

		}

	case CPP14ParserUnion:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1696)
			p.Match(CPP14ParserUnion)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1698)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == CPP14ParserAlignas || _la == CPP14ParserLeftBracket {
			{
				p.SetState(1697)
				p.AttributeSpecifierSeq()
			}

		}
		p.SetState(1704)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == CPP14ParserDecltype || _la == CPP14ParserDoublecolon || _la == CPP14ParserIdentifier {
			{
				p.SetState(1700)
				p.ClassHeadName()
			}
			p.SetState(1702)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == CPP14ParserFinal {
				{
					p.SetState(1701)
					p.ClassVirtSpecifier()
				}

			}

		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IClassHeadNameContext is an interface to support dynamic dispatch.
type IClassHeadNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ClassName() IClassNameContext
	NestedNameSpecifier() INestedNameSpecifierContext

	// IsClassHeadNameContext differentiates from other interfaces.
	IsClassHeadNameContext()
}

type ClassHeadNameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassHeadNameContext() *ClassHeadNameContext {
	var p = new(ClassHeadNameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_classHeadName
	return p
}

func InitEmptyClassHeadNameContext(p *ClassHeadNameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_classHeadName
}

func (*ClassHeadNameContext) IsClassHeadNameContext() {}

func NewClassHeadNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassHeadNameContext {
	var p = new(ClassHeadNameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_classHeadName

	return p
}

func (s *ClassHeadNameContext) GetParser() antlr.Parser { return s.parser }

func (s *ClassHeadNameContext) ClassName() IClassNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClassNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClassNameContext)
}

func (s *ClassHeadNameContext) NestedNameSpecifier() INestedNameSpecifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INestedNameSpecifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INestedNameSpecifierContext)
}

func (s *ClassHeadNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassHeadNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClassHeadNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitClassHeadName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) ClassHeadName() (localctx IClassHeadNameContext) {
	localctx = NewClassHeadNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 284, CPP14ParserRULE_classHeadName)
	p.EnterOuterAlt(localctx, 1)
	p.SetState(1709)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 238, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1708)
			p.nestedNameSpecifier(0)
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(1711)
		p.ClassName()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IClassVirtSpecifierContext is an interface to support dynamic dispatch.
type IClassVirtSpecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Final() antlr.TerminalNode

	// IsClassVirtSpecifierContext differentiates from other interfaces.
	IsClassVirtSpecifierContext()
}

type ClassVirtSpecifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassVirtSpecifierContext() *ClassVirtSpecifierContext {
	var p = new(ClassVirtSpecifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_classVirtSpecifier
	return p
}

func InitEmptyClassVirtSpecifierContext(p *ClassVirtSpecifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_classVirtSpecifier
}

func (*ClassVirtSpecifierContext) IsClassVirtSpecifierContext() {}

func NewClassVirtSpecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassVirtSpecifierContext {
	var p = new(ClassVirtSpecifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_classVirtSpecifier

	return p
}

func (s *ClassVirtSpecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *ClassVirtSpecifierContext) Final() antlr.TerminalNode {
	return s.GetToken(CPP14ParserFinal, 0)
}

func (s *ClassVirtSpecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassVirtSpecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClassVirtSpecifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitClassVirtSpecifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) ClassVirtSpecifier() (localctx IClassVirtSpecifierContext) {
	localctx = NewClassVirtSpecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 286, CPP14ParserRULE_classVirtSpecifier)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1713)
		p.Match(CPP14ParserFinal)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IClassKeyContext is an interface to support dynamic dispatch.
type IClassKeyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Class() antlr.TerminalNode
	Struct() antlr.TerminalNode

	// IsClassKeyContext differentiates from other interfaces.
	IsClassKeyContext()
}

type ClassKeyContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassKeyContext() *ClassKeyContext {
	var p = new(ClassKeyContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_classKey
	return p
}

func InitEmptyClassKeyContext(p *ClassKeyContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_classKey
}

func (*ClassKeyContext) IsClassKeyContext() {}

func NewClassKeyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassKeyContext {
	var p = new(ClassKeyContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_classKey

	return p
}

func (s *ClassKeyContext) GetParser() antlr.Parser { return s.parser }

func (s *ClassKeyContext) Class() antlr.TerminalNode {
	return s.GetToken(CPP14ParserClass, 0)
}

func (s *ClassKeyContext) Struct() antlr.TerminalNode {
	return s.GetToken(CPP14ParserStruct, 0)
}

func (s *ClassKeyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassKeyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClassKeyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitClassKey(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) ClassKey() (localctx IClassKeyContext) {
	localctx = NewClassKeyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 288, CPP14ParserRULE_classKey)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1715)
		_la = p.GetTokenStream().LA(1)

		if !(_la == CPP14ParserClass || _la == CPP14ParserStruct) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMemberSpecificationContext is an interface to support dynamic dispatch.
type IMemberSpecificationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllMemberdeclaration() []IMemberdeclarationContext
	Memberdeclaration(i int) IMemberdeclarationContext
	AllAccessSpecifier() []IAccessSpecifierContext
	AccessSpecifier(i int) IAccessSpecifierContext
	AllColon() []antlr.TerminalNode
	Colon(i int) antlr.TerminalNode

	// IsMemberSpecificationContext differentiates from other interfaces.
	IsMemberSpecificationContext()
}

type MemberSpecificationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMemberSpecificationContext() *MemberSpecificationContext {
	var p = new(MemberSpecificationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_memberSpecification
	return p
}

func InitEmptyMemberSpecificationContext(p *MemberSpecificationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_memberSpecification
}

func (*MemberSpecificationContext) IsMemberSpecificationContext() {}

func NewMemberSpecificationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MemberSpecificationContext {
	var p = new(MemberSpecificationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_memberSpecification

	return p
}

func (s *MemberSpecificationContext) GetParser() antlr.Parser { return s.parser }

func (s *MemberSpecificationContext) AllMemberdeclaration() []IMemberdeclarationContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IMemberdeclarationContext); ok {
			len++
		}
	}

	tst := make([]IMemberdeclarationContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IMemberdeclarationContext); ok {
			tst[i] = t.(IMemberdeclarationContext)
			i++
		}
	}

	return tst
}

func (s *MemberSpecificationContext) Memberdeclaration(i int) IMemberdeclarationContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMemberdeclarationContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMemberdeclarationContext)
}

func (s *MemberSpecificationContext) AllAccessSpecifier() []IAccessSpecifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAccessSpecifierContext); ok {
			len++
		}
	}

	tst := make([]IAccessSpecifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAccessSpecifierContext); ok {
			tst[i] = t.(IAccessSpecifierContext)
			i++
		}
	}

	return tst
}

func (s *MemberSpecificationContext) AccessSpecifier(i int) IAccessSpecifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAccessSpecifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAccessSpecifierContext)
}

func (s *MemberSpecificationContext) AllColon() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserColon)
}

func (s *MemberSpecificationContext) Colon(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserColon, i)
}

func (s *MemberSpecificationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MemberSpecificationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MemberSpecificationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitMemberSpecification(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) MemberSpecification() (localctx IMemberSpecificationContext) {
	localctx = NewMemberSpecificationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 290, CPP14ParserRULE_memberSpecification)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1721)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = ((int64((_la-10)) & ^0x3f) == 0 && ((int64(1)<<(_la-10))&1543877313594212121) != 0) || ((int64((_la-74)) & ^0x3f) == 0 && ((int64(1)<<(_la-74))&463888353847684093) != 0) {
		p.SetState(1721)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetTokenStream().LA(1) {
		case CPP14ParserAlignas, CPP14ParserAuto, CPP14ParserBool, CPP14ParserChar, CPP14ParserChar16, CPP14ParserChar32, CPP14ParserClass, CPP14ParserConst, CPP14ParserConstexpr, CPP14ParserDecltype, CPP14ParserDouble, CPP14ParserEnum, CPP14ParserExplicit, CPP14ParserExtern, CPP14ParserFloat, CPP14ParserFriend, CPP14ParserInline, CPP14ParserInt, CPP14ParserLong, CPP14ParserMutable, CPP14ParserOperator, CPP14ParserRegister, CPP14ParserShort, CPP14ParserSigned, CPP14ParserStatic, CPP14ParserStatic_assert, CPP14ParserStruct, CPP14ParserTemplate, CPP14ParserThread_local, CPP14ParserTypedef, CPP14ParserTypename_, CPP14ParserUnion, CPP14ParserUnsigned, CPP14ParserUsing, CPP14ParserVirtual, CPP14ParserVoid, CPP14ParserVolatile, CPP14ParserWchar, CPP14ParserLeftParen, CPP14ParserLeftBracket, CPP14ParserStar, CPP14ParserAnd, CPP14ParserTilde, CPP14ParserAndAnd, CPP14ParserColon, CPP14ParserDoublecolon, CPP14ParserSemi, CPP14ParserEllipsis, CPP14ParserIdentifier:
			{
				p.SetState(1717)
				p.Memberdeclaration()
			}

		case CPP14ParserPrivate, CPP14ParserProtected, CPP14ParserPublic:
			{
				p.SetState(1718)
				p.AccessSpecifier()
			}
			{
				p.SetState(1719)
				p.Match(CPP14ParserColon)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}

		p.SetState(1723)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMemberdeclarationContext is an interface to support dynamic dispatch.
type IMemberdeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Semi() antlr.TerminalNode
	AttributeSpecifierSeq() IAttributeSpecifierSeqContext
	DeclSpecifierSeq() IDeclSpecifierSeqContext
	MemberDeclaratorList() IMemberDeclaratorListContext
	FunctionDefinition() IFunctionDefinitionContext
	UsingDeclaration() IUsingDeclarationContext
	StaticAssertDeclaration() IStaticAssertDeclarationContext
	TemplateDeclaration() ITemplateDeclarationContext
	AliasDeclaration() IAliasDeclarationContext
	BlankDeclaration() IBlankDeclarationContext

	// IsMemberdeclarationContext differentiates from other interfaces.
	IsMemberdeclarationContext()
}

type MemberdeclarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMemberdeclarationContext() *MemberdeclarationContext {
	var p = new(MemberdeclarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_memberdeclaration
	return p
}

func InitEmptyMemberdeclarationContext(p *MemberdeclarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_memberdeclaration
}

func (*MemberdeclarationContext) IsMemberdeclarationContext() {}

func NewMemberdeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MemberdeclarationContext {
	var p = new(MemberdeclarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_memberdeclaration

	return p
}

func (s *MemberdeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *MemberdeclarationContext) Semi() antlr.TerminalNode {
	return s.GetToken(CPP14ParserSemi, 0)
}

func (s *MemberdeclarationContext) AttributeSpecifierSeq() IAttributeSpecifierSeqContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributeSpecifierSeqContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributeSpecifierSeqContext)
}

func (s *MemberdeclarationContext) DeclSpecifierSeq() IDeclSpecifierSeqContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDeclSpecifierSeqContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDeclSpecifierSeqContext)
}

func (s *MemberdeclarationContext) MemberDeclaratorList() IMemberDeclaratorListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMemberDeclaratorListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMemberDeclaratorListContext)
}

func (s *MemberdeclarationContext) FunctionDefinition() IFunctionDefinitionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunctionDefinitionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunctionDefinitionContext)
}

func (s *MemberdeclarationContext) UsingDeclaration() IUsingDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUsingDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUsingDeclarationContext)
}

func (s *MemberdeclarationContext) StaticAssertDeclaration() IStaticAssertDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStaticAssertDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStaticAssertDeclarationContext)
}

func (s *MemberdeclarationContext) TemplateDeclaration() ITemplateDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplateDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplateDeclarationContext)
}

func (s *MemberdeclarationContext) AliasDeclaration() IAliasDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAliasDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAliasDeclarationContext)
}

func (s *MemberdeclarationContext) BlankDeclaration() IBlankDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlankDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlankDeclarationContext)
}

func (s *MemberdeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MemberdeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MemberdeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitMemberdeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) Memberdeclaration() (localctx IMemberdeclarationContext) {
	localctx = NewMemberdeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 292, CPP14ParserRULE_memberdeclaration)
	var _la int

	p.SetState(1741)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 244, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(1726)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 241, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1725)
				p.AttributeSpecifierSeq()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(1729)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 242, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1728)
				p.DeclSpecifierSeq()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(1732)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&4503599694480384) != 0) || ((int64((_la-85)) & ^0x3f) == 0 && ((int64(1)<<(_la-85))&217711892254981) != 0) {
			{
				p.SetState(1731)
				p.MemberDeclaratorList()
			}

		}
		{
			p.SetState(1734)
			p.Match(CPP14ParserSemi)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1735)
			p.FunctionDefinition()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1736)
			p.UsingDeclaration()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1737)
			p.StaticAssertDeclaration()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1738)
			p.TemplateDeclaration()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1739)
			p.AliasDeclaration()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1740)
			p.BlankDeclaration()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMemberDeclaratorListContext is an interface to support dynamic dispatch.
type IMemberDeclaratorListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllMemberDeclarator() []IMemberDeclaratorContext
	MemberDeclarator(i int) IMemberDeclaratorContext
	AllComma() []antlr.TerminalNode
	Comma(i int) antlr.TerminalNode

	// IsMemberDeclaratorListContext differentiates from other interfaces.
	IsMemberDeclaratorListContext()
}

type MemberDeclaratorListContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMemberDeclaratorListContext() *MemberDeclaratorListContext {
	var p = new(MemberDeclaratorListContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_memberDeclaratorList
	return p
}

func InitEmptyMemberDeclaratorListContext(p *MemberDeclaratorListContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_memberDeclaratorList
}

func (*MemberDeclaratorListContext) IsMemberDeclaratorListContext() {}

func NewMemberDeclaratorListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MemberDeclaratorListContext {
	var p = new(MemberDeclaratorListContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_memberDeclaratorList

	return p
}

func (s *MemberDeclaratorListContext) GetParser() antlr.Parser { return s.parser }

func (s *MemberDeclaratorListContext) AllMemberDeclarator() []IMemberDeclaratorContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IMemberDeclaratorContext); ok {
			len++
		}
	}

	tst := make([]IMemberDeclaratorContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IMemberDeclaratorContext); ok {
			tst[i] = t.(IMemberDeclaratorContext)
			i++
		}
	}

	return tst
}

func (s *MemberDeclaratorListContext) MemberDeclarator(i int) IMemberDeclaratorContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMemberDeclaratorContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMemberDeclaratorContext)
}

func (s *MemberDeclaratorListContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserComma)
}

func (s *MemberDeclaratorListContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserComma, i)
}

func (s *MemberDeclaratorListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MemberDeclaratorListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MemberDeclaratorListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitMemberDeclaratorList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) MemberDeclaratorList() (localctx IMemberDeclaratorListContext) {
	localctx = NewMemberDeclaratorListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 294, CPP14ParserRULE_memberDeclaratorList)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1743)
		p.MemberDeclarator()
	}
	p.SetState(1748)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == CPP14ParserComma {
		{
			p.SetState(1744)
			p.Match(CPP14ParserComma)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1745)
			p.MemberDeclarator()
		}

		p.SetState(1750)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMemberDeclaratorContext is an interface to support dynamic dispatch.
type IMemberDeclaratorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Declarator() IDeclaratorContext
	VirtualSpecifierSeq() IVirtualSpecifierSeqContext
	BraceOrEqualInitializer() IBraceOrEqualInitializerContext
	Colon() antlr.TerminalNode
	ConstantExpression() IConstantExpressionContext
	Identifier() antlr.TerminalNode
	AttributeSpecifierSeq() IAttributeSpecifierSeqContext

	// IsMemberDeclaratorContext differentiates from other interfaces.
	IsMemberDeclaratorContext()
}

type MemberDeclaratorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMemberDeclaratorContext() *MemberDeclaratorContext {
	var p = new(MemberDeclaratorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_memberDeclarator
	return p
}

func InitEmptyMemberDeclaratorContext(p *MemberDeclaratorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_memberDeclarator
}

func (*MemberDeclaratorContext) IsMemberDeclaratorContext() {}

func NewMemberDeclaratorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MemberDeclaratorContext {
	var p = new(MemberDeclaratorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_memberDeclarator

	return p
}

func (s *MemberDeclaratorContext) GetParser() antlr.Parser { return s.parser }

func (s *MemberDeclaratorContext) Declarator() IDeclaratorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDeclaratorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDeclaratorContext)
}

func (s *MemberDeclaratorContext) VirtualSpecifierSeq() IVirtualSpecifierSeqContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVirtualSpecifierSeqContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVirtualSpecifierSeqContext)
}

func (s *MemberDeclaratorContext) BraceOrEqualInitializer() IBraceOrEqualInitializerContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBraceOrEqualInitializerContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBraceOrEqualInitializerContext)
}

func (s *MemberDeclaratorContext) Colon() antlr.TerminalNode {
	return s.GetToken(CPP14ParserColon, 0)
}

func (s *MemberDeclaratorContext) ConstantExpression() IConstantExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConstantExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConstantExpressionContext)
}

func (s *MemberDeclaratorContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *MemberDeclaratorContext) AttributeSpecifierSeq() IAttributeSpecifierSeqContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributeSpecifierSeqContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributeSpecifierSeqContext)
}

func (s *MemberDeclaratorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MemberDeclaratorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MemberDeclaratorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitMemberDeclarator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) MemberDeclarator() (localctx IMemberDeclaratorContext) {
	localctx = NewMemberDeclaratorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 296, CPP14ParserRULE_memberDeclarator)
	var _la int

	p.SetState(1768)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 251, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1751)
			p.Declarator()
		}
		p.SetState(1758)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 248, p.GetParserRuleContext()) {
		case 1:
			p.SetState(1753)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == CPP14ParserFinal || _la == CPP14ParserOverride {
				{
					p.SetState(1752)
					p.VirtualSpecifierSeq()
				}

			}

		case 2:
			p.SetState(1756)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == CPP14ParserLeftBrace || _la == CPP14ParserAssign {
				{
					p.SetState(1755)
					p.BraceOrEqualInitializer()
				}

			}

		case antlr.ATNInvalidAltNumber:
			goto errorExit
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(1761)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == CPP14ParserIdentifier {
			{
				p.SetState(1760)
				p.Match(CPP14ParserIdentifier)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1764)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == CPP14ParserAlignas || _la == CPP14ParserLeftBracket {
			{
				p.SetState(1763)
				p.AttributeSpecifierSeq()
			}

		}
		{
			p.SetState(1766)
			p.Match(CPP14ParserColon)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1767)
			p.ConstantExpression()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IVirtualSpecifierSeqContext is an interface to support dynamic dispatch.
type IVirtualSpecifierSeqContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllVirtualSpecifier() []IVirtualSpecifierContext
	VirtualSpecifier(i int) IVirtualSpecifierContext

	// IsVirtualSpecifierSeqContext differentiates from other interfaces.
	IsVirtualSpecifierSeqContext()
}

type VirtualSpecifierSeqContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVirtualSpecifierSeqContext() *VirtualSpecifierSeqContext {
	var p = new(VirtualSpecifierSeqContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_virtualSpecifierSeq
	return p
}

func InitEmptyVirtualSpecifierSeqContext(p *VirtualSpecifierSeqContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_virtualSpecifierSeq
}

func (*VirtualSpecifierSeqContext) IsVirtualSpecifierSeqContext() {}

func NewVirtualSpecifierSeqContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VirtualSpecifierSeqContext {
	var p = new(VirtualSpecifierSeqContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_virtualSpecifierSeq

	return p
}

func (s *VirtualSpecifierSeqContext) GetParser() antlr.Parser { return s.parser }

func (s *VirtualSpecifierSeqContext) AllVirtualSpecifier() []IVirtualSpecifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IVirtualSpecifierContext); ok {
			len++
		}
	}

	tst := make([]IVirtualSpecifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IVirtualSpecifierContext); ok {
			tst[i] = t.(IVirtualSpecifierContext)
			i++
		}
	}

	return tst
}

func (s *VirtualSpecifierSeqContext) VirtualSpecifier(i int) IVirtualSpecifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVirtualSpecifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVirtualSpecifierContext)
}

func (s *VirtualSpecifierSeqContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VirtualSpecifierSeqContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VirtualSpecifierSeqContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitVirtualSpecifierSeq(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) VirtualSpecifierSeq() (localctx IVirtualSpecifierSeqContext) {
	localctx = NewVirtualSpecifierSeqContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 298, CPP14ParserRULE_virtualSpecifierSeq)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1771)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == CPP14ParserFinal || _la == CPP14ParserOverride {
		{
			p.SetState(1770)
			p.VirtualSpecifier()
		}

		p.SetState(1773)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IVirtualSpecifierContext is an interface to support dynamic dispatch.
type IVirtualSpecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Override() antlr.TerminalNode
	Final() antlr.TerminalNode

	// IsVirtualSpecifierContext differentiates from other interfaces.
	IsVirtualSpecifierContext()
}

type VirtualSpecifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVirtualSpecifierContext() *VirtualSpecifierContext {
	var p = new(VirtualSpecifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_virtualSpecifier
	return p
}

func InitEmptyVirtualSpecifierContext(p *VirtualSpecifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_virtualSpecifier
}

func (*VirtualSpecifierContext) IsVirtualSpecifierContext() {}

func NewVirtualSpecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VirtualSpecifierContext {
	var p = new(VirtualSpecifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_virtualSpecifier

	return p
}

func (s *VirtualSpecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *VirtualSpecifierContext) Override() antlr.TerminalNode {
	return s.GetToken(CPP14ParserOverride, 0)
}

func (s *VirtualSpecifierContext) Final() antlr.TerminalNode {
	return s.GetToken(CPP14ParserFinal, 0)
}

func (s *VirtualSpecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VirtualSpecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VirtualSpecifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitVirtualSpecifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) VirtualSpecifier() (localctx IVirtualSpecifierContext) {
	localctx = NewVirtualSpecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 300, CPP14ParserRULE_virtualSpecifier)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1775)
		_la = p.GetTokenStream().LA(1)

		if !(_la == CPP14ParserFinal || _la == CPP14ParserOverride) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBaseClauseContext is an interface to support dynamic dispatch.
type IBaseClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Colon() antlr.TerminalNode
	BaseSpecifierList() IBaseSpecifierListContext

	// IsBaseClauseContext differentiates from other interfaces.
	IsBaseClauseContext()
}

type BaseClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBaseClauseContext() *BaseClauseContext {
	var p = new(BaseClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_baseClause
	return p
}

func InitEmptyBaseClauseContext(p *BaseClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_baseClause
}

func (*BaseClauseContext) IsBaseClauseContext() {}

func NewBaseClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BaseClauseContext {
	var p = new(BaseClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_baseClause

	return p
}

func (s *BaseClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *BaseClauseContext) Colon() antlr.TerminalNode {
	return s.GetToken(CPP14ParserColon, 0)
}

func (s *BaseClauseContext) BaseSpecifierList() IBaseSpecifierListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBaseSpecifierListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBaseSpecifierListContext)
}

func (s *BaseClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BaseClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BaseClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitBaseClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) BaseClause() (localctx IBaseClauseContext) {
	localctx = NewBaseClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 302, CPP14ParserRULE_baseClause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1777)
		p.Match(CPP14ParserColon)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1778)
		p.BaseSpecifierList()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBaseSpecifierListContext is an interface to support dynamic dispatch.
type IBaseSpecifierListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllBaseSpecifier() []IBaseSpecifierContext
	BaseSpecifier(i int) IBaseSpecifierContext
	AllEllipsis() []antlr.TerminalNode
	Ellipsis(i int) antlr.TerminalNode
	AllComma() []antlr.TerminalNode
	Comma(i int) antlr.TerminalNode

	// IsBaseSpecifierListContext differentiates from other interfaces.
	IsBaseSpecifierListContext()
}

type BaseSpecifierListContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBaseSpecifierListContext() *BaseSpecifierListContext {
	var p = new(BaseSpecifierListContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_baseSpecifierList
	return p
}

func InitEmptyBaseSpecifierListContext(p *BaseSpecifierListContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_baseSpecifierList
}

func (*BaseSpecifierListContext) IsBaseSpecifierListContext() {}

func NewBaseSpecifierListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BaseSpecifierListContext {
	var p = new(BaseSpecifierListContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_baseSpecifierList

	return p
}

func (s *BaseSpecifierListContext) GetParser() antlr.Parser { return s.parser }

func (s *BaseSpecifierListContext) AllBaseSpecifier() []IBaseSpecifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IBaseSpecifierContext); ok {
			len++
		}
	}

	tst := make([]IBaseSpecifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IBaseSpecifierContext); ok {
			tst[i] = t.(IBaseSpecifierContext)
			i++
		}
	}

	return tst
}

func (s *BaseSpecifierListContext) BaseSpecifier(i int) IBaseSpecifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBaseSpecifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBaseSpecifierContext)
}

func (s *BaseSpecifierListContext) AllEllipsis() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserEllipsis)
}

func (s *BaseSpecifierListContext) Ellipsis(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserEllipsis, i)
}

func (s *BaseSpecifierListContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserComma)
}

func (s *BaseSpecifierListContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserComma, i)
}

func (s *BaseSpecifierListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BaseSpecifierListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BaseSpecifierListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitBaseSpecifierList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) BaseSpecifierList() (localctx IBaseSpecifierListContext) {
	localctx = NewBaseSpecifierListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 304, CPP14ParserRULE_baseSpecifierList)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1780)
		p.BaseSpecifier()
	}
	p.SetState(1782)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserEllipsis {
		{
			p.SetState(1781)
			p.Match(CPP14ParserEllipsis)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(1791)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == CPP14ParserComma {
		{
			p.SetState(1784)
			p.Match(CPP14ParserComma)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1785)
			p.BaseSpecifier()
		}
		p.SetState(1787)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == CPP14ParserEllipsis {
			{
				p.SetState(1786)
				p.Match(CPP14ParserEllipsis)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}

		p.SetState(1793)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBaseSpecifierContext is an interface to support dynamic dispatch.
type IBaseSpecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	BaseTypeSpecifier() IBaseTypeSpecifierContext
	Virtual() antlr.TerminalNode
	AccessSpecifier() IAccessSpecifierContext
	AttributeSpecifierSeq() IAttributeSpecifierSeqContext

	// IsBaseSpecifierContext differentiates from other interfaces.
	IsBaseSpecifierContext()
}

type BaseSpecifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBaseSpecifierContext() *BaseSpecifierContext {
	var p = new(BaseSpecifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_baseSpecifier
	return p
}

func InitEmptyBaseSpecifierContext(p *BaseSpecifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_baseSpecifier
}

func (*BaseSpecifierContext) IsBaseSpecifierContext() {}

func NewBaseSpecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BaseSpecifierContext {
	var p = new(BaseSpecifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_baseSpecifier

	return p
}

func (s *BaseSpecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *BaseSpecifierContext) BaseTypeSpecifier() IBaseTypeSpecifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBaseTypeSpecifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBaseTypeSpecifierContext)
}

func (s *BaseSpecifierContext) Virtual() antlr.TerminalNode {
	return s.GetToken(CPP14ParserVirtual, 0)
}

func (s *BaseSpecifierContext) AccessSpecifier() IAccessSpecifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAccessSpecifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAccessSpecifierContext)
}

func (s *BaseSpecifierContext) AttributeSpecifierSeq() IAttributeSpecifierSeqContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributeSpecifierSeqContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributeSpecifierSeqContext)
}

func (s *BaseSpecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BaseSpecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BaseSpecifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitBaseSpecifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) BaseSpecifier() (localctx IBaseSpecifierContext) {
	localctx = NewBaseSpecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 306, CPP14ParserRULE_baseSpecifier)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1795)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserAlignas || _la == CPP14ParserLeftBracket {
		{
			p.SetState(1794)
			p.AttributeSpecifierSeq()
		}

	}
	p.SetState(1809)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserDecltype, CPP14ParserDoublecolon, CPP14ParserIdentifier:
		{
			p.SetState(1797)
			p.BaseTypeSpecifier()
		}

	case CPP14ParserVirtual:
		{
			p.SetState(1798)
			p.Match(CPP14ParserVirtual)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1800)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&126100789566373888) != 0 {
			{
				p.SetState(1799)
				p.AccessSpecifier()
			}

		}
		{
			p.SetState(1802)
			p.BaseTypeSpecifier()
		}

	case CPP14ParserPrivate, CPP14ParserProtected, CPP14ParserPublic:
		{
			p.SetState(1803)
			p.AccessSpecifier()
		}
		p.SetState(1805)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == CPP14ParserVirtual {
			{
				p.SetState(1804)
				p.Match(CPP14ParserVirtual)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(1807)
			p.BaseTypeSpecifier()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IClassOrDeclTypeContext is an interface to support dynamic dispatch.
type IClassOrDeclTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ClassName() IClassNameContext
	NestedNameSpecifier() INestedNameSpecifierContext
	DecltypeSpecifier() IDecltypeSpecifierContext

	// IsClassOrDeclTypeContext differentiates from other interfaces.
	IsClassOrDeclTypeContext()
}

type ClassOrDeclTypeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClassOrDeclTypeContext() *ClassOrDeclTypeContext {
	var p = new(ClassOrDeclTypeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_classOrDeclType
	return p
}

func InitEmptyClassOrDeclTypeContext(p *ClassOrDeclTypeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_classOrDeclType
}

func (*ClassOrDeclTypeContext) IsClassOrDeclTypeContext() {}

func NewClassOrDeclTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClassOrDeclTypeContext {
	var p = new(ClassOrDeclTypeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_classOrDeclType

	return p
}

func (s *ClassOrDeclTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *ClassOrDeclTypeContext) ClassName() IClassNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClassNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClassNameContext)
}

func (s *ClassOrDeclTypeContext) NestedNameSpecifier() INestedNameSpecifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INestedNameSpecifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INestedNameSpecifierContext)
}

func (s *ClassOrDeclTypeContext) DecltypeSpecifier() IDecltypeSpecifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDecltypeSpecifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDecltypeSpecifierContext)
}

func (s *ClassOrDeclTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClassOrDeclTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClassOrDeclTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitClassOrDeclType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) ClassOrDeclType() (localctx IClassOrDeclTypeContext) {
	localctx = NewClassOrDeclTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 308, CPP14ParserRULE_classOrDeclType)
	p.SetState(1816)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 261, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(1812)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 260, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1811)
				p.nestedNameSpecifier(0)
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		{
			p.SetState(1814)
			p.ClassName()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1815)
			p.DecltypeSpecifier()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBaseTypeSpecifierContext is an interface to support dynamic dispatch.
type IBaseTypeSpecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ClassOrDeclType() IClassOrDeclTypeContext

	// IsBaseTypeSpecifierContext differentiates from other interfaces.
	IsBaseTypeSpecifierContext()
}

type BaseTypeSpecifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBaseTypeSpecifierContext() *BaseTypeSpecifierContext {
	var p = new(BaseTypeSpecifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_baseTypeSpecifier
	return p
}

func InitEmptyBaseTypeSpecifierContext(p *BaseTypeSpecifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_baseTypeSpecifier
}

func (*BaseTypeSpecifierContext) IsBaseTypeSpecifierContext() {}

func NewBaseTypeSpecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BaseTypeSpecifierContext {
	var p = new(BaseTypeSpecifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_baseTypeSpecifier

	return p
}

func (s *BaseTypeSpecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *BaseTypeSpecifierContext) ClassOrDeclType() IClassOrDeclTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClassOrDeclTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClassOrDeclTypeContext)
}

func (s *BaseTypeSpecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BaseTypeSpecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BaseTypeSpecifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitBaseTypeSpecifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) BaseTypeSpecifier() (localctx IBaseTypeSpecifierContext) {
	localctx = NewBaseTypeSpecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 310, CPP14ParserRULE_baseTypeSpecifier)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1818)
		p.ClassOrDeclType()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAccessSpecifierContext is an interface to support dynamic dispatch.
type IAccessSpecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Private() antlr.TerminalNode
	Protected() antlr.TerminalNode
	Public() antlr.TerminalNode

	// IsAccessSpecifierContext differentiates from other interfaces.
	IsAccessSpecifierContext()
}

type AccessSpecifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAccessSpecifierContext() *AccessSpecifierContext {
	var p = new(AccessSpecifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_accessSpecifier
	return p
}

func InitEmptyAccessSpecifierContext(p *AccessSpecifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_accessSpecifier
}

func (*AccessSpecifierContext) IsAccessSpecifierContext() {}

func NewAccessSpecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AccessSpecifierContext {
	var p = new(AccessSpecifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_accessSpecifier

	return p
}

func (s *AccessSpecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *AccessSpecifierContext) Private() antlr.TerminalNode {
	return s.GetToken(CPP14ParserPrivate, 0)
}

func (s *AccessSpecifierContext) Protected() antlr.TerminalNode {
	return s.GetToken(CPP14ParserProtected, 0)
}

func (s *AccessSpecifierContext) Public() antlr.TerminalNode {
	return s.GetToken(CPP14ParserPublic, 0)
}

func (s *AccessSpecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AccessSpecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AccessSpecifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitAccessSpecifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) AccessSpecifier() (localctx IAccessSpecifierContext) {
	localctx = NewAccessSpecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 312, CPP14ParserRULE_accessSpecifier)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1820)
		_la = p.GetTokenStream().LA(1)

		if !((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&126100789566373888) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IConversionFunctionIdContext is an interface to support dynamic dispatch.
type IConversionFunctionIdContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Operator() antlr.TerminalNode
	ConversionTypeId() IConversionTypeIdContext

	// IsConversionFunctionIdContext differentiates from other interfaces.
	IsConversionFunctionIdContext()
}

type ConversionFunctionIdContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConversionFunctionIdContext() *ConversionFunctionIdContext {
	var p = new(ConversionFunctionIdContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_conversionFunctionId
	return p
}

func InitEmptyConversionFunctionIdContext(p *ConversionFunctionIdContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_conversionFunctionId
}

func (*ConversionFunctionIdContext) IsConversionFunctionIdContext() {}

func NewConversionFunctionIdContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConversionFunctionIdContext {
	var p = new(ConversionFunctionIdContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_conversionFunctionId

	return p
}

func (s *ConversionFunctionIdContext) GetParser() antlr.Parser { return s.parser }

func (s *ConversionFunctionIdContext) Operator() antlr.TerminalNode {
	return s.GetToken(CPP14ParserOperator, 0)
}

func (s *ConversionFunctionIdContext) ConversionTypeId() IConversionTypeIdContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConversionTypeIdContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConversionTypeIdContext)
}

func (s *ConversionFunctionIdContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConversionFunctionIdContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConversionFunctionIdContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitConversionFunctionId(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) ConversionFunctionId() (localctx IConversionFunctionIdContext) {
	localctx = NewConversionFunctionIdContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 314, CPP14ParserRULE_conversionFunctionId)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1822)
		p.Match(CPP14ParserOperator)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1823)
		p.ConversionTypeId()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IConversionTypeIdContext is an interface to support dynamic dispatch.
type IConversionTypeIdContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	TypeSpecifierSeq() ITypeSpecifierSeqContext
	ConversionDeclarator() IConversionDeclaratorContext

	// IsConversionTypeIdContext differentiates from other interfaces.
	IsConversionTypeIdContext()
}

type ConversionTypeIdContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConversionTypeIdContext() *ConversionTypeIdContext {
	var p = new(ConversionTypeIdContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_conversionTypeId
	return p
}

func InitEmptyConversionTypeIdContext(p *ConversionTypeIdContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_conversionTypeId
}

func (*ConversionTypeIdContext) IsConversionTypeIdContext() {}

func NewConversionTypeIdContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConversionTypeIdContext {
	var p = new(ConversionTypeIdContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_conversionTypeId

	return p
}

func (s *ConversionTypeIdContext) GetParser() antlr.Parser { return s.parser }

func (s *ConversionTypeIdContext) TypeSpecifierSeq() ITypeSpecifierSeqContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeSpecifierSeqContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeSpecifierSeqContext)
}

func (s *ConversionTypeIdContext) ConversionDeclarator() IConversionDeclaratorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConversionDeclaratorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConversionDeclaratorContext)
}

func (s *ConversionTypeIdContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConversionTypeIdContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConversionTypeIdContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitConversionTypeId(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) ConversionTypeId() (localctx IConversionTypeIdContext) {
	localctx = NewConversionTypeIdContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 316, CPP14ParserRULE_conversionTypeId)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1825)
		p.TypeSpecifierSeq()
	}
	p.SetState(1827)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 262, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1826)
			p.ConversionDeclarator()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IConversionDeclaratorContext is an interface to support dynamic dispatch.
type IConversionDeclaratorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	PointerOperator() IPointerOperatorContext
	ConversionDeclarator() IConversionDeclaratorContext

	// IsConversionDeclaratorContext differentiates from other interfaces.
	IsConversionDeclaratorContext()
}

type ConversionDeclaratorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConversionDeclaratorContext() *ConversionDeclaratorContext {
	var p = new(ConversionDeclaratorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_conversionDeclarator
	return p
}

func InitEmptyConversionDeclaratorContext(p *ConversionDeclaratorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_conversionDeclarator
}

func (*ConversionDeclaratorContext) IsConversionDeclaratorContext() {}

func NewConversionDeclaratorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConversionDeclaratorContext {
	var p = new(ConversionDeclaratorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_conversionDeclarator

	return p
}

func (s *ConversionDeclaratorContext) GetParser() antlr.Parser { return s.parser }

func (s *ConversionDeclaratorContext) PointerOperator() IPointerOperatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPointerOperatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPointerOperatorContext)
}

func (s *ConversionDeclaratorContext) ConversionDeclarator() IConversionDeclaratorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConversionDeclaratorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConversionDeclaratorContext)
}

func (s *ConversionDeclaratorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConversionDeclaratorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConversionDeclaratorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitConversionDeclarator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) ConversionDeclarator() (localctx IConversionDeclaratorContext) {
	localctx = NewConversionDeclaratorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 318, CPP14ParserRULE_conversionDeclarator)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1829)
		p.PointerOperator()
	}
	p.SetState(1831)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 263, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1830)
			p.ConversionDeclarator()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IConstructorInitializerContext is an interface to support dynamic dispatch.
type IConstructorInitializerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Colon() antlr.TerminalNode
	MemInitializerList() IMemInitializerListContext

	// IsConstructorInitializerContext differentiates from other interfaces.
	IsConstructorInitializerContext()
}

type ConstructorInitializerContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstructorInitializerContext() *ConstructorInitializerContext {
	var p = new(ConstructorInitializerContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_constructorInitializer
	return p
}

func InitEmptyConstructorInitializerContext(p *ConstructorInitializerContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_constructorInitializer
}

func (*ConstructorInitializerContext) IsConstructorInitializerContext() {}

func NewConstructorInitializerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConstructorInitializerContext {
	var p = new(ConstructorInitializerContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_constructorInitializer

	return p
}

func (s *ConstructorInitializerContext) GetParser() antlr.Parser { return s.parser }

func (s *ConstructorInitializerContext) Colon() antlr.TerminalNode {
	return s.GetToken(CPP14ParserColon, 0)
}

func (s *ConstructorInitializerContext) MemInitializerList() IMemInitializerListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMemInitializerListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMemInitializerListContext)
}

func (s *ConstructorInitializerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstructorInitializerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConstructorInitializerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitConstructorInitializer(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) ConstructorInitializer() (localctx IConstructorInitializerContext) {
	localctx = NewConstructorInitializerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 320, CPP14ParserRULE_constructorInitializer)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1833)
		p.Match(CPP14ParserColon)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1834)
		p.MemInitializerList()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMemInitializerListContext is an interface to support dynamic dispatch.
type IMemInitializerListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllMemInitializer() []IMemInitializerContext
	MemInitializer(i int) IMemInitializerContext
	AllEllipsis() []antlr.TerminalNode
	Ellipsis(i int) antlr.TerminalNode
	AllComma() []antlr.TerminalNode
	Comma(i int) antlr.TerminalNode

	// IsMemInitializerListContext differentiates from other interfaces.
	IsMemInitializerListContext()
}

type MemInitializerListContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMemInitializerListContext() *MemInitializerListContext {
	var p = new(MemInitializerListContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_memInitializerList
	return p
}

func InitEmptyMemInitializerListContext(p *MemInitializerListContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_memInitializerList
}

func (*MemInitializerListContext) IsMemInitializerListContext() {}

func NewMemInitializerListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MemInitializerListContext {
	var p = new(MemInitializerListContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_memInitializerList

	return p
}

func (s *MemInitializerListContext) GetParser() antlr.Parser { return s.parser }

func (s *MemInitializerListContext) AllMemInitializer() []IMemInitializerContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IMemInitializerContext); ok {
			len++
		}
	}

	tst := make([]IMemInitializerContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IMemInitializerContext); ok {
			tst[i] = t.(IMemInitializerContext)
			i++
		}
	}

	return tst
}

func (s *MemInitializerListContext) MemInitializer(i int) IMemInitializerContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMemInitializerContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMemInitializerContext)
}

func (s *MemInitializerListContext) AllEllipsis() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserEllipsis)
}

func (s *MemInitializerListContext) Ellipsis(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserEllipsis, i)
}

func (s *MemInitializerListContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserComma)
}

func (s *MemInitializerListContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserComma, i)
}

func (s *MemInitializerListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MemInitializerListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MemInitializerListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitMemInitializerList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) MemInitializerList() (localctx IMemInitializerListContext) {
	localctx = NewMemInitializerListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 322, CPP14ParserRULE_memInitializerList)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1836)
		p.MemInitializer()
	}
	p.SetState(1838)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserEllipsis {
		{
			p.SetState(1837)
			p.Match(CPP14ParserEllipsis)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(1847)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == CPP14ParserComma {
		{
			p.SetState(1840)
			p.Match(CPP14ParserComma)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1841)
			p.MemInitializer()
		}
		p.SetState(1843)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == CPP14ParserEllipsis {
			{
				p.SetState(1842)
				p.Match(CPP14ParserEllipsis)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}

		p.SetState(1849)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMemInitializerContext is an interface to support dynamic dispatch.
type IMemInitializerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Meminitializerid() IMeminitializeridContext
	LeftParen() antlr.TerminalNode
	RightParen() antlr.TerminalNode
	BracedInitList() IBracedInitListContext
	ExpressionList() IExpressionListContext

	// IsMemInitializerContext differentiates from other interfaces.
	IsMemInitializerContext()
}

type MemInitializerContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMemInitializerContext() *MemInitializerContext {
	var p = new(MemInitializerContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_memInitializer
	return p
}

func InitEmptyMemInitializerContext(p *MemInitializerContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_memInitializer
}

func (*MemInitializerContext) IsMemInitializerContext() {}

func NewMemInitializerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MemInitializerContext {
	var p = new(MemInitializerContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_memInitializer

	return p
}

func (s *MemInitializerContext) GetParser() antlr.Parser { return s.parser }

func (s *MemInitializerContext) Meminitializerid() IMeminitializeridContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMeminitializeridContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMeminitializeridContext)
}

func (s *MemInitializerContext) LeftParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, 0)
}

func (s *MemInitializerContext) RightParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, 0)
}

func (s *MemInitializerContext) BracedInitList() IBracedInitListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBracedInitListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBracedInitListContext)
}

func (s *MemInitializerContext) ExpressionList() IExpressionListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *MemInitializerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MemInitializerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MemInitializerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitMemInitializer(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) MemInitializer() (localctx IMemInitializerContext) {
	localctx = NewMemInitializerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 324, CPP14ParserRULE_memInitializer)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1850)
		p.Meminitializerid()
	}
	p.SetState(1857)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserLeftParen:
		{
			p.SetState(1851)
			p.Match(CPP14ParserLeftParen)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1853)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&8364979464334764286) != 0) || ((int64((_la-65)) & ^0x3f) == 0 && ((int64(1)<<(_la-65))&4719772474400910417) != 0) || _la == CPP14ParserIdentifier {
			{
				p.SetState(1852)
				p.ExpressionList()
			}

		}
		{
			p.SetState(1855)
			p.Match(CPP14ParserRightParen)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case CPP14ParserLeftBrace:
		{
			p.SetState(1856)
			p.BracedInitList()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMeminitializeridContext is an interface to support dynamic dispatch.
type IMeminitializeridContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ClassOrDeclType() IClassOrDeclTypeContext
	Identifier() antlr.TerminalNode

	// IsMeminitializeridContext differentiates from other interfaces.
	IsMeminitializeridContext()
}

type MeminitializeridContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMeminitializeridContext() *MeminitializeridContext {
	var p = new(MeminitializeridContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_meminitializerid
	return p
}

func InitEmptyMeminitializeridContext(p *MeminitializeridContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_meminitializerid
}

func (*MeminitializeridContext) IsMeminitializeridContext() {}

func NewMeminitializeridContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MeminitializeridContext {
	var p = new(MeminitializeridContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_meminitializerid

	return p
}

func (s *MeminitializeridContext) GetParser() antlr.Parser { return s.parser }

func (s *MeminitializeridContext) ClassOrDeclType() IClassOrDeclTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClassOrDeclTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClassOrDeclTypeContext)
}

func (s *MeminitializeridContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *MeminitializeridContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MeminitializeridContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MeminitializeridContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitMeminitializerid(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) Meminitializerid() (localctx IMeminitializeridContext) {
	localctx = NewMeminitializeridContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 326, CPP14ParserRULE_meminitializerid)
	p.SetState(1861)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 269, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1859)
			p.ClassOrDeclType()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1860)
			p.Match(CPP14ParserIdentifier)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOperatorFunctionIdContext is an interface to support dynamic dispatch.
type IOperatorFunctionIdContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Operator() antlr.TerminalNode
	TheOperator() ITheOperatorContext

	// IsOperatorFunctionIdContext differentiates from other interfaces.
	IsOperatorFunctionIdContext()
}

type OperatorFunctionIdContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOperatorFunctionIdContext() *OperatorFunctionIdContext {
	var p = new(OperatorFunctionIdContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_operatorFunctionId
	return p
}

func InitEmptyOperatorFunctionIdContext(p *OperatorFunctionIdContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_operatorFunctionId
}

func (*OperatorFunctionIdContext) IsOperatorFunctionIdContext() {}

func NewOperatorFunctionIdContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OperatorFunctionIdContext {
	var p = new(OperatorFunctionIdContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_operatorFunctionId

	return p
}

func (s *OperatorFunctionIdContext) GetParser() antlr.Parser { return s.parser }

func (s *OperatorFunctionIdContext) Operator() antlr.TerminalNode {
	return s.GetToken(CPP14ParserOperator, 0)
}

func (s *OperatorFunctionIdContext) TheOperator() ITheOperatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITheOperatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITheOperatorContext)
}

func (s *OperatorFunctionIdContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OperatorFunctionIdContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OperatorFunctionIdContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitOperatorFunctionId(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) OperatorFunctionId() (localctx IOperatorFunctionIdContext) {
	localctx = NewOperatorFunctionIdContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 328, CPP14ParserRULE_operatorFunctionId)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1863)
		p.Match(CPP14ParserOperator)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1864)
		p.TheOperator()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILiteralOperatorIdContext is an interface to support dynamic dispatch.
type ILiteralOperatorIdContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Operator() antlr.TerminalNode
	StringLiteral() antlr.TerminalNode
	Identifier() antlr.TerminalNode
	UserDefinedStringLiteral() antlr.TerminalNode

	// IsLiteralOperatorIdContext differentiates from other interfaces.
	IsLiteralOperatorIdContext()
}

type LiteralOperatorIdContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLiteralOperatorIdContext() *LiteralOperatorIdContext {
	var p = new(LiteralOperatorIdContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_literalOperatorId
	return p
}

func InitEmptyLiteralOperatorIdContext(p *LiteralOperatorIdContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_literalOperatorId
}

func (*LiteralOperatorIdContext) IsLiteralOperatorIdContext() {}

func NewLiteralOperatorIdContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LiteralOperatorIdContext {
	var p = new(LiteralOperatorIdContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_literalOperatorId

	return p
}

func (s *LiteralOperatorIdContext) GetParser() antlr.Parser { return s.parser }

func (s *LiteralOperatorIdContext) Operator() antlr.TerminalNode {
	return s.GetToken(CPP14ParserOperator, 0)
}

func (s *LiteralOperatorIdContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(CPP14ParserStringLiteral, 0)
}

func (s *LiteralOperatorIdContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *LiteralOperatorIdContext) UserDefinedStringLiteral() antlr.TerminalNode {
	return s.GetToken(CPP14ParserUserDefinedStringLiteral, 0)
}

func (s *LiteralOperatorIdContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LiteralOperatorIdContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LiteralOperatorIdContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitLiteralOperatorId(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) LiteralOperatorId() (localctx ILiteralOperatorIdContext) {
	localctx = NewLiteralOperatorIdContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 330, CPP14ParserRULE_literalOperatorId)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1866)
		p.Match(CPP14ParserOperator)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1870)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserStringLiteral:
		{
			p.SetState(1867)
			p.Match(CPP14ParserStringLiteral)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1868)
			p.Match(CPP14ParserIdentifier)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case CPP14ParserUserDefinedStringLiteral:
		{
			p.SetState(1869)
			p.Match(CPP14ParserUserDefinedStringLiteral)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITemplateDeclarationContext is an interface to support dynamic dispatch.
type ITemplateDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Template() antlr.TerminalNode
	Less() antlr.TerminalNode
	TemplateparameterList() ITemplateparameterListContext
	Greater() antlr.TerminalNode
	Declaration() IDeclarationContext

	// IsTemplateDeclarationContext differentiates from other interfaces.
	IsTemplateDeclarationContext()
}

type TemplateDeclarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplateDeclarationContext() *TemplateDeclarationContext {
	var p = new(TemplateDeclarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_templateDeclaration
	return p
}

func InitEmptyTemplateDeclarationContext(p *TemplateDeclarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_templateDeclaration
}

func (*TemplateDeclarationContext) IsTemplateDeclarationContext() {}

func NewTemplateDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplateDeclarationContext {
	var p = new(TemplateDeclarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_templateDeclaration

	return p
}

func (s *TemplateDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplateDeclarationContext) Template() antlr.TerminalNode {
	return s.GetToken(CPP14ParserTemplate, 0)
}

func (s *TemplateDeclarationContext) Less() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLess, 0)
}

func (s *TemplateDeclarationContext) TemplateparameterList() ITemplateparameterListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplateparameterListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplateparameterListContext)
}

func (s *TemplateDeclarationContext) Greater() antlr.TerminalNode {
	return s.GetToken(CPP14ParserGreater, 0)
}

func (s *TemplateDeclarationContext) Declaration() IDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDeclarationContext)
}

func (s *TemplateDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TemplateDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitTemplateDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) TemplateDeclaration() (localctx ITemplateDeclarationContext) {
	localctx = NewTemplateDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 332, CPP14ParserRULE_templateDeclaration)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1872)
		p.Match(CPP14ParserTemplate)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1873)
		p.Match(CPP14ParserLess)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1874)
		p.TemplateparameterList()
	}
	{
		p.SetState(1875)
		p.Match(CPP14ParserGreater)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1876)
		p.Declaration()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITemplateparameterListContext is an interface to support dynamic dispatch.
type ITemplateparameterListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllTemplateParameter() []ITemplateParameterContext
	TemplateParameter(i int) ITemplateParameterContext
	AllComma() []antlr.TerminalNode
	Comma(i int) antlr.TerminalNode

	// IsTemplateparameterListContext differentiates from other interfaces.
	IsTemplateparameterListContext()
}

type TemplateparameterListContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplateparameterListContext() *TemplateparameterListContext {
	var p = new(TemplateparameterListContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_templateparameterList
	return p
}

func InitEmptyTemplateparameterListContext(p *TemplateparameterListContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_templateparameterList
}

func (*TemplateparameterListContext) IsTemplateparameterListContext() {}

func NewTemplateparameterListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplateparameterListContext {
	var p = new(TemplateparameterListContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_templateparameterList

	return p
}

func (s *TemplateparameterListContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplateparameterListContext) AllTemplateParameter() []ITemplateParameterContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITemplateParameterContext); ok {
			len++
		}
	}

	tst := make([]ITemplateParameterContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITemplateParameterContext); ok {
			tst[i] = t.(ITemplateParameterContext)
			i++
		}
	}

	return tst
}

func (s *TemplateparameterListContext) TemplateParameter(i int) ITemplateParameterContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplateParameterContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplateParameterContext)
}

func (s *TemplateparameterListContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserComma)
}

func (s *TemplateparameterListContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserComma, i)
}

func (s *TemplateparameterListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateparameterListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TemplateparameterListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitTemplateparameterList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) TemplateparameterList() (localctx ITemplateparameterListContext) {
	localctx = NewTemplateparameterListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 334, CPP14ParserRULE_templateparameterList)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1878)
		p.TemplateParameter()
	}
	p.SetState(1883)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == CPP14ParserComma {
		{
			p.SetState(1879)
			p.Match(CPP14ParserComma)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1880)
			p.TemplateParameter()
		}

		p.SetState(1885)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITemplateParameterContext is an interface to support dynamic dispatch.
type ITemplateParameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	TypeParameter() ITypeParameterContext
	ParameterDeclaration() IParameterDeclarationContext

	// IsTemplateParameterContext differentiates from other interfaces.
	IsTemplateParameterContext()
}

type TemplateParameterContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplateParameterContext() *TemplateParameterContext {
	var p = new(TemplateParameterContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_templateParameter
	return p
}

func InitEmptyTemplateParameterContext(p *TemplateParameterContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_templateParameter
}

func (*TemplateParameterContext) IsTemplateParameterContext() {}

func NewTemplateParameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplateParameterContext {
	var p = new(TemplateParameterContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_templateParameter

	return p
}

func (s *TemplateParameterContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplateParameterContext) TypeParameter() ITypeParameterContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeParameterContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeParameterContext)
}

func (s *TemplateParameterContext) ParameterDeclaration() IParameterDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParameterDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParameterDeclarationContext)
}

func (s *TemplateParameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateParameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TemplateParameterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitTemplateParameter(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) TemplateParameter() (localctx ITemplateParameterContext) {
	localctx = NewTemplateParameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 336, CPP14ParserRULE_templateParameter)
	p.SetState(1888)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 272, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1886)
			p.TypeParameter()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1887)
			p.ParameterDeclaration()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITypeParameterContext is an interface to support dynamic dispatch.
type ITypeParameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Class() antlr.TerminalNode
	Typename_() antlr.TerminalNode
	Assign() antlr.TerminalNode
	TheTypeId() ITheTypeIdContext
	Template() antlr.TerminalNode
	Less() antlr.TerminalNode
	TemplateparameterList() ITemplateparameterListContext
	Greater() antlr.TerminalNode
	Ellipsis() antlr.TerminalNode
	Identifier() antlr.TerminalNode

	// IsTypeParameterContext differentiates from other interfaces.
	IsTypeParameterContext()
}

type TypeParameterContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeParameterContext() *TypeParameterContext {
	var p = new(TypeParameterContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_typeParameter
	return p
}

func InitEmptyTypeParameterContext(p *TypeParameterContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_typeParameter
}

func (*TypeParameterContext) IsTypeParameterContext() {}

func NewTypeParameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeParameterContext {
	var p = new(TypeParameterContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_typeParameter

	return p
}

func (s *TypeParameterContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeParameterContext) Class() antlr.TerminalNode {
	return s.GetToken(CPP14ParserClass, 0)
}

func (s *TypeParameterContext) Typename_() antlr.TerminalNode {
	return s.GetToken(CPP14ParserTypename_, 0)
}

func (s *TypeParameterContext) Assign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAssign, 0)
}

func (s *TypeParameterContext) TheTypeId() ITheTypeIdContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITheTypeIdContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITheTypeIdContext)
}

func (s *TypeParameterContext) Template() antlr.TerminalNode {
	return s.GetToken(CPP14ParserTemplate, 0)
}

func (s *TypeParameterContext) Less() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLess, 0)
}

func (s *TypeParameterContext) TemplateparameterList() ITemplateparameterListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplateparameterListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplateparameterListContext)
}

func (s *TypeParameterContext) Greater() antlr.TerminalNode {
	return s.GetToken(CPP14ParserGreater, 0)
}

func (s *TypeParameterContext) Ellipsis() antlr.TerminalNode {
	return s.GetToken(CPP14ParserEllipsis, 0)
}

func (s *TypeParameterContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *TypeParameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeParameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeParameterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitTypeParameter(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) TypeParameter() (localctx ITypeParameterContext) {
	localctx = NewTypeParameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 338, CPP14ParserRULE_typeParameter)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1899)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserClass, CPP14ParserTemplate:
		p.SetState(1895)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == CPP14ParserTemplate {
			{
				p.SetState(1890)
				p.Match(CPP14ParserTemplate)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1891)
				p.Match(CPP14ParserLess)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1892)
				p.TemplateparameterList()
			}
			{
				p.SetState(1893)
				p.Match(CPP14ParserGreater)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(1897)
			p.Match(CPP14ParserClass)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case CPP14ParserTypename_:
		{
			p.SetState(1898)
			p.Match(CPP14ParserTypename_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}
	p.SetState(1912)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 278, p.GetParserRuleContext()) {
	case 1:
		p.SetState(1902)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == CPP14ParserEllipsis {
			{
				p.SetState(1901)
				p.Match(CPP14ParserEllipsis)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1905)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == CPP14ParserIdentifier {
			{
				p.SetState(1904)
				p.Match(CPP14ParserIdentifier)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}

	case 2:
		p.SetState(1908)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == CPP14ParserIdentifier {
			{
				p.SetState(1907)
				p.Match(CPP14ParserIdentifier)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(1910)
			p.Match(CPP14ParserAssign)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1911)
			p.TheTypeId()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISimpleTemplateIdContext is an interface to support dynamic dispatch.
type ISimpleTemplateIdContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	TemplateName() ITemplateNameContext
	Less() antlr.TerminalNode
	Greater() antlr.TerminalNode
	TemplateArgumentList() ITemplateArgumentListContext

	// IsSimpleTemplateIdContext differentiates from other interfaces.
	IsSimpleTemplateIdContext()
}

type SimpleTemplateIdContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySimpleTemplateIdContext() *SimpleTemplateIdContext {
	var p = new(SimpleTemplateIdContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_simpleTemplateId
	return p
}

func InitEmptySimpleTemplateIdContext(p *SimpleTemplateIdContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_simpleTemplateId
}

func (*SimpleTemplateIdContext) IsSimpleTemplateIdContext() {}

func NewSimpleTemplateIdContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SimpleTemplateIdContext {
	var p = new(SimpleTemplateIdContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_simpleTemplateId

	return p
}

func (s *SimpleTemplateIdContext) GetParser() antlr.Parser { return s.parser }

func (s *SimpleTemplateIdContext) TemplateName() ITemplateNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplateNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplateNameContext)
}

func (s *SimpleTemplateIdContext) Less() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLess, 0)
}

func (s *SimpleTemplateIdContext) Greater() antlr.TerminalNode {
	return s.GetToken(CPP14ParserGreater, 0)
}

func (s *SimpleTemplateIdContext) TemplateArgumentList() ITemplateArgumentListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplateArgumentListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplateArgumentListContext)
}

func (s *SimpleTemplateIdContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SimpleTemplateIdContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SimpleTemplateIdContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitSimpleTemplateId(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) SimpleTemplateId() (localctx ISimpleTemplateIdContext) {
	localctx = NewSimpleTemplateIdContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 340, CPP14ParserRULE_simpleTemplateId)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1914)
		p.TemplateName()
	}
	{
		p.SetState(1915)
		p.Match(CPP14ParserLess)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1917)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&8364979472930990334) != 0) || ((int64((_la-65)) & ^0x3f) == 0 && ((int64(1)<<(_la-65))&4719772474384268307) != 0) || _la == CPP14ParserIdentifier {
		{
			p.SetState(1916)
			p.TemplateArgumentList()
		}

	}
	{
		p.SetState(1919)
		p.Match(CPP14ParserGreater)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITemplateIdContext is an interface to support dynamic dispatch.
type ITemplateIdContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SimpleTemplateId() ISimpleTemplateIdContext
	Less() antlr.TerminalNode
	Greater() antlr.TerminalNode
	OperatorFunctionId() IOperatorFunctionIdContext
	LiteralOperatorId() ILiteralOperatorIdContext
	TemplateArgumentList() ITemplateArgumentListContext

	// IsTemplateIdContext differentiates from other interfaces.
	IsTemplateIdContext()
}

type TemplateIdContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplateIdContext() *TemplateIdContext {
	var p = new(TemplateIdContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_templateId
	return p
}

func InitEmptyTemplateIdContext(p *TemplateIdContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_templateId
}

func (*TemplateIdContext) IsTemplateIdContext() {}

func NewTemplateIdContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplateIdContext {
	var p = new(TemplateIdContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_templateId

	return p
}

func (s *TemplateIdContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplateIdContext) SimpleTemplateId() ISimpleTemplateIdContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISimpleTemplateIdContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISimpleTemplateIdContext)
}

func (s *TemplateIdContext) Less() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLess, 0)
}

func (s *TemplateIdContext) Greater() antlr.TerminalNode {
	return s.GetToken(CPP14ParserGreater, 0)
}

func (s *TemplateIdContext) OperatorFunctionId() IOperatorFunctionIdContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOperatorFunctionIdContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOperatorFunctionIdContext)
}

func (s *TemplateIdContext) LiteralOperatorId() ILiteralOperatorIdContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILiteralOperatorIdContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILiteralOperatorIdContext)
}

func (s *TemplateIdContext) TemplateArgumentList() ITemplateArgumentListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplateArgumentListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplateArgumentListContext)
}

func (s *TemplateIdContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateIdContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TemplateIdContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitTemplateId(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) TemplateId() (localctx ITemplateIdContext) {
	localctx = NewTemplateIdContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 342, CPP14ParserRULE_templateId)
	var _la int

	p.SetState(1932)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1921)
			p.SimpleTemplateId()
		}

	case CPP14ParserOperator:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(1924)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 280, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(1922)
				p.OperatorFunctionId()
			}

		case 2:
			{
				p.SetState(1923)
				p.LiteralOperatorId()
			}

		case antlr.ATNInvalidAltNumber:
			goto errorExit
		}
		{
			p.SetState(1926)
			p.Match(CPP14ParserLess)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1928)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&8364979472930990334) != 0) || ((int64((_la-65)) & ^0x3f) == 0 && ((int64(1)<<(_la-65))&4719772474384268307) != 0) || _la == CPP14ParserIdentifier {
			{
				p.SetState(1927)
				p.TemplateArgumentList()
			}

		}
		{
			p.SetState(1930)
			p.Match(CPP14ParserGreater)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITemplateNameContext is an interface to support dynamic dispatch.
type ITemplateNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() antlr.TerminalNode

	// IsTemplateNameContext differentiates from other interfaces.
	IsTemplateNameContext()
}

type TemplateNameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplateNameContext() *TemplateNameContext {
	var p = new(TemplateNameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_templateName
	return p
}

func InitEmptyTemplateNameContext(p *TemplateNameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_templateName
}

func (*TemplateNameContext) IsTemplateNameContext() {}

func NewTemplateNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplateNameContext {
	var p = new(TemplateNameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_templateName

	return p
}

func (s *TemplateNameContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplateNameContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *TemplateNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TemplateNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitTemplateName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) TemplateName() (localctx ITemplateNameContext) {
	localctx = NewTemplateNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 344, CPP14ParserRULE_templateName)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1934)
		p.Match(CPP14ParserIdentifier)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITemplateArgumentListContext is an interface to support dynamic dispatch.
type ITemplateArgumentListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllTemplateArgument() []ITemplateArgumentContext
	TemplateArgument(i int) ITemplateArgumentContext
	AllEllipsis() []antlr.TerminalNode
	Ellipsis(i int) antlr.TerminalNode
	AllComma() []antlr.TerminalNode
	Comma(i int) antlr.TerminalNode

	// IsTemplateArgumentListContext differentiates from other interfaces.
	IsTemplateArgumentListContext()
}

type TemplateArgumentListContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplateArgumentListContext() *TemplateArgumentListContext {
	var p = new(TemplateArgumentListContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_templateArgumentList
	return p
}

func InitEmptyTemplateArgumentListContext(p *TemplateArgumentListContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_templateArgumentList
}

func (*TemplateArgumentListContext) IsTemplateArgumentListContext() {}

func NewTemplateArgumentListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplateArgumentListContext {
	var p = new(TemplateArgumentListContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_templateArgumentList

	return p
}

func (s *TemplateArgumentListContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplateArgumentListContext) AllTemplateArgument() []ITemplateArgumentContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITemplateArgumentContext); ok {
			len++
		}
	}

	tst := make([]ITemplateArgumentContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITemplateArgumentContext); ok {
			tst[i] = t.(ITemplateArgumentContext)
			i++
		}
	}

	return tst
}

func (s *TemplateArgumentListContext) TemplateArgument(i int) ITemplateArgumentContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITemplateArgumentContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITemplateArgumentContext)
}

func (s *TemplateArgumentListContext) AllEllipsis() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserEllipsis)
}

func (s *TemplateArgumentListContext) Ellipsis(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserEllipsis, i)
}

func (s *TemplateArgumentListContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserComma)
}

func (s *TemplateArgumentListContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserComma, i)
}

func (s *TemplateArgumentListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateArgumentListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TemplateArgumentListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitTemplateArgumentList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) TemplateArgumentList() (localctx ITemplateArgumentListContext) {
	localctx = NewTemplateArgumentListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 346, CPP14ParserRULE_templateArgumentList)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1936)
		p.TemplateArgument()
	}
	p.SetState(1938)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserEllipsis {
		{
			p.SetState(1937)
			p.Match(CPP14ParserEllipsis)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(1947)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == CPP14ParserComma {
		{
			p.SetState(1940)
			p.Match(CPP14ParserComma)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1941)
			p.TemplateArgument()
		}
		p.SetState(1943)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == CPP14ParserEllipsis {
			{
				p.SetState(1942)
				p.Match(CPP14ParserEllipsis)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}

		p.SetState(1949)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITemplateArgumentContext is an interface to support dynamic dispatch.
type ITemplateArgumentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	TheTypeId() ITheTypeIdContext
	ConstantExpression() IConstantExpressionContext
	IdExpression() IIdExpressionContext

	// IsTemplateArgumentContext differentiates from other interfaces.
	IsTemplateArgumentContext()
}

type TemplateArgumentContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplateArgumentContext() *TemplateArgumentContext {
	var p = new(TemplateArgumentContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_templateArgument
	return p
}

func InitEmptyTemplateArgumentContext(p *TemplateArgumentContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_templateArgument
}

func (*TemplateArgumentContext) IsTemplateArgumentContext() {}

func NewTemplateArgumentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplateArgumentContext {
	var p = new(TemplateArgumentContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_templateArgument

	return p
}

func (s *TemplateArgumentContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplateArgumentContext) TheTypeId() ITheTypeIdContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITheTypeIdContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITheTypeIdContext)
}

func (s *TemplateArgumentContext) ConstantExpression() IConstantExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConstantExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConstantExpressionContext)
}

func (s *TemplateArgumentContext) IdExpression() IIdExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdExpressionContext)
}

func (s *TemplateArgumentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateArgumentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TemplateArgumentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitTemplateArgument(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) TemplateArgument() (localctx ITemplateArgumentContext) {
	localctx = NewTemplateArgumentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 348, CPP14ParserRULE_templateArgument)
	p.SetState(1953)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 286, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1950)
			p.TheTypeId()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1951)
			p.ConstantExpression()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1952)
			p.IdExpression()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITypeNameSpecifierContext is an interface to support dynamic dispatch.
type ITypeNameSpecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Typename_() antlr.TerminalNode
	NestedNameSpecifier() INestedNameSpecifierContext
	Identifier() antlr.TerminalNode
	SimpleTemplateId() ISimpleTemplateIdContext
	Template() antlr.TerminalNode

	// IsTypeNameSpecifierContext differentiates from other interfaces.
	IsTypeNameSpecifierContext()
}

type TypeNameSpecifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeNameSpecifierContext() *TypeNameSpecifierContext {
	var p = new(TypeNameSpecifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_typeNameSpecifier
	return p
}

func InitEmptyTypeNameSpecifierContext(p *TypeNameSpecifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_typeNameSpecifier
}

func (*TypeNameSpecifierContext) IsTypeNameSpecifierContext() {}

func NewTypeNameSpecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeNameSpecifierContext {
	var p = new(TypeNameSpecifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_typeNameSpecifier

	return p
}

func (s *TypeNameSpecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeNameSpecifierContext) Typename_() antlr.TerminalNode {
	return s.GetToken(CPP14ParserTypename_, 0)
}

func (s *TypeNameSpecifierContext) NestedNameSpecifier() INestedNameSpecifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INestedNameSpecifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INestedNameSpecifierContext)
}

func (s *TypeNameSpecifierContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIdentifier, 0)
}

func (s *TypeNameSpecifierContext) SimpleTemplateId() ISimpleTemplateIdContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISimpleTemplateIdContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISimpleTemplateIdContext)
}

func (s *TypeNameSpecifierContext) Template() antlr.TerminalNode {
	return s.GetToken(CPP14ParserTemplate, 0)
}

func (s *TypeNameSpecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeNameSpecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeNameSpecifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitTypeNameSpecifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) TypeNameSpecifier() (localctx ITypeNameSpecifierContext) {
	localctx = NewTypeNameSpecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 350, CPP14ParserRULE_typeNameSpecifier)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1955)
		p.Match(CPP14ParserTypename_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1956)
		p.nestedNameSpecifier(0)
	}
	p.SetState(1962)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 288, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1957)
			p.Match(CPP14ParserIdentifier)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.SetState(1959)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == CPP14ParserTemplate {
			{
				p.SetState(1958)
				p.Match(CPP14ParserTemplate)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(1961)
			p.SimpleTemplateId()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExplicitInstantiationContext is an interface to support dynamic dispatch.
type IExplicitInstantiationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Template() antlr.TerminalNode
	Declaration() IDeclarationContext
	Extern() antlr.TerminalNode

	// IsExplicitInstantiationContext differentiates from other interfaces.
	IsExplicitInstantiationContext()
}

type ExplicitInstantiationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExplicitInstantiationContext() *ExplicitInstantiationContext {
	var p = new(ExplicitInstantiationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_explicitInstantiation
	return p
}

func InitEmptyExplicitInstantiationContext(p *ExplicitInstantiationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_explicitInstantiation
}

func (*ExplicitInstantiationContext) IsExplicitInstantiationContext() {}

func NewExplicitInstantiationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExplicitInstantiationContext {
	var p = new(ExplicitInstantiationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_explicitInstantiation

	return p
}

func (s *ExplicitInstantiationContext) GetParser() antlr.Parser { return s.parser }

func (s *ExplicitInstantiationContext) Template() antlr.TerminalNode {
	return s.GetToken(CPP14ParserTemplate, 0)
}

func (s *ExplicitInstantiationContext) Declaration() IDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDeclarationContext)
}

func (s *ExplicitInstantiationContext) Extern() antlr.TerminalNode {
	return s.GetToken(CPP14ParserExtern, 0)
}

func (s *ExplicitInstantiationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExplicitInstantiationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExplicitInstantiationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitExplicitInstantiation(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) ExplicitInstantiation() (localctx IExplicitInstantiationContext) {
	localctx = NewExplicitInstantiationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 352, CPP14ParserRULE_explicitInstantiation)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1965)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserExtern {
		{
			p.SetState(1964)
			p.Match(CPP14ParserExtern)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(1967)
		p.Match(CPP14ParserTemplate)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1968)
		p.Declaration()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExplicitSpecializationContext is an interface to support dynamic dispatch.
type IExplicitSpecializationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Template() antlr.TerminalNode
	Less() antlr.TerminalNode
	Greater() antlr.TerminalNode
	Declaration() IDeclarationContext

	// IsExplicitSpecializationContext differentiates from other interfaces.
	IsExplicitSpecializationContext()
}

type ExplicitSpecializationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExplicitSpecializationContext() *ExplicitSpecializationContext {
	var p = new(ExplicitSpecializationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_explicitSpecialization
	return p
}

func InitEmptyExplicitSpecializationContext(p *ExplicitSpecializationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_explicitSpecialization
}

func (*ExplicitSpecializationContext) IsExplicitSpecializationContext() {}

func NewExplicitSpecializationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExplicitSpecializationContext {
	var p = new(ExplicitSpecializationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_explicitSpecialization

	return p
}

func (s *ExplicitSpecializationContext) GetParser() antlr.Parser { return s.parser }

func (s *ExplicitSpecializationContext) Template() antlr.TerminalNode {
	return s.GetToken(CPP14ParserTemplate, 0)
}

func (s *ExplicitSpecializationContext) Less() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLess, 0)
}

func (s *ExplicitSpecializationContext) Greater() antlr.TerminalNode {
	return s.GetToken(CPP14ParserGreater, 0)
}

func (s *ExplicitSpecializationContext) Declaration() IDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDeclarationContext)
}

func (s *ExplicitSpecializationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExplicitSpecializationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExplicitSpecializationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitExplicitSpecialization(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) ExplicitSpecialization() (localctx IExplicitSpecializationContext) {
	localctx = NewExplicitSpecializationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 354, CPP14ParserRULE_explicitSpecialization)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1970)
		p.Match(CPP14ParserTemplate)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1971)
		p.Match(CPP14ParserLess)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1972)
		p.Match(CPP14ParserGreater)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1973)
		p.Declaration()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITryBlockContext is an interface to support dynamic dispatch.
type ITryBlockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Try() antlr.TerminalNode
	CompoundStatement() ICompoundStatementContext
	HandlerSeq() IHandlerSeqContext

	// IsTryBlockContext differentiates from other interfaces.
	IsTryBlockContext()
}

type TryBlockContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTryBlockContext() *TryBlockContext {
	var p = new(TryBlockContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_tryBlock
	return p
}

func InitEmptyTryBlockContext(p *TryBlockContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_tryBlock
}

func (*TryBlockContext) IsTryBlockContext() {}

func NewTryBlockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TryBlockContext {
	var p = new(TryBlockContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_tryBlock

	return p
}

func (s *TryBlockContext) GetParser() antlr.Parser { return s.parser }

func (s *TryBlockContext) Try() antlr.TerminalNode {
	return s.GetToken(CPP14ParserTry, 0)
}

func (s *TryBlockContext) CompoundStatement() ICompoundStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICompoundStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICompoundStatementContext)
}

func (s *TryBlockContext) HandlerSeq() IHandlerSeqContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IHandlerSeqContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IHandlerSeqContext)
}

func (s *TryBlockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TryBlockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TryBlockContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitTryBlock(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) TryBlock() (localctx ITryBlockContext) {
	localctx = NewTryBlockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 356, CPP14ParserRULE_tryBlock)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1975)
		p.Match(CPP14ParserTry)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1976)
		p.CompoundStatement()
	}
	{
		p.SetState(1977)
		p.HandlerSeq()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFunctionTryBlockContext is an interface to support dynamic dispatch.
type IFunctionTryBlockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Try() antlr.TerminalNode
	CompoundStatement() ICompoundStatementContext
	HandlerSeq() IHandlerSeqContext
	ConstructorInitializer() IConstructorInitializerContext

	// IsFunctionTryBlockContext differentiates from other interfaces.
	IsFunctionTryBlockContext()
}

type FunctionTryBlockContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionTryBlockContext() *FunctionTryBlockContext {
	var p = new(FunctionTryBlockContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_functionTryBlock
	return p
}

func InitEmptyFunctionTryBlockContext(p *FunctionTryBlockContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_functionTryBlock
}

func (*FunctionTryBlockContext) IsFunctionTryBlockContext() {}

func NewFunctionTryBlockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionTryBlockContext {
	var p = new(FunctionTryBlockContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_functionTryBlock

	return p
}

func (s *FunctionTryBlockContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionTryBlockContext) Try() antlr.TerminalNode {
	return s.GetToken(CPP14ParserTry, 0)
}

func (s *FunctionTryBlockContext) CompoundStatement() ICompoundStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICompoundStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICompoundStatementContext)
}

func (s *FunctionTryBlockContext) HandlerSeq() IHandlerSeqContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IHandlerSeqContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IHandlerSeqContext)
}

func (s *FunctionTryBlockContext) ConstructorInitializer() IConstructorInitializerContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConstructorInitializerContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConstructorInitializerContext)
}

func (s *FunctionTryBlockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionTryBlockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionTryBlockContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitFunctionTryBlock(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) FunctionTryBlock() (localctx IFunctionTryBlockContext) {
	localctx = NewFunctionTryBlockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 358, CPP14ParserRULE_functionTryBlock)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1979)
		p.Match(CPP14ParserTry)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1981)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserColon {
		{
			p.SetState(1980)
			p.ConstructorInitializer()
		}

	}
	{
		p.SetState(1983)
		p.CompoundStatement()
	}
	{
		p.SetState(1984)
		p.HandlerSeq()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IHandlerSeqContext is an interface to support dynamic dispatch.
type IHandlerSeqContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllHandler() []IHandlerContext
	Handler(i int) IHandlerContext

	// IsHandlerSeqContext differentiates from other interfaces.
	IsHandlerSeqContext()
}

type HandlerSeqContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHandlerSeqContext() *HandlerSeqContext {
	var p = new(HandlerSeqContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_handlerSeq
	return p
}

func InitEmptyHandlerSeqContext(p *HandlerSeqContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_handlerSeq
}

func (*HandlerSeqContext) IsHandlerSeqContext() {}

func NewHandlerSeqContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *HandlerSeqContext {
	var p = new(HandlerSeqContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_handlerSeq

	return p
}

func (s *HandlerSeqContext) GetParser() antlr.Parser { return s.parser }

func (s *HandlerSeqContext) AllHandler() []IHandlerContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IHandlerContext); ok {
			len++
		}
	}

	tst := make([]IHandlerContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IHandlerContext); ok {
			tst[i] = t.(IHandlerContext)
			i++
		}
	}

	return tst
}

func (s *HandlerSeqContext) Handler(i int) IHandlerContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IHandlerContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IHandlerContext)
}

func (s *HandlerSeqContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HandlerSeqContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *HandlerSeqContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitHandlerSeq(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) HandlerSeq() (localctx IHandlerSeqContext) {
	localctx = NewHandlerSeqContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 360, CPP14ParserRULE_handlerSeq)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1987)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == CPP14ParserCatch {
		{
			p.SetState(1986)
			p.Handler()
		}

		p.SetState(1989)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IHandlerContext is an interface to support dynamic dispatch.
type IHandlerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Catch() antlr.TerminalNode
	LeftParen() antlr.TerminalNode
	ExceptionDeclaration() IExceptionDeclarationContext
	RightParen() antlr.TerminalNode
	CompoundStatement() ICompoundStatementContext

	// IsHandlerContext differentiates from other interfaces.
	IsHandlerContext()
}

type HandlerContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHandlerContext() *HandlerContext {
	var p = new(HandlerContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_handler
	return p
}

func InitEmptyHandlerContext(p *HandlerContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_handler
}

func (*HandlerContext) IsHandlerContext() {}

func NewHandlerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *HandlerContext {
	var p = new(HandlerContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_handler

	return p
}

func (s *HandlerContext) GetParser() antlr.Parser { return s.parser }

func (s *HandlerContext) Catch() antlr.TerminalNode {
	return s.GetToken(CPP14ParserCatch, 0)
}

func (s *HandlerContext) LeftParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, 0)
}

func (s *HandlerContext) ExceptionDeclaration() IExceptionDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExceptionDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExceptionDeclarationContext)
}

func (s *HandlerContext) RightParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, 0)
}

func (s *HandlerContext) CompoundStatement() ICompoundStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICompoundStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICompoundStatementContext)
}

func (s *HandlerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HandlerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *HandlerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitHandler(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) Handler() (localctx IHandlerContext) {
	localctx = NewHandlerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 362, CPP14ParserRULE_handler)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1991)
		p.Match(CPP14ParserCatch)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1992)
		p.Match(CPP14ParserLeftParen)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1993)
		p.ExceptionDeclaration()
	}
	{
		p.SetState(1994)
		p.Match(CPP14ParserRightParen)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1995)
		p.CompoundStatement()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExceptionDeclarationContext is an interface to support dynamic dispatch.
type IExceptionDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	TypeSpecifierSeq() ITypeSpecifierSeqContext
	AttributeSpecifierSeq() IAttributeSpecifierSeqContext
	Declarator() IDeclaratorContext
	AbstractDeclarator() IAbstractDeclaratorContext
	Ellipsis() antlr.TerminalNode

	// IsExceptionDeclarationContext differentiates from other interfaces.
	IsExceptionDeclarationContext()
}

type ExceptionDeclarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExceptionDeclarationContext() *ExceptionDeclarationContext {
	var p = new(ExceptionDeclarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_exceptionDeclaration
	return p
}

func InitEmptyExceptionDeclarationContext(p *ExceptionDeclarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_exceptionDeclaration
}

func (*ExceptionDeclarationContext) IsExceptionDeclarationContext() {}

func NewExceptionDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExceptionDeclarationContext {
	var p = new(ExceptionDeclarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_exceptionDeclaration

	return p
}

func (s *ExceptionDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *ExceptionDeclarationContext) TypeSpecifierSeq() ITypeSpecifierSeqContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeSpecifierSeqContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeSpecifierSeqContext)
}

func (s *ExceptionDeclarationContext) AttributeSpecifierSeq() IAttributeSpecifierSeqContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributeSpecifierSeqContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributeSpecifierSeqContext)
}

func (s *ExceptionDeclarationContext) Declarator() IDeclaratorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDeclaratorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDeclaratorContext)
}

func (s *ExceptionDeclarationContext) AbstractDeclarator() IAbstractDeclaratorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAbstractDeclaratorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAbstractDeclaratorContext)
}

func (s *ExceptionDeclarationContext) Ellipsis() antlr.TerminalNode {
	return s.GetToken(CPP14ParserEllipsis, 0)
}

func (s *ExceptionDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExceptionDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExceptionDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitExceptionDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) ExceptionDeclaration() (localctx IExceptionDeclarationContext) {
	localctx = NewExceptionDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 364, CPP14ParserRULE_exceptionDeclaration)
	var _la int

	p.SetState(2006)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserAlignas, CPP14ParserAuto, CPP14ParserBool, CPP14ParserChar, CPP14ParserChar16, CPP14ParserChar32, CPP14ParserClass, CPP14ParserConst, CPP14ParserDecltype, CPP14ParserDouble, CPP14ParserEnum, CPP14ParserFloat, CPP14ParserInt, CPP14ParserLong, CPP14ParserShort, CPP14ParserSigned, CPP14ParserStruct, CPP14ParserTypename_, CPP14ParserUnion, CPP14ParserUnsigned, CPP14ParserVoid, CPP14ParserVolatile, CPP14ParserWchar, CPP14ParserLeftBracket, CPP14ParserDoublecolon, CPP14ParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(1998)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == CPP14ParserAlignas || _la == CPP14ParserLeftBracket {
			{
				p.SetState(1997)
				p.AttributeSpecifierSeq()
			}

		}
		{
			p.SetState(2000)
			p.TypeSpecifierSeq()
		}
		p.SetState(2003)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 293, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2001)
				p.Declarator()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		} else if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 293, p.GetParserRuleContext()) == 2 {
			{
				p.SetState(2002)
				p.AbstractDeclarator()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case CPP14ParserEllipsis:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2005)
			p.Match(CPP14ParserEllipsis)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IThrowExpressionContext is an interface to support dynamic dispatch.
type IThrowExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Throw() antlr.TerminalNode
	AssignmentExpression() IAssignmentExpressionContext

	// IsThrowExpressionContext differentiates from other interfaces.
	IsThrowExpressionContext()
}

type ThrowExpressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyThrowExpressionContext() *ThrowExpressionContext {
	var p = new(ThrowExpressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_throwExpression
	return p
}

func InitEmptyThrowExpressionContext(p *ThrowExpressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_throwExpression
}

func (*ThrowExpressionContext) IsThrowExpressionContext() {}

func NewThrowExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ThrowExpressionContext {
	var p = new(ThrowExpressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_throwExpression

	return p
}

func (s *ThrowExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ThrowExpressionContext) Throw() antlr.TerminalNode {
	return s.GetToken(CPP14ParserThrow, 0)
}

func (s *ThrowExpressionContext) AssignmentExpression() IAssignmentExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAssignmentExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpressionContext)
}

func (s *ThrowExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ThrowExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ThrowExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitThrowExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) ThrowExpression() (localctx IThrowExpressionContext) {
	localctx = NewThrowExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 366, CPP14ParserRULE_throwExpression)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2008)
		p.Match(CPP14ParserThrow)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(2010)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&8364979464334764286) != 0) || ((int64((_la-65)) & ^0x3f) == 0 && ((int64(1)<<(_la-65))&4719772474384133201) != 0) || _la == CPP14ParserIdentifier {
		{
			p.SetState(2009)
			p.AssignmentExpression()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExceptionSpecificationContext is an interface to support dynamic dispatch.
type IExceptionSpecificationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DynamicExceptionSpecification() IDynamicExceptionSpecificationContext
	NoeExceptSpecification() INoeExceptSpecificationContext

	// IsExceptionSpecificationContext differentiates from other interfaces.
	IsExceptionSpecificationContext()
}

type ExceptionSpecificationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExceptionSpecificationContext() *ExceptionSpecificationContext {
	var p = new(ExceptionSpecificationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_exceptionSpecification
	return p
}

func InitEmptyExceptionSpecificationContext(p *ExceptionSpecificationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_exceptionSpecification
}

func (*ExceptionSpecificationContext) IsExceptionSpecificationContext() {}

func NewExceptionSpecificationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExceptionSpecificationContext {
	var p = new(ExceptionSpecificationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_exceptionSpecification

	return p
}

func (s *ExceptionSpecificationContext) GetParser() antlr.Parser { return s.parser }

func (s *ExceptionSpecificationContext) DynamicExceptionSpecification() IDynamicExceptionSpecificationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDynamicExceptionSpecificationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDynamicExceptionSpecificationContext)
}

func (s *ExceptionSpecificationContext) NoeExceptSpecification() INoeExceptSpecificationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INoeExceptSpecificationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INoeExceptSpecificationContext)
}

func (s *ExceptionSpecificationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExceptionSpecificationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExceptionSpecificationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitExceptionSpecification(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) ExceptionSpecification() (localctx IExceptionSpecificationContext) {
	localctx = NewExceptionSpecificationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 368, CPP14ParserRULE_exceptionSpecification)
	p.SetState(2014)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case CPP14ParserThrow:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2012)
			p.DynamicExceptionSpecification()
		}

	case CPP14ParserNoexcept:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2013)
			p.NoeExceptSpecification()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDynamicExceptionSpecificationContext is an interface to support dynamic dispatch.
type IDynamicExceptionSpecificationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Throw() antlr.TerminalNode
	LeftParen() antlr.TerminalNode
	RightParen() antlr.TerminalNode
	TypeIdList() ITypeIdListContext

	// IsDynamicExceptionSpecificationContext differentiates from other interfaces.
	IsDynamicExceptionSpecificationContext()
}

type DynamicExceptionSpecificationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDynamicExceptionSpecificationContext() *DynamicExceptionSpecificationContext {
	var p = new(DynamicExceptionSpecificationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_dynamicExceptionSpecification
	return p
}

func InitEmptyDynamicExceptionSpecificationContext(p *DynamicExceptionSpecificationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_dynamicExceptionSpecification
}

func (*DynamicExceptionSpecificationContext) IsDynamicExceptionSpecificationContext() {}

func NewDynamicExceptionSpecificationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DynamicExceptionSpecificationContext {
	var p = new(DynamicExceptionSpecificationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_dynamicExceptionSpecification

	return p
}

func (s *DynamicExceptionSpecificationContext) GetParser() antlr.Parser { return s.parser }

func (s *DynamicExceptionSpecificationContext) Throw() antlr.TerminalNode {
	return s.GetToken(CPP14ParserThrow, 0)
}

func (s *DynamicExceptionSpecificationContext) LeftParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, 0)
}

func (s *DynamicExceptionSpecificationContext) RightParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, 0)
}

func (s *DynamicExceptionSpecificationContext) TypeIdList() ITypeIdListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeIdListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeIdListContext)
}

func (s *DynamicExceptionSpecificationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DynamicExceptionSpecificationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DynamicExceptionSpecificationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitDynamicExceptionSpecification(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) DynamicExceptionSpecification() (localctx IDynamicExceptionSpecificationContext) {
	localctx = NewDynamicExceptionSpecificationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 370, CPP14ParserRULE_dynamicExceptionSpecification)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2016)
		p.Match(CPP14ParserThrow)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2017)
		p.Match(CPP14ParserLeftParen)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(2019)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64((_la-13)) & ^0x3f) == 0 && ((int64(1)<<(_la-13))&-9213942612181769245) != 0) || ((int64((_la-77)) & ^0x3f) == 0 && ((int64(1)<<(_la-77))&37154696925806707) != 0) {
		{
			p.SetState(2018)
			p.TypeIdList()
		}

	}
	{
		p.SetState(2021)
		p.Match(CPP14ParserRightParen)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITypeIdListContext is an interface to support dynamic dispatch.
type ITypeIdListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllTheTypeId() []ITheTypeIdContext
	TheTypeId(i int) ITheTypeIdContext
	AllEllipsis() []antlr.TerminalNode
	Ellipsis(i int) antlr.TerminalNode
	AllComma() []antlr.TerminalNode
	Comma(i int) antlr.TerminalNode

	// IsTypeIdListContext differentiates from other interfaces.
	IsTypeIdListContext()
}

type TypeIdListContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeIdListContext() *TypeIdListContext {
	var p = new(TypeIdListContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_typeIdList
	return p
}

func InitEmptyTypeIdListContext(p *TypeIdListContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_typeIdList
}

func (*TypeIdListContext) IsTypeIdListContext() {}

func NewTypeIdListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeIdListContext {
	var p = new(TypeIdListContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_typeIdList

	return p
}

func (s *TypeIdListContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeIdListContext) AllTheTypeId() []ITheTypeIdContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITheTypeIdContext); ok {
			len++
		}
	}

	tst := make([]ITheTypeIdContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITheTypeIdContext); ok {
			tst[i] = t.(ITheTypeIdContext)
			i++
		}
	}

	return tst
}

func (s *TypeIdListContext) TheTypeId(i int) ITheTypeIdContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITheTypeIdContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITheTypeIdContext)
}

func (s *TypeIdListContext) AllEllipsis() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserEllipsis)
}

func (s *TypeIdListContext) Ellipsis(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserEllipsis, i)
}

func (s *TypeIdListContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserComma)
}

func (s *TypeIdListContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserComma, i)
}

func (s *TypeIdListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeIdListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeIdListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitTypeIdList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) TypeIdList() (localctx ITypeIdListContext) {
	localctx = NewTypeIdListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 372, CPP14ParserRULE_typeIdList)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2023)
		p.TheTypeId()
	}
	p.SetState(2025)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == CPP14ParserEllipsis {
		{
			p.SetState(2024)
			p.Match(CPP14ParserEllipsis)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(2034)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == CPP14ParserComma {
		{
			p.SetState(2027)
			p.Match(CPP14ParserComma)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2028)
			p.TheTypeId()
		}
		p.SetState(2030)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == CPP14ParserEllipsis {
			{
				p.SetState(2029)
				p.Match(CPP14ParserEllipsis)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}

		p.SetState(2036)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INoeExceptSpecificationContext is an interface to support dynamic dispatch.
type INoeExceptSpecificationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Noexcept() antlr.TerminalNode
	LeftParen() antlr.TerminalNode
	ConstantExpression() IConstantExpressionContext
	RightParen() antlr.TerminalNode

	// IsNoeExceptSpecificationContext differentiates from other interfaces.
	IsNoeExceptSpecificationContext()
}

type NoeExceptSpecificationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNoeExceptSpecificationContext() *NoeExceptSpecificationContext {
	var p = new(NoeExceptSpecificationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_noeExceptSpecification
	return p
}

func InitEmptyNoeExceptSpecificationContext(p *NoeExceptSpecificationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_noeExceptSpecification
}

func (*NoeExceptSpecificationContext) IsNoeExceptSpecificationContext() {}

func NewNoeExceptSpecificationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NoeExceptSpecificationContext {
	var p = new(NoeExceptSpecificationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_noeExceptSpecification

	return p
}

func (s *NoeExceptSpecificationContext) GetParser() antlr.Parser { return s.parser }

func (s *NoeExceptSpecificationContext) Noexcept() antlr.TerminalNode {
	return s.GetToken(CPP14ParserNoexcept, 0)
}

func (s *NoeExceptSpecificationContext) LeftParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, 0)
}

func (s *NoeExceptSpecificationContext) ConstantExpression() IConstantExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConstantExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConstantExpressionContext)
}

func (s *NoeExceptSpecificationContext) RightParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, 0)
}

func (s *NoeExceptSpecificationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NoeExceptSpecificationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NoeExceptSpecificationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitNoeExceptSpecification(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) NoeExceptSpecification() (localctx INoeExceptSpecificationContext) {
	localctx = NewNoeExceptSpecificationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 374, CPP14ParserRULE_noeExceptSpecification)
	p.SetState(2043)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 301, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2037)
			p.Match(CPP14ParserNoexcept)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2038)
			p.Match(CPP14ParserLeftParen)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2039)
			p.ConstantExpression()
		}
		{
			p.SetState(2040)
			p.Match(CPP14ParserRightParen)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2042)
			p.Match(CPP14ParserNoexcept)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITheOperatorContext is an interface to support dynamic dispatch.
type ITheOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	New() antlr.TerminalNode
	LeftBracket() antlr.TerminalNode
	RightBracket() antlr.TerminalNode
	Delete() antlr.TerminalNode
	Plus() antlr.TerminalNode
	Minus() antlr.TerminalNode
	Star() antlr.TerminalNode
	Div() antlr.TerminalNode
	Mod() antlr.TerminalNode
	Caret() antlr.TerminalNode
	And() antlr.TerminalNode
	Or() antlr.TerminalNode
	Tilde() antlr.TerminalNode
	Not() antlr.TerminalNode
	Assign() antlr.TerminalNode
	AllGreater() []antlr.TerminalNode
	Greater(i int) antlr.TerminalNode
	AllLess() []antlr.TerminalNode
	Less(i int) antlr.TerminalNode
	GreaterEqual() antlr.TerminalNode
	PlusAssign() antlr.TerminalNode
	MinusAssign() antlr.TerminalNode
	StarAssign() antlr.TerminalNode
	ModAssign() antlr.TerminalNode
	XorAssign() antlr.TerminalNode
	AndAssign() antlr.TerminalNode
	OrAssign() antlr.TerminalNode
	RightShiftAssign() antlr.TerminalNode
	LeftShiftAssign() antlr.TerminalNode
	Equal() antlr.TerminalNode
	NotEqual() antlr.TerminalNode
	LessEqual() antlr.TerminalNode
	AndAnd() antlr.TerminalNode
	OrOr() antlr.TerminalNode
	PlusPlus() antlr.TerminalNode
	MinusMinus() antlr.TerminalNode
	Comma() antlr.TerminalNode
	ArrowStar() antlr.TerminalNode
	Arrow() antlr.TerminalNode
	LeftParen() antlr.TerminalNode
	RightParen() antlr.TerminalNode

	// IsTheOperatorContext differentiates from other interfaces.
	IsTheOperatorContext()
}

type TheOperatorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTheOperatorContext() *TheOperatorContext {
	var p = new(TheOperatorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_theOperator
	return p
}

func InitEmptyTheOperatorContext(p *TheOperatorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_theOperator
}

func (*TheOperatorContext) IsTheOperatorContext() {}

func NewTheOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TheOperatorContext {
	var p = new(TheOperatorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_theOperator

	return p
}

func (s *TheOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *TheOperatorContext) New() antlr.TerminalNode {
	return s.GetToken(CPP14ParserNew, 0)
}

func (s *TheOperatorContext) LeftBracket() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftBracket, 0)
}

func (s *TheOperatorContext) RightBracket() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightBracket, 0)
}

func (s *TheOperatorContext) Delete() antlr.TerminalNode {
	return s.GetToken(CPP14ParserDelete, 0)
}

func (s *TheOperatorContext) Plus() antlr.TerminalNode {
	return s.GetToken(CPP14ParserPlus, 0)
}

func (s *TheOperatorContext) Minus() antlr.TerminalNode {
	return s.GetToken(CPP14ParserMinus, 0)
}

func (s *TheOperatorContext) Star() antlr.TerminalNode {
	return s.GetToken(CPP14ParserStar, 0)
}

func (s *TheOperatorContext) Div() antlr.TerminalNode {
	return s.GetToken(CPP14ParserDiv, 0)
}

func (s *TheOperatorContext) Mod() antlr.TerminalNode {
	return s.GetToken(CPP14ParserMod, 0)
}

func (s *TheOperatorContext) Caret() antlr.TerminalNode {
	return s.GetToken(CPP14ParserCaret, 0)
}

func (s *TheOperatorContext) And() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAnd, 0)
}

func (s *TheOperatorContext) Or() antlr.TerminalNode {
	return s.GetToken(CPP14ParserOr, 0)
}

func (s *TheOperatorContext) Tilde() antlr.TerminalNode {
	return s.GetToken(CPP14ParserTilde, 0)
}

func (s *TheOperatorContext) Not() antlr.TerminalNode {
	return s.GetToken(CPP14ParserNot, 0)
}

func (s *TheOperatorContext) Assign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAssign, 0)
}

func (s *TheOperatorContext) AllGreater() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserGreater)
}

func (s *TheOperatorContext) Greater(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserGreater, i)
}

func (s *TheOperatorContext) AllLess() []antlr.TerminalNode {
	return s.GetTokens(CPP14ParserLess)
}

func (s *TheOperatorContext) Less(i int) antlr.TerminalNode {
	return s.GetToken(CPP14ParserLess, i)
}

func (s *TheOperatorContext) GreaterEqual() antlr.TerminalNode {
	return s.GetToken(CPP14ParserGreaterEqual, 0)
}

func (s *TheOperatorContext) PlusAssign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserPlusAssign, 0)
}

func (s *TheOperatorContext) MinusAssign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserMinusAssign, 0)
}

func (s *TheOperatorContext) StarAssign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserStarAssign, 0)
}

func (s *TheOperatorContext) ModAssign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserModAssign, 0)
}

func (s *TheOperatorContext) XorAssign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserXorAssign, 0)
}

func (s *TheOperatorContext) AndAssign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAndAssign, 0)
}

func (s *TheOperatorContext) OrAssign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserOrAssign, 0)
}

func (s *TheOperatorContext) RightShiftAssign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightShiftAssign, 0)
}

func (s *TheOperatorContext) LeftShiftAssign() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftShiftAssign, 0)
}

func (s *TheOperatorContext) Equal() antlr.TerminalNode {
	return s.GetToken(CPP14ParserEqual, 0)
}

func (s *TheOperatorContext) NotEqual() antlr.TerminalNode {
	return s.GetToken(CPP14ParserNotEqual, 0)
}

func (s *TheOperatorContext) LessEqual() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLessEqual, 0)
}

func (s *TheOperatorContext) AndAnd() antlr.TerminalNode {
	return s.GetToken(CPP14ParserAndAnd, 0)
}

func (s *TheOperatorContext) OrOr() antlr.TerminalNode {
	return s.GetToken(CPP14ParserOrOr, 0)
}

func (s *TheOperatorContext) PlusPlus() antlr.TerminalNode {
	return s.GetToken(CPP14ParserPlusPlus, 0)
}

func (s *TheOperatorContext) MinusMinus() antlr.TerminalNode {
	return s.GetToken(CPP14ParserMinusMinus, 0)
}

func (s *TheOperatorContext) Comma() antlr.TerminalNode {
	return s.GetToken(CPP14ParserComma, 0)
}

func (s *TheOperatorContext) ArrowStar() antlr.TerminalNode {
	return s.GetToken(CPP14ParserArrowStar, 0)
}

func (s *TheOperatorContext) Arrow() antlr.TerminalNode {
	return s.GetToken(CPP14ParserArrow, 0)
}

func (s *TheOperatorContext) LeftParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserLeftParen, 0)
}

func (s *TheOperatorContext) RightParen() antlr.TerminalNode {
	return s.GetToken(CPP14ParserRightParen, 0)
}

func (s *TheOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TheOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TheOperatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitTheOperator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) TheOperator() (localctx ITheOperatorContext) {
	localctx = NewTheOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 376, CPP14ParserRULE_theOperator)
	p.SetState(2096)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 304, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2045)
			p.Match(CPP14ParserNew)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2048)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 302, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2046)
				p.Match(CPP14ParserLeftBracket)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(2047)
				p.Match(CPP14ParserRightBracket)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2050)
			p.Match(CPP14ParserDelete)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2053)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 303, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2051)
				p.Match(CPP14ParserLeftBracket)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(2052)
				p.Match(CPP14ParserRightBracket)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2055)
			p.Match(CPP14ParserPlus)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2056)
			p.Match(CPP14ParserMinus)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2057)
			p.Match(CPP14ParserStar)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(2058)
			p.Match(CPP14ParserDiv)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(2059)
			p.Match(CPP14ParserMod)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(2060)
			p.Match(CPP14ParserCaret)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(2061)
			p.Match(CPP14ParserAnd)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(2062)
			p.Match(CPP14ParserOr)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(2063)
			p.Match(CPP14ParserTilde)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(2064)
			p.Match(CPP14ParserNot)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(2065)
			p.Match(CPP14ParserAssign)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(2066)
			p.Match(CPP14ParserGreater)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(2067)
			p.Match(CPP14ParserLess)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 16:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(2068)
			p.Match(CPP14ParserGreaterEqual)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 17:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(2069)
			p.Match(CPP14ParserPlusAssign)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 18:
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(2070)
			p.Match(CPP14ParserMinusAssign)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 19:
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(2071)
			p.Match(CPP14ParserStarAssign)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 20:
		p.EnterOuterAlt(localctx, 20)
		{
			p.SetState(2072)
			p.Match(CPP14ParserModAssign)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 21:
		p.EnterOuterAlt(localctx, 21)
		{
			p.SetState(2073)
			p.Match(CPP14ParserXorAssign)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 22:
		p.EnterOuterAlt(localctx, 22)
		{
			p.SetState(2074)
			p.Match(CPP14ParserAndAssign)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 23:
		p.EnterOuterAlt(localctx, 23)
		{
			p.SetState(2075)
			p.Match(CPP14ParserOrAssign)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 24:
		p.EnterOuterAlt(localctx, 24)
		{
			p.SetState(2076)
			p.Match(CPP14ParserLess)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2077)
			p.Match(CPP14ParserLess)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 25:
		p.EnterOuterAlt(localctx, 25)
		{
			p.SetState(2078)
			p.Match(CPP14ParserGreater)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2079)
			p.Match(CPP14ParserGreater)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 26:
		p.EnterOuterAlt(localctx, 26)
		{
			p.SetState(2080)
			p.Match(CPP14ParserRightShiftAssign)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 27:
		p.EnterOuterAlt(localctx, 27)
		{
			p.SetState(2081)
			p.Match(CPP14ParserLeftShiftAssign)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 28:
		p.EnterOuterAlt(localctx, 28)
		{
			p.SetState(2082)
			p.Match(CPP14ParserEqual)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 29:
		p.EnterOuterAlt(localctx, 29)
		{
			p.SetState(2083)
			p.Match(CPP14ParserNotEqual)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 30:
		p.EnterOuterAlt(localctx, 30)
		{
			p.SetState(2084)
			p.Match(CPP14ParserLessEqual)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 31:
		p.EnterOuterAlt(localctx, 31)
		{
			p.SetState(2085)
			p.Match(CPP14ParserAndAnd)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 32:
		p.EnterOuterAlt(localctx, 32)
		{
			p.SetState(2086)
			p.Match(CPP14ParserOrOr)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 33:
		p.EnterOuterAlt(localctx, 33)
		{
			p.SetState(2087)
			p.Match(CPP14ParserPlusPlus)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 34:
		p.EnterOuterAlt(localctx, 34)
		{
			p.SetState(2088)
			p.Match(CPP14ParserMinusMinus)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 35:
		p.EnterOuterAlt(localctx, 35)
		{
			p.SetState(2089)
			p.Match(CPP14ParserComma)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 36:
		p.EnterOuterAlt(localctx, 36)
		{
			p.SetState(2090)
			p.Match(CPP14ParserArrowStar)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 37:
		p.EnterOuterAlt(localctx, 37)
		{
			p.SetState(2091)
			p.Match(CPP14ParserArrow)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 38:
		p.EnterOuterAlt(localctx, 38)
		{
			p.SetState(2092)
			p.Match(CPP14ParserLeftParen)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2093)
			p.Match(CPP14ParserRightParen)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 39:
		p.EnterOuterAlt(localctx, 39)
		{
			p.SetState(2094)
			p.Match(CPP14ParserLeftBracket)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2095)
			p.Match(CPP14ParserRightBracket)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILiteralContext is an interface to support dynamic dispatch.
type ILiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IntegerLiteral() antlr.TerminalNode
	CharacterLiteral() antlr.TerminalNode
	FloatingLiteral() antlr.TerminalNode
	StringLiteral() antlr.TerminalNode
	BooleanLiteral() antlr.TerminalNode
	PointerLiteral() antlr.TerminalNode
	UserDefinedLiteral() antlr.TerminalNode

	// IsLiteralContext differentiates from other interfaces.
	IsLiteralContext()
}

type LiteralContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLiteralContext() *LiteralContext {
	var p = new(LiteralContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_literal
	return p
}

func InitEmptyLiteralContext(p *LiteralContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = CPP14ParserRULE_literal
}

func (*LiteralContext) IsLiteralContext() {}

func NewLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LiteralContext {
	var p = new(LiteralContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = CPP14ParserRULE_literal

	return p
}

func (s *LiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *LiteralContext) IntegerLiteral() antlr.TerminalNode {
	return s.GetToken(CPP14ParserIntegerLiteral, 0)
}

func (s *LiteralContext) CharacterLiteral() antlr.TerminalNode {
	return s.GetToken(CPP14ParserCharacterLiteral, 0)
}

func (s *LiteralContext) FloatingLiteral() antlr.TerminalNode {
	return s.GetToken(CPP14ParserFloatingLiteral, 0)
}

func (s *LiteralContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(CPP14ParserStringLiteral, 0)
}

func (s *LiteralContext) BooleanLiteral() antlr.TerminalNode {
	return s.GetToken(CPP14ParserBooleanLiteral, 0)
}

func (s *LiteralContext) PointerLiteral() antlr.TerminalNode {
	return s.GetToken(CPP14ParserPointerLiteral, 0)
}

func (s *LiteralContext) UserDefinedLiteral() antlr.TerminalNode {
	return s.GetToken(CPP14ParserUserDefinedLiteral, 0)
}

func (s *LiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case CPP14ParserVisitor:
		return t.VisitLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *CPP14Parser) Literal() (localctx ILiteralContext) {
	localctx = NewLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 378, CPP14ParserRULE_literal)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2098)
		_la = p.GetTokenStream().LA(1)

		if !((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&254) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

func (p *CPP14Parser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 5:
		var t *NestedNameSpecifierContext = nil
		if localctx != nil {
			t = localctx.(*NestedNameSpecifierContext)
		}
		return p.NestedNameSpecifier_Sempred(t, predIndex)

	case 15:
		var t *PostfixExpressionContext = nil
		if localctx != nil {
			t = localctx.(*PostfixExpressionContext)
		}
		return p.PostfixExpression_Sempred(t, predIndex)

	case 25:
		var t *NoPointerNewDeclaratorContext = nil
		if localctx != nil {
			t = localctx.(*NoPointerNewDeclaratorContext)
		}
		return p.NoPointerNewDeclarator_Sempred(t, predIndex)

	case 115:
		var t *NoPointerDeclaratorContext = nil
		if localctx != nil {
			t = localctx.(*NoPointerDeclaratorContext)
		}
		return p.NoPointerDeclarator_Sempred(t, predIndex)

	case 126:
		var t *NoPointerAbstractDeclaratorContext = nil
		if localctx != nil {
			t = localctx.(*NoPointerAbstractDeclaratorContext)
		}
		return p.NoPointerAbstractDeclarator_Sempred(t, predIndex)

	case 128:
		var t *NoPointerAbstractPackDeclaratorContext = nil
		if localctx != nil {
			t = localctx.(*NoPointerAbstractPackDeclaratorContext)
		}
		return p.NoPointerAbstractPackDeclarator_Sempred(t, predIndex)

	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *CPP14Parser) NestedNameSpecifier_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 0:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *CPP14Parser) PostfixExpression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 1:
		return p.Precpred(p.GetParserRuleContext(), 7)

	case 2:
		return p.Precpred(p.GetParserRuleContext(), 6)

	case 3:
		return p.Precpred(p.GetParserRuleContext(), 4)

	case 4:
		return p.Precpred(p.GetParserRuleContext(), 3)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *CPP14Parser) NoPointerNewDeclarator_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 5:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *CPP14Parser) NoPointerDeclarator_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 6:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *CPP14Parser) NoPointerAbstractDeclarator_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 7:
		return p.Precpred(p.GetParserRuleContext(), 4)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *CPP14Parser) NoPointerAbstractPackDeclarator_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 8:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}
