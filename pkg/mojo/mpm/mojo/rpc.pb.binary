
ù
 mojo/rpc/attribute_context.proto¯// Code generated by mojo. DO NOT EDIT.

syntax = "proto3";

package mojo.rpc;

import "mojo/core/any.proto";
import "mojo/core/time.proto";
import "mojo/core/value.proto";

option go_package = "github.com/mojo-lang/rpc/go/pkg/mojo/rpc;rpc";
option java_multiple_files = true;
option java_outer_classname = "AttributeContextProto";
option java_package = "org.mojo-lang.mojo.rpc";

message AttributeContext {
    message Peer {
        string ip = 1;
        int64 port = 2;
        map<string, string> labels = 6;
        string principal = 7;
        string region_code = 8;
    }

    message Api {
        string service = 1;
        string operation = 2;
        string protocol = 3;
        string version = 4;
    }

    message Auth {
        string principal = 1;
        repeated string audiences = 2;
        string presenter = 3;
        mojo.core.Object claims = 4;
        repeated string access_levels = 5;
    }

    message Request {
        string id = 1;
        string method = 2;
        map<string, string> headers = 3;
        string path = 4;
        string host = 5;
        string scheme = 6;
        string query = 7;
        mojo.core.Timestamp time = 9;
        int64 size = 10;
        string protocol = 11;
        string reason = 12;
        AttributeContext.Auth auth = 13;
    }

    message Response {
        int64 code = 1;
        int64 size = 2;
        map<string, string> headers = 3;
        mojo.core.Timestamp time = 4;
        mojo.core.Duration backend_latency = 5;
    }

    message Resource {
        string service = 1;
        string name = 2;
        string type = 3;
        map<string, string> labels = 4;
        string uid = 5;
        map<string, string> annotations = 6;
        string display_name = 7;
        mojo.core.Timestamp create_time = 8;
        mojo.core.Timestamp update_time = 9;
        mojo.core.Timestamp delete_time = 10;
        string etag = 11;
        string location = 12;
    }

    Peer origin = 7;
    Peer source = 1;
    Peer destination = 2;
    Request request = 3;
    Response response = 4;
    Resource resource = 5;
    Api api = 6;
    repeated mojo.core.Any extensions = 8;
}
Â
$mojo/rpc/longrunning/operation.protoº// Code generated by mojo. DO NOT EDIT.

syntax = "proto3";

package mojo.rpc.longrunning;

import "mojo/core/any.proto";
import "mojo/core/error.proto";
import "mojo/core/time.proto";
import "mojo/mojo.proto";

option go_package = "github.com/mojo-lang/rpc/go/pkg/mojo/rpc/longrunning;longrunning";
option java_multiple_files = true;
option java_outer_classname = "OperationProto";
option java_package = "org.mojo-lang.mojo.rpc.longrunning";

message Operation {
    string name = 1 [(mojo.key)=""];
    mojo.core.Any metadata = 2;
    bool done = 3;
    mojo.core.Error error = 4;
    mojo.core.Any response = 5;
    mojo.core.Timestamp create_time = 14;
    mojo.core.Timestamp update_time = 15;
}
ß
%mojo/rpc/longrunning/operations.proto˝
// Code generated by mojo. DO NOT EDIT.

syntax = "proto3";

package mojo.rpc.longrunning;

import "mojo/core/null.proto";
import "mojo/core/time.proto";
import "mojo/mojo.proto";
import "mojo/rpc/longrunning/operation.proto";

option go_package = "github.com/mojo-lang/rpc/go/pkg/mojo/rpc/longrunning;longrunning";
option java_multiple_files = true;
option java_outer_classname = "OperationsProto";
option java_package = "org.mojo-lang.mojo.rpc.longrunning";

message ListOperationsRequest {
    string parent = 1;
    string filter = 4;
    int32 page_size = 2000;
    string page_token = 2001;
    int32 skip = 2002;
}

message ListOperationsResponse {
    repeated Operation operations = 1;
    int32 total_count = 2000;
    string next_page_token = 2001;
}

message GetOperationRequest {
    string name = 1;
}

message DeleteOperationRequest {
    string name = 1;
}

message CancelOperationRequest {
    string name = 1;
}

message WaitOperationRequest {
    string name = 1;
    mojo.core.Duration timeout = 2;
}

service Operations {
    rpc list_operations(ListOperationsRequest) returns (ListOperationsResponse);
    rpc get_operation(GetOperationRequest) returns (Operation);
    rpc delete_operation(DeleteOperationRequest) returns (mojo.core.Null);
    rpc cancel_operation(CancelOperationRequest) returns (mojo.core.Null);
    rpc wait_operation(WaitOperationRequest) returns (Operation);
}
ƒ
mojo/rpc/message.proto©// Code generated by mojo. DO NOT EDIT.

syntax = "proto3";

package mojo.rpc;

option go_package = "github.com/mojo-lang/rpc/go/pkg/mojo/rpc;rpc";
option java_multiple_files = true;
option java_outer_classname = "MessageProto";
option java_package = "org.mojo-lang.mojo.rpc";

message Message {
}