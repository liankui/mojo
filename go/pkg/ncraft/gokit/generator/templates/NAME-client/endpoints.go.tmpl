// Code generated by chaosmojo. DO NOT EDIT.
// Rerunning chaosmojo will overwrite this file.
// Version: {{.Version}}
// Version Date: {{.VersionDate}}

package {{ToSnake .Interface.Name}}_client

// This file contains methods to make individual endpoints from services,
// request and response types to serve those endpoints, as well as encoders and
// decoders for those types, for all of our supported transport serialization
// formats.

import (
	"context"
	"github.com/go-kit/kit/endpoint"

	{{range $i := .ExternalMessageImports}}
	"{{$i}}"
	{{- end}}

	pb "{{.ApiImportPath -}}"
)

// Endpoints collects all of the endpoints that compose an add service. It's
// meant to be used as a helper struct, to collect all of the endpoints into a
// single parameter.
//
// In a server, it's useful for functions that need to operate on a per-endpoint
// basis. For example, you might pass an Endpoints to a function that produces
// an http.Handler, with each method (endpoint) wired up to a specific path. (It
// is probably a mistake in design to invoke the Interface methods on the
// Endpoints struct in a server.)
//
// In a client, it's useful to collect individually constructed endpoints into a
// single type that implements the Interface interface. For example, you might
// construct individual endpoints using transport/http.NewClient, combine them into an Endpoints, and return it to the caller as a Interface.
type Endpoints struct {
{{range $i := .Interface.Methods}}
	{{ToCamel $i.Name}}Endpoint    endpoint.Endpoint
{{- end}}
}

// Endpoints
{{range $i := .Interface.Methods}}
	func (e Endpoints) {{ToCamel $i.Name}}(ctx context.Context, in *{{GoPackageName $i.Request.Name}}.{{GoName $i.Request.Name}}) (*{{GoPackageName $i.Response.Name}}.{{GoName $i.Response.Name}}, error) {
		response, err := e.{{ToCamel $i.Name}}Endpoint(ctx, in)
		if err != nil {
			return nil, err
		}
		return response.(*{{GoPackageName $i.Response.Name}}.{{GoName $i.Response.Name}}), nil
	}
{{end}}

// Make Endpoints
{{with $te := .}}
	{{range $i := $te.Interface.Methods}}
		func Make{{ToCamel $i.Name}}Endpoint(s pb.{{$te.Interface.Name}}Server) endpoint.Endpoint {
			return func(ctx context.Context, request interface{}) (response interface{}, err error) {
				req := request.(*{{GoPackageName $i.Request.Name}}.{{GoName $i.Request.Name}})
				v, err := s.{{ToCamel $i.Name}}(ctx, req)
				if err != nil {
					return nil, err
				}
				return v, nil
			}
		}
	{{end}}
{{end}}

