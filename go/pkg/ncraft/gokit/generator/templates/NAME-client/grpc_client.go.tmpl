// Code generated by chaosmojo. DO NOT EDIT.
// Rerunning chaosmojo will overwrite this file.
// Version: {{.Version}}
// Version Date: {{.VersionDate}}

// Package grpc provides a gRPC client for the {{.Interface.Name}} service.
package {{ToSnake .Interface.Name}}_client

import (
    "io"
    "time"
    "sync"

    "github.com/ncraft-io/ncraft-gokit/pkg/logs"
    "github.com/ncraft-io/ncraft-gokit/pkg/config"

    "github.com/go-kit/kit/endpoint"
    "github.com/go-kit/kit/log"
    "github.com/go-kit/kit/sd"
    stdopentracing "github.com/opentracing/opentracing-go"
    "google.golang.org/grpc"

    "github.com/ncraft-io/ncraft-gokit/pkg/sd/lb"
    nclient "github.com/ncraft-io/ncraft-gokit/pkg/client"

	// This Interface
	pb "{{.ApiImportPath -}}"
)

func init() {
	// tracing init
	tracer, c := tracing.New(FullServiceName)
	if c != nil {
		defer c.Close()
	}

	// logger init
	logger := logs.KitLogger()

	sdClient := sd.New(sd.NewConfig("sd"), logger)
	if sdClient == nil {
		panic("sdClient is nil")
	}

	cfg := nclient.NewConfig("sd")

	service = NewGrpcClient(cfg, sdClient.Instancer(FullServiceName), tracer, logger)
	logs.Info("{{.Interface.ServerName}} is connecting")
}

type Conn struct {
    conn *grpc.ClientConn
    service pb.{{.Interface.ServerName}}
}

type Client struct {
    Endpoints
    connections map[string]*Conn

    mux  sync.RWMutex
}

var service pb.{{.Interface.ServerName}}

const FullServiceName = "{{.PackageName}}.{{.Interface.Name}}"

func Instance() pb.{{.Interface.ServerName}} {
    return service
}

// New returns an service backed by a gRPC client connection. It is the
// responsibility of the caller to dial, and later close, the connection.
func NewGrpcClient(cfg *nclient.Config, instancer sd.Instancer, tracer stdopentracing.Tracer, logger log.Logger) *Client {
	client := &Client{}
	client.connections = make(map[string]*Conn)

	{{- with $te := .}}
		{{- with $pkgName := $te.PackageName}}
			{{- range $i := $te.Interface.Methods}}
            // {{ToLowerCamel $i.Name}}Endpoint
            {
                factory := client.factory(Make{{$i.Name}}Endpoint, tracer, logger)
                endpointer := sd.NewEndpointer(instancer, factory, logger)
                balancer := lb.NewRoundRobin(endpointer)
                retry := lb.Retry(cfg.Retry.Max, time.Second*time.Duration(cfg.Retry.Timeout), balancer)
                client.Endpoints.{{$i.Name}}Endpoint = retry
            }
			{{end}}
		{{end}}
	{{end}}

    service = client.Endpoints
	return client
}

func (client *Client) Close() error {
	for key, conn := range client.connections {
		logs.Info("closing ", key)
		conn.conn.Close()
	}

	return nil
}

func (client *Client) factory(makeEndpoint func(server pb.{{.Interface.ServerName}}) endpoint.Endpoint, tracer stdopentracing.Tracer, logger log.Logger) sd.Factory {
	return func(instance string) (endpoint.Endpoint, io.Closer, error) {
		// We could just as easily use the HTTP or Thrift client package to make
		// the connection to addsvc. We've chosen gRPC arbitrarily. Note that
		// the transport is an implementation detail: it doesn't leak out of
		// this function. Nice!
        client.mux.Lock()
        defer client.mux.Unlock()
        logs.Info("sd factory received instance: ", instance)

		var conn *Conn
		if _, ok := client.connections[instance]; !ok {
			transport, err := grpc.Dial(instance, grpc.WithInsecure())
			if err != nil {
				return nil, nil, err
			}
			grpc, err := NewGrpc(transport, tracer, logger, CtxValuesToSend("access_key"))
			if err != nil {
                return nil, nil, err
            }
			conn = &Conn{conn:transport, service:grpc}
			client.connections[instance] = conn
		} else {
			conn = client.connections[instance]
		}

		return makeEndpoint(conn.service), client.closer(instance), nil
	}
}

type closer struct {
	close func() error
}

func (client *closer) Close() error {
	return client.close()
}

func (client *Client) closer(instance string) io.Closer {
	c := new(closer)
	c.close = func() error {
		logs.Info("delete instance : ", instance)
		client.mux.Lock()
		defer client.mux.Unlock()

		var err error
		if _, ok := client.connections[instance]; ok {
			err = client.connections[instance].conn.Close()
			delete(client.connections, instance)
		}
		return err
	}

	return c
}
